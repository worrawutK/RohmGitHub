'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.5420
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("DBxDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class DBxDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableUkebaraiData As UkebaraiDataDataTable
    
    Private tableFTAlarmInfo As FTAlarmInfoDataTable
    
    Private tableFTAlarmTable As FTAlarmTableDataTable
    
    Private tableFTData As FTDataDataTable
    
    Private tableFTMachineSetting As FTMachineSettingDataTable
    
    Private tableMyUser As MyUserDataTable
    
    Private tableUserGroups As UserGroupsDataTable
    
    Private tableTransactionData As TransactionDataDataTable
    
    Private tableFixedLCL As FixedLCLDataTable
    
    Private tableTesterType As TesterTypeDataTable
    
    Private tableEquipmentLocation As EquipmentLocationDataTable
    
    Private tableData As DataDataTable
    
    Private tableFTSetupReport As FTSetupReportDataTable
    
    Private tableFTBom As FTBomDataTable
    
    Private tableFTBomOption As FTBomOptionDataTable
    
    Private tableFTBomTestEquipment As FTBomTestEquipmentDataTable
    
    Private tableTempData As TempDataDataTable
    
    Private tableFTPCType As FTPCTypeDataTable
    
    Private relationFK_FTAlarmInfo_FTAlarmTable As Global.System.Data.DataRelation
    
    Private relationFK_FTData_TransactionData As Global.System.Data.DataRelation
    
    Private relationFK_FTBom_TesterType As Global.System.Data.DataRelation
    
    Private relationFK_FTBomOption_FTBom As Global.System.Data.DataRelation
    
    Private relationFK_FTBomTestEquipment_FTBom As Global.System.Data.DataRelation
    
    Private relationFK_FTBom_FTPCType As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("UkebaraiData")) Is Nothing) Then
                MyBase.Tables.Add(New UkebaraiDataDataTable(ds.Tables("UkebaraiData")))
            End If
            If (Not (ds.Tables("FTAlarmInfo")) Is Nothing) Then
                MyBase.Tables.Add(New FTAlarmInfoDataTable(ds.Tables("FTAlarmInfo")))
            End If
            If (Not (ds.Tables("FTAlarmTable")) Is Nothing) Then
                MyBase.Tables.Add(New FTAlarmTableDataTable(ds.Tables("FTAlarmTable")))
            End If
            If (Not (ds.Tables("FTData")) Is Nothing) Then
                MyBase.Tables.Add(New FTDataDataTable(ds.Tables("FTData")))
            End If
            If (Not (ds.Tables("FTMachineSetting")) Is Nothing) Then
                MyBase.Tables.Add(New FTMachineSettingDataTable(ds.Tables("FTMachineSetting")))
            End If
            If (Not (ds.Tables("MyUser")) Is Nothing) Then
                MyBase.Tables.Add(New MyUserDataTable(ds.Tables("MyUser")))
            End If
            If (Not (ds.Tables("UserGroups")) Is Nothing) Then
                MyBase.Tables.Add(New UserGroupsDataTable(ds.Tables("UserGroups")))
            End If
            If (Not (ds.Tables("TransactionData")) Is Nothing) Then
                MyBase.Tables.Add(New TransactionDataDataTable(ds.Tables("TransactionData")))
            End If
            If (Not (ds.Tables("FixedLCL")) Is Nothing) Then
                MyBase.Tables.Add(New FixedLCLDataTable(ds.Tables("FixedLCL")))
            End If
            If (Not (ds.Tables("TesterType")) Is Nothing) Then
                MyBase.Tables.Add(New TesterTypeDataTable(ds.Tables("TesterType")))
            End If
            If (Not (ds.Tables("EquipmentLocation")) Is Nothing) Then
                MyBase.Tables.Add(New EquipmentLocationDataTable(ds.Tables("EquipmentLocation")))
            End If
            If (Not (ds.Tables("Data")) Is Nothing) Then
                MyBase.Tables.Add(New DataDataTable(ds.Tables("Data")))
            End If
            If (Not (ds.Tables("FTSetupReport")) Is Nothing) Then
                MyBase.Tables.Add(New FTSetupReportDataTable(ds.Tables("FTSetupReport")))
            End If
            If (Not (ds.Tables("FTBom")) Is Nothing) Then
                MyBase.Tables.Add(New FTBomDataTable(ds.Tables("FTBom")))
            End If
            If (Not (ds.Tables("FTBomOption")) Is Nothing) Then
                MyBase.Tables.Add(New FTBomOptionDataTable(ds.Tables("FTBomOption")))
            End If
            If (Not (ds.Tables("FTBomTestEquipment")) Is Nothing) Then
                MyBase.Tables.Add(New FTBomTestEquipmentDataTable(ds.Tables("FTBomTestEquipment")))
            End If
            If (Not (ds.Tables("TempData")) Is Nothing) Then
                MyBase.Tables.Add(New TempDataDataTable(ds.Tables("TempData")))
            End If
            If (Not (ds.Tables("FTPCType")) Is Nothing) Then
                MyBase.Tables.Add(New FTPCTypeDataTable(ds.Tables("FTPCType")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property UkebaraiData() As UkebaraiDataDataTable
        Get
            Return Me.tableUkebaraiData
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FTAlarmInfo() As FTAlarmInfoDataTable
        Get
            Return Me.tableFTAlarmInfo
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FTAlarmTable() As FTAlarmTableDataTable
        Get
            Return Me.tableFTAlarmTable
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FTData() As FTDataDataTable
        Get
            Return Me.tableFTData
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FTMachineSetting() As FTMachineSettingDataTable
        Get
            Return Me.tableFTMachineSetting
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MyUser() As MyUserDataTable
        Get
            Return Me.tableMyUser
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property UserGroups() As UserGroupsDataTable
        Get
            Return Me.tableUserGroups
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TransactionData() As TransactionDataDataTable
        Get
            Return Me.tableTransactionData
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FixedLCL() As FixedLCLDataTable
        Get
            Return Me.tableFixedLCL
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TesterType() As TesterTypeDataTable
        Get
            Return Me.tableTesterType
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property EquipmentLocation() As EquipmentLocationDataTable
        Get
            Return Me.tableEquipmentLocation
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Data() As DataDataTable
        Get
            Return Me.tableData
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FTSetupReport() As FTSetupReportDataTable
        Get
            Return Me.tableFTSetupReport
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FTBom() As FTBomDataTable
        Get
            Return Me.tableFTBom
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FTBomOption() As FTBomOptionDataTable
        Get
            Return Me.tableFTBomOption
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FTBomTestEquipment() As FTBomTestEquipmentDataTable
        Get
            Return Me.tableFTBomTestEquipment
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property TempData() As TempDataDataTable
        Get
            Return Me.tableTempData
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property FTPCType() As FTPCTypeDataTable
        Get
            Return Me.tableFTPCType
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As DBxDataSet = CType(MyBase.Clone,DBxDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("UkebaraiData")) Is Nothing) Then
                MyBase.Tables.Add(New UkebaraiDataDataTable(ds.Tables("UkebaraiData")))
            End If
            If (Not (ds.Tables("FTAlarmInfo")) Is Nothing) Then
                MyBase.Tables.Add(New FTAlarmInfoDataTable(ds.Tables("FTAlarmInfo")))
            End If
            If (Not (ds.Tables("FTAlarmTable")) Is Nothing) Then
                MyBase.Tables.Add(New FTAlarmTableDataTable(ds.Tables("FTAlarmTable")))
            End If
            If (Not (ds.Tables("FTData")) Is Nothing) Then
                MyBase.Tables.Add(New FTDataDataTable(ds.Tables("FTData")))
            End If
            If (Not (ds.Tables("FTMachineSetting")) Is Nothing) Then
                MyBase.Tables.Add(New FTMachineSettingDataTable(ds.Tables("FTMachineSetting")))
            End If
            If (Not (ds.Tables("MyUser")) Is Nothing) Then
                MyBase.Tables.Add(New MyUserDataTable(ds.Tables("MyUser")))
            End If
            If (Not (ds.Tables("UserGroups")) Is Nothing) Then
                MyBase.Tables.Add(New UserGroupsDataTable(ds.Tables("UserGroups")))
            End If
            If (Not (ds.Tables("TransactionData")) Is Nothing) Then
                MyBase.Tables.Add(New TransactionDataDataTable(ds.Tables("TransactionData")))
            End If
            If (Not (ds.Tables("FixedLCL")) Is Nothing) Then
                MyBase.Tables.Add(New FixedLCLDataTable(ds.Tables("FixedLCL")))
            End If
            If (Not (ds.Tables("TesterType")) Is Nothing) Then
                MyBase.Tables.Add(New TesterTypeDataTable(ds.Tables("TesterType")))
            End If
            If (Not (ds.Tables("EquipmentLocation")) Is Nothing) Then
                MyBase.Tables.Add(New EquipmentLocationDataTable(ds.Tables("EquipmentLocation")))
            End If
            If (Not (ds.Tables("Data")) Is Nothing) Then
                MyBase.Tables.Add(New DataDataTable(ds.Tables("Data")))
            End If
            If (Not (ds.Tables("FTSetupReport")) Is Nothing) Then
                MyBase.Tables.Add(New FTSetupReportDataTable(ds.Tables("FTSetupReport")))
            End If
            If (Not (ds.Tables("FTBom")) Is Nothing) Then
                MyBase.Tables.Add(New FTBomDataTable(ds.Tables("FTBom")))
            End If
            If (Not (ds.Tables("FTBomOption")) Is Nothing) Then
                MyBase.Tables.Add(New FTBomOptionDataTable(ds.Tables("FTBomOption")))
            End If
            If (Not (ds.Tables("FTBomTestEquipment")) Is Nothing) Then
                MyBase.Tables.Add(New FTBomTestEquipmentDataTable(ds.Tables("FTBomTestEquipment")))
            End If
            If (Not (ds.Tables("TempData")) Is Nothing) Then
                MyBase.Tables.Add(New TempDataDataTable(ds.Tables("TempData")))
            End If
            If (Not (ds.Tables("FTPCType")) Is Nothing) Then
                MyBase.Tables.Add(New FTPCTypeDataTable(ds.Tables("FTPCType")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableUkebaraiData = CType(MyBase.Tables("UkebaraiData"),UkebaraiDataDataTable)
        If (initTable = true) Then
            If (Not (Me.tableUkebaraiData) Is Nothing) Then
                Me.tableUkebaraiData.InitVars
            End If
        End If
        Me.tableFTAlarmInfo = CType(MyBase.Tables("FTAlarmInfo"),FTAlarmInfoDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFTAlarmInfo) Is Nothing) Then
                Me.tableFTAlarmInfo.InitVars
            End If
        End If
        Me.tableFTAlarmTable = CType(MyBase.Tables("FTAlarmTable"),FTAlarmTableDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFTAlarmTable) Is Nothing) Then
                Me.tableFTAlarmTable.InitVars
            End If
        End If
        Me.tableFTData = CType(MyBase.Tables("FTData"),FTDataDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFTData) Is Nothing) Then
                Me.tableFTData.InitVars
            End If
        End If
        Me.tableFTMachineSetting = CType(MyBase.Tables("FTMachineSetting"),FTMachineSettingDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFTMachineSetting) Is Nothing) Then
                Me.tableFTMachineSetting.InitVars
            End If
        End If
        Me.tableMyUser = CType(MyBase.Tables("MyUser"),MyUserDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMyUser) Is Nothing) Then
                Me.tableMyUser.InitVars
            End If
        End If
        Me.tableUserGroups = CType(MyBase.Tables("UserGroups"),UserGroupsDataTable)
        If (initTable = true) Then
            If (Not (Me.tableUserGroups) Is Nothing) Then
                Me.tableUserGroups.InitVars
            End If
        End If
        Me.tableTransactionData = CType(MyBase.Tables("TransactionData"),TransactionDataDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTransactionData) Is Nothing) Then
                Me.tableTransactionData.InitVars
            End If
        End If
        Me.tableFixedLCL = CType(MyBase.Tables("FixedLCL"),FixedLCLDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFixedLCL) Is Nothing) Then
                Me.tableFixedLCL.InitVars
            End If
        End If
        Me.tableTesterType = CType(MyBase.Tables("TesterType"),TesterTypeDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTesterType) Is Nothing) Then
                Me.tableTesterType.InitVars
            End If
        End If
        Me.tableEquipmentLocation = CType(MyBase.Tables("EquipmentLocation"),EquipmentLocationDataTable)
        If (initTable = true) Then
            If (Not (Me.tableEquipmentLocation) Is Nothing) Then
                Me.tableEquipmentLocation.InitVars
            End If
        End If
        Me.tableData = CType(MyBase.Tables("Data"),DataDataTable)
        If (initTable = true) Then
            If (Not (Me.tableData) Is Nothing) Then
                Me.tableData.InitVars
            End If
        End If
        Me.tableFTSetupReport = CType(MyBase.Tables("FTSetupReport"),FTSetupReportDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFTSetupReport) Is Nothing) Then
                Me.tableFTSetupReport.InitVars
            End If
        End If
        Me.tableFTBom = CType(MyBase.Tables("FTBom"),FTBomDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFTBom) Is Nothing) Then
                Me.tableFTBom.InitVars
            End If
        End If
        Me.tableFTBomOption = CType(MyBase.Tables("FTBomOption"),FTBomOptionDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFTBomOption) Is Nothing) Then
                Me.tableFTBomOption.InitVars
            End If
        End If
        Me.tableFTBomTestEquipment = CType(MyBase.Tables("FTBomTestEquipment"),FTBomTestEquipmentDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFTBomTestEquipment) Is Nothing) Then
                Me.tableFTBomTestEquipment.InitVars
            End If
        End If
        Me.tableTempData = CType(MyBase.Tables("TempData"),TempDataDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTempData) Is Nothing) Then
                Me.tableTempData.InitVars
            End If
        End If
        Me.tableFTPCType = CType(MyBase.Tables("FTPCType"),FTPCTypeDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFTPCType) Is Nothing) Then
                Me.tableFTPCType.InitVars
            End If
        End If
        Me.relationFK_FTAlarmInfo_FTAlarmTable = Me.Relations("FK_FTAlarmInfo_FTAlarmTable")
        Me.relationFK_FTData_TransactionData = Me.Relations("FK_FTData_TransactionData")
        Me.relationFK_FTBom_TesterType = Me.Relations("FK_FTBom_TesterType")
        Me.relationFK_FTBomOption_FTBom = Me.Relations("FK_FTBomOption_FTBom")
        Me.relationFK_FTBomTestEquipment_FTBom = Me.Relations("FK_FTBomTestEquipment_FTBom")
        Me.relationFK_FTBom_FTPCType = Me.Relations("FK_FTBom_FTPCType")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DBxDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/DBxDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableUkebaraiData = New UkebaraiDataDataTable
        MyBase.Tables.Add(Me.tableUkebaraiData)
        Me.tableFTAlarmInfo = New FTAlarmInfoDataTable
        MyBase.Tables.Add(Me.tableFTAlarmInfo)
        Me.tableFTAlarmTable = New FTAlarmTableDataTable
        MyBase.Tables.Add(Me.tableFTAlarmTable)
        Me.tableFTData = New FTDataDataTable
        MyBase.Tables.Add(Me.tableFTData)
        Me.tableFTMachineSetting = New FTMachineSettingDataTable
        MyBase.Tables.Add(Me.tableFTMachineSetting)
        Me.tableMyUser = New MyUserDataTable
        MyBase.Tables.Add(Me.tableMyUser)
        Me.tableUserGroups = New UserGroupsDataTable
        MyBase.Tables.Add(Me.tableUserGroups)
        Me.tableTransactionData = New TransactionDataDataTable
        MyBase.Tables.Add(Me.tableTransactionData)
        Me.tableFixedLCL = New FixedLCLDataTable
        MyBase.Tables.Add(Me.tableFixedLCL)
        Me.tableTesterType = New TesterTypeDataTable
        MyBase.Tables.Add(Me.tableTesterType)
        Me.tableEquipmentLocation = New EquipmentLocationDataTable
        MyBase.Tables.Add(Me.tableEquipmentLocation)
        Me.tableData = New DataDataTable
        MyBase.Tables.Add(Me.tableData)
        Me.tableFTSetupReport = New FTSetupReportDataTable
        MyBase.Tables.Add(Me.tableFTSetupReport)
        Me.tableFTBom = New FTBomDataTable
        MyBase.Tables.Add(Me.tableFTBom)
        Me.tableFTBomOption = New FTBomOptionDataTable
        MyBase.Tables.Add(Me.tableFTBomOption)
        Me.tableFTBomTestEquipment = New FTBomTestEquipmentDataTable
        MyBase.Tables.Add(Me.tableFTBomTestEquipment)
        Me.tableTempData = New TempDataDataTable
        MyBase.Tables.Add(Me.tableTempData)
        Me.tableFTPCType = New FTPCTypeDataTable
        MyBase.Tables.Add(Me.tableFTPCType)
        Me.relationFK_FTAlarmInfo_FTAlarmTable = New Global.System.Data.DataRelation("FK_FTAlarmInfo_FTAlarmTable", New Global.System.Data.DataColumn() {Me.tableFTAlarmTable.IDColumn}, New Global.System.Data.DataColumn() {Me.tableFTAlarmInfo.AlarmIDColumn}, false)
        Me.Relations.Add(Me.relationFK_FTAlarmInfo_FTAlarmTable)
        Me.relationFK_FTData_TransactionData = New Global.System.Data.DataRelation("FK_FTData_TransactionData", New Global.System.Data.DataColumn() {Me.tableTransactionData.LotNoColumn}, New Global.System.Data.DataColumn() {Me.tableFTData.LotNoColumn}, false)
        Me.Relations.Add(Me.relationFK_FTData_TransactionData)
        Me.relationFK_FTBom_TesterType = New Global.System.Data.DataRelation("FK_FTBom_TesterType", New Global.System.Data.DataColumn() {Me.tableTesterType.IDColumn}, New Global.System.Data.DataColumn() {Me.tableFTBom.TesterTypeIDColumn}, false)
        Me.Relations.Add(Me.relationFK_FTBom_TesterType)
        Me.relationFK_FTBomOption_FTBom = New Global.System.Data.DataRelation("FK_FTBomOption_FTBom", New Global.System.Data.DataColumn() {Me.tableFTBom.IDColumn}, New Global.System.Data.DataColumn() {Me.tableFTBomOption.FTBomIDColumn}, false)
        Me.Relations.Add(Me.relationFK_FTBomOption_FTBom)
        Me.relationFK_FTBomTestEquipment_FTBom = New Global.System.Data.DataRelation("FK_FTBomTestEquipment_FTBom", New Global.System.Data.DataColumn() {Me.tableFTBom.IDColumn}, New Global.System.Data.DataColumn() {Me.tableFTBomTestEquipment.FTBomIDColumn}, false)
        Me.Relations.Add(Me.relationFK_FTBomTestEquipment_FTBom)
        Me.relationFK_FTBom_FTPCType = New Global.System.Data.DataRelation("FK_FTBom_FTPCType", New Global.System.Data.DataColumn() {Me.tableFTPCType.IDColumn}, New Global.System.Data.DataColumn() {Me.tableFTBom.PCMachineTypeIDColumn}, false)
        Me.Relations.Add(Me.relationFK_FTBom_FTPCType)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeUkebaraiData() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFTAlarmInfo() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFTAlarmTable() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFTData() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFTMachineSetting() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMyUser() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeUserGroups() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTransactionData() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFixedLCL() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTesterType() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeEquipmentLocation() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeData() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFTSetupReport() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFTBom() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFTBomOption() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFTBomTestEquipment() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeTempData() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeFTPCType() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DBxDataSet = New DBxDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub UkebaraiDataRowChangeEventHandler(ByVal sender As Object, ByVal e As UkebaraiDataRowChangeEvent)
    
    Public Delegate Sub FTAlarmInfoRowChangeEventHandler(ByVal sender As Object, ByVal e As FTAlarmInfoRowChangeEvent)
    
    Public Delegate Sub FTAlarmTableRowChangeEventHandler(ByVal sender As Object, ByVal e As FTAlarmTableRowChangeEvent)
    
    Public Delegate Sub FTDataRowChangeEventHandler(ByVal sender As Object, ByVal e As FTDataRowChangeEvent)
    
    Public Delegate Sub FTMachineSettingRowChangeEventHandler(ByVal sender As Object, ByVal e As FTMachineSettingRowChangeEvent)
    
    Public Delegate Sub MyUserRowChangeEventHandler(ByVal sender As Object, ByVal e As MyUserRowChangeEvent)
    
    Public Delegate Sub UserGroupsRowChangeEventHandler(ByVal sender As Object, ByVal e As UserGroupsRowChangeEvent)
    
    Public Delegate Sub TransactionDataRowChangeEventHandler(ByVal sender As Object, ByVal e As TransactionDataRowChangeEvent)
    
    Public Delegate Sub FixedLCLRowChangeEventHandler(ByVal sender As Object, ByVal e As FixedLCLRowChangeEvent)
    
    Public Delegate Sub TesterTypeRowChangeEventHandler(ByVal sender As Object, ByVal e As TesterTypeRowChangeEvent)
    
    Public Delegate Sub EquipmentLocationRowChangeEventHandler(ByVal sender As Object, ByVal e As EquipmentLocationRowChangeEvent)
    
    Public Delegate Sub DataRowChangeEventHandler(ByVal sender As Object, ByVal e As DataRowChangeEvent)
    
    Public Delegate Sub FTSetupReportRowChangeEventHandler(ByVal sender As Object, ByVal e As FTSetupReportRowChangeEvent)
    
    Public Delegate Sub FTBomRowChangeEventHandler(ByVal sender As Object, ByVal e As FTBomRowChangeEvent)
    
    Public Delegate Sub FTBomOptionRowChangeEventHandler(ByVal sender As Object, ByVal e As FTBomOptionRowChangeEvent)
    
    Public Delegate Sub FTBomTestEquipmentRowChangeEventHandler(ByVal sender As Object, ByVal e As FTBomTestEquipmentRowChangeEvent)
    
    Public Delegate Sub TempDataRowChangeEventHandler(ByVal sender As Object, ByVal e As TempDataRowChangeEvent)
    
    Public Delegate Sub FTPCTypeRowChangeEventHandler(ByVal sender As Object, ByVal e As FTPCTypeRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class UkebaraiDataDataTable
        Inherits Global.System.Data.TypedTableBase(Of UkebaraiDataRow)
        
        Private columnDBxProcessID As Global.System.Data.DataColumn
        
        Private columnDBxLotNo As Global.System.Data.DataColumn
        
        Private columnDBxMCNo As Global.System.Data.DataColumn
        
        Private columnDBxLotStartTime As Global.System.Data.DataColumn
        
        Private columnDBxLotEndTime As Global.System.Data.DataColumn
        
        Private columnLotNo As Global.System.Data.DataColumn
        
        Private columnProcess_No As Global.System.Data.DataColumn
        
        Private columnDate As Global.System.Data.DataColumn
        
        Private columnTime As Global.System.Data.DataColumn
        
        Private columnGood_Qty As Global.System.Data.DataColumn
        
        Private columnNG_Qty As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "UkebaraiData"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DBxProcessIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDBxProcessID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DBxLotNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDBxLotNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DBxMCNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDBxMCNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DBxLotStartTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDBxLotStartTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DBxLotEndTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDBxLotEndTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LotNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLotNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Process_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProcess_No
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Good_QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGood_Qty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NG_QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNG_Qty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As UkebaraiDataRow
            Get
                Return CType(Me.Rows(index),UkebaraiDataRow)
            End Get
        End Property
        
        Public Event UkebaraiDataRowChanging As UkebaraiDataRowChangeEventHandler
        
        Public Event UkebaraiDataRowChanged As UkebaraiDataRowChangeEventHandler
        
        Public Event UkebaraiDataRowDeleting As UkebaraiDataRowChangeEventHandler
        
        Public Event UkebaraiDataRowDeleted As UkebaraiDataRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddUkebaraiDataRow(ByVal row As UkebaraiDataRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddUkebaraiDataRow(ByVal DBxProcessID As Integer, ByVal DBxLotNo As String, ByVal DBxMCNo As String, ByVal DBxLotStartTime As Date, ByVal DBxLotEndTime As Date, ByVal LotNo As String, ByVal Process_No As String, ByVal _Date As String, ByVal Time As String, ByVal Good_Qty As String, ByVal NG_Qty As String) As UkebaraiDataRow
            Dim rowUkebaraiDataRow As UkebaraiDataRow = CType(Me.NewRow,UkebaraiDataRow)
            Dim columnValuesArray() As Object = New Object() {DBxProcessID, DBxLotNo, DBxMCNo, DBxLotStartTime, DBxLotEndTime, LotNo, Process_No, _Date, Time, Good_Qty, NG_Qty}
            rowUkebaraiDataRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowUkebaraiDataRow)
            Return rowUkebaraiDataRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByDBxProcessIDDBxLotNoDBxMCNoDBxLotStartTime(ByVal DBxProcessID As Integer, ByVal DBxLotNo As String, ByVal DBxMCNo As String, ByVal DBxLotStartTime As Date) As UkebaraiDataRow
            Return CType(Me.Rows.Find(New Object() {DBxProcessID, DBxLotNo, DBxMCNo, DBxLotStartTime}),UkebaraiDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As UkebaraiDataDataTable = CType(MyBase.Clone,UkebaraiDataDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New UkebaraiDataDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnDBxProcessID = MyBase.Columns("DBxProcessID")
            Me.columnDBxLotNo = MyBase.Columns("DBxLotNo")
            Me.columnDBxMCNo = MyBase.Columns("DBxMCNo")
            Me.columnDBxLotStartTime = MyBase.Columns("DBxLotStartTime")
            Me.columnDBxLotEndTime = MyBase.Columns("DBxLotEndTime")
            Me.columnLotNo = MyBase.Columns("LotNo")
            Me.columnProcess_No = MyBase.Columns("Process_No")
            Me.columnDate = MyBase.Columns("Date")
            Me.columnTime = MyBase.Columns("Time")
            Me.columnGood_Qty = MyBase.Columns("Good_Qty")
            Me.columnNG_Qty = MyBase.Columns("NG_Qty")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnDBxProcessID = New Global.System.Data.DataColumn("DBxProcessID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDBxProcessID)
            Me.columnDBxLotNo = New Global.System.Data.DataColumn("DBxLotNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDBxLotNo)
            Me.columnDBxMCNo = New Global.System.Data.DataColumn("DBxMCNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDBxMCNo)
            Me.columnDBxLotStartTime = New Global.System.Data.DataColumn("DBxLotStartTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDBxLotStartTime)
            Me.columnDBxLotEndTime = New Global.System.Data.DataColumn("DBxLotEndTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDBxLotEndTime)
            Me.columnLotNo = New Global.System.Data.DataColumn("LotNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLotNo)
            Me.columnProcess_No = New Global.System.Data.DataColumn("Process_No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProcess_No)
            Me.columnDate = New Global.System.Data.DataColumn("Date", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnDate.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "DateColumn")
            Me.columnDate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnDate")
            Me.columnDate.ExtendedProperties.Add("Generator_UserColumnName", "Date")
            MyBase.Columns.Add(Me.columnDate)
            Me.columnTime = New Global.System.Data.DataColumn("Time", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTime)
            Me.columnGood_Qty = New Global.System.Data.DataColumn("Good_Qty", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGood_Qty)
            Me.columnNG_Qty = New Global.System.Data.DataColumn("NG_Qty", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNG_Qty)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnDBxProcessID, Me.columnDBxLotNo, Me.columnDBxMCNo, Me.columnDBxLotStartTime}, true))
            Me.columnDBxProcessID.AllowDBNull = false
            Me.columnDBxLotNo.AllowDBNull = false
            Me.columnDBxLotNo.MaxLength = 10
            Me.columnDBxMCNo.AllowDBNull = false
            Me.columnDBxMCNo.MaxLength = 10
            Me.columnDBxLotStartTime.AllowDBNull = false
            Me.columnLotNo.MaxLength = 10
            Me.columnProcess_No.MaxLength = 5
            Me.columnDate.MaxLength = 6
            Me.columnTime.MaxLength = 4
            Me.columnGood_Qty.MaxLength = 5
            Me.columnNG_Qty.MaxLength = 5
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewUkebaraiDataRow() As UkebaraiDataRow
            Return CType(Me.NewRow,UkebaraiDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New UkebaraiDataRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(UkebaraiDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UkebaraiDataRowChangedEvent) Is Nothing) Then
                RaiseEvent UkebaraiDataRowChanged(Me, New UkebaraiDataRowChangeEvent(CType(e.Row,UkebaraiDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UkebaraiDataRowChangingEvent) Is Nothing) Then
                RaiseEvent UkebaraiDataRowChanging(Me, New UkebaraiDataRowChangeEvent(CType(e.Row,UkebaraiDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UkebaraiDataRowDeletedEvent) Is Nothing) Then
                RaiseEvent UkebaraiDataRowDeleted(Me, New UkebaraiDataRowChangeEvent(CType(e.Row,UkebaraiDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UkebaraiDataRowDeletingEvent) Is Nothing) Then
                RaiseEvent UkebaraiDataRowDeleting(Me, New UkebaraiDataRowChangeEvent(CType(e.Row,UkebaraiDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveUkebaraiDataRow(ByVal row As UkebaraiDataRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DBxDataSet = New DBxDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "UkebaraiDataDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FTAlarmInfoDataTable
        Inherits Global.System.Data.TypedTableBase(Of FTAlarmInfoRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnRecordTime As Global.System.Data.DataColumn
        
        Private columnAlarmID As Global.System.Data.DataColumn
        
        Private columnLotNo As Global.System.Data.DataColumn
        
        Private columnMCNo As Global.System.Data.DataColumn
        
        Private columnClearTime As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FTAlarmInfo"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RecordTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRecordTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AlarmIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAlarmID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LotNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLotNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MCNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMCNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClearTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClearTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FTAlarmInfoRow
            Get
                Return CType(Me.Rows(index),FTAlarmInfoRow)
            End Get
        End Property
        
        Public Event FTAlarmInfoRowChanging As FTAlarmInfoRowChangeEventHandler
        
        Public Event FTAlarmInfoRowChanged As FTAlarmInfoRowChangeEventHandler
        
        Public Event FTAlarmInfoRowDeleting As FTAlarmInfoRowChangeEventHandler
        
        Public Event FTAlarmInfoRowDeleted As FTAlarmInfoRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFTAlarmInfoRow(ByVal row As FTAlarmInfoRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFTAlarmInfoRow(ByVal RecordTime As Date, ByVal parentFTAlarmTableRowByFK_FTAlarmInfo_FTAlarmTable As FTAlarmTableRow, ByVal LotNo As String, ByVal MCNo As String, ByVal ClearTime As Date) As FTAlarmInfoRow
            Dim rowFTAlarmInfoRow As FTAlarmInfoRow = CType(Me.NewRow,FTAlarmInfoRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, RecordTime, Nothing, LotNo, MCNo, ClearTime}
            If (Not (parentFTAlarmTableRowByFK_FTAlarmInfo_FTAlarmTable) Is Nothing) Then
                columnValuesArray(2) = parentFTAlarmTableRowByFK_FTAlarmInfo_FTAlarmTable(0)
            End If
            rowFTAlarmInfoRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFTAlarmInfoRow)
            Return rowFTAlarmInfoRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As Integer) As FTAlarmInfoRow
            Return CType(Me.Rows.Find(New Object() {ID}),FTAlarmInfoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FTAlarmInfoDataTable = CType(MyBase.Clone,FTAlarmInfoDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FTAlarmInfoDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnRecordTime = MyBase.Columns("RecordTime")
            Me.columnAlarmID = MyBase.Columns("AlarmID")
            Me.columnLotNo = MyBase.Columns("LotNo")
            Me.columnMCNo = MyBase.Columns("MCNo")
            Me.columnClearTime = MyBase.Columns("ClearTime")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnRecordTime = New Global.System.Data.DataColumn("RecordTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRecordTime)
            Me.columnAlarmID = New Global.System.Data.DataColumn("AlarmID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAlarmID)
            Me.columnLotNo = New Global.System.Data.DataColumn("LotNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLotNo)
            Me.columnMCNo = New Global.System.Data.DataColumn("MCNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMCNo)
            Me.columnClearTime = New Global.System.Data.DataColumn("ClearTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClearTime)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnRecordTime.AllowDBNull = false
            Me.columnAlarmID.AllowDBNull = false
            Me.columnLotNo.AllowDBNull = false
            Me.columnLotNo.MaxLength = 10
            Me.columnMCNo.AllowDBNull = false
            Me.columnMCNo.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFTAlarmInfoRow() As FTAlarmInfoRow
            Return CType(Me.NewRow,FTAlarmInfoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FTAlarmInfoRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FTAlarmInfoRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FTAlarmInfoRowChangedEvent) Is Nothing) Then
                RaiseEvent FTAlarmInfoRowChanged(Me, New FTAlarmInfoRowChangeEvent(CType(e.Row,FTAlarmInfoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FTAlarmInfoRowChangingEvent) Is Nothing) Then
                RaiseEvent FTAlarmInfoRowChanging(Me, New FTAlarmInfoRowChangeEvent(CType(e.Row,FTAlarmInfoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FTAlarmInfoRowDeletedEvent) Is Nothing) Then
                RaiseEvent FTAlarmInfoRowDeleted(Me, New FTAlarmInfoRowChangeEvent(CType(e.Row,FTAlarmInfoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FTAlarmInfoRowDeletingEvent) Is Nothing) Then
                RaiseEvent FTAlarmInfoRowDeleting(Me, New FTAlarmInfoRowChangeEvent(CType(e.Row,FTAlarmInfoRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFTAlarmInfoRow(ByVal row As FTAlarmInfoRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DBxDataSet = New DBxDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FTAlarmInfoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FTAlarmTableDataTable
        Inherits Global.System.Data.TypedTableBase(Of FTAlarmTableRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnAlarmNo As Global.System.Data.DataColumn
        
        Private columnMachineType As Global.System.Data.DataColumn
        
        Private columnAlarmType As Global.System.Data.DataColumn
        
        Private columnAlarmMessage As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FTAlarmTable"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AlarmNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAlarmNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MachineTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMachineType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AlarmTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAlarmType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AlarmMessageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAlarmMessage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FTAlarmTableRow
            Get
                Return CType(Me.Rows(index),FTAlarmTableRow)
            End Get
        End Property
        
        Public Event FTAlarmTableRowChanging As FTAlarmTableRowChangeEventHandler
        
        Public Event FTAlarmTableRowChanged As FTAlarmTableRowChangeEventHandler
        
        Public Event FTAlarmTableRowDeleting As FTAlarmTableRowChangeEventHandler
        
        Public Event FTAlarmTableRowDeleted As FTAlarmTableRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFTAlarmTableRow(ByVal row As FTAlarmTableRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFTAlarmTableRow(ByVal AlarmNo As String, ByVal MachineType As String, ByVal AlarmType As String, ByVal AlarmMessage As String) As FTAlarmTableRow
            Dim rowFTAlarmTableRow As FTAlarmTableRow = CType(Me.NewRow,FTAlarmTableRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, AlarmNo, MachineType, AlarmType, AlarmMessage}
            rowFTAlarmTableRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFTAlarmTableRow)
            Return rowFTAlarmTableRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As Integer) As FTAlarmTableRow
            Return CType(Me.Rows.Find(New Object() {ID}),FTAlarmTableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FTAlarmTableDataTable = CType(MyBase.Clone,FTAlarmTableDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FTAlarmTableDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnAlarmNo = MyBase.Columns("AlarmNo")
            Me.columnMachineType = MyBase.Columns("MachineType")
            Me.columnAlarmType = MyBase.Columns("AlarmType")
            Me.columnAlarmMessage = MyBase.Columns("AlarmMessage")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnAlarmNo = New Global.System.Data.DataColumn("AlarmNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAlarmNo)
            Me.columnMachineType = New Global.System.Data.DataColumn("MachineType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMachineType)
            Me.columnAlarmType = New Global.System.Data.DataColumn("AlarmType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAlarmType)
            Me.columnAlarmMessage = New Global.System.Data.DataColumn("AlarmMessage", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAlarmMessage)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnAlarmNo.AllowDBNull = false
            Me.columnAlarmNo.MaxLength = 5
            Me.columnMachineType.AllowDBNull = false
            Me.columnMachineType.MaxLength = 10
            Me.columnAlarmType.AllowDBNull = false
            Me.columnAlarmType.MaxLength = 1
            Me.columnAlarmMessage.AllowDBNull = false
            Me.columnAlarmMessage.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFTAlarmTableRow() As FTAlarmTableRow
            Return CType(Me.NewRow,FTAlarmTableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FTAlarmTableRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FTAlarmTableRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FTAlarmTableRowChangedEvent) Is Nothing) Then
                RaiseEvent FTAlarmTableRowChanged(Me, New FTAlarmTableRowChangeEvent(CType(e.Row,FTAlarmTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FTAlarmTableRowChangingEvent) Is Nothing) Then
                RaiseEvent FTAlarmTableRowChanging(Me, New FTAlarmTableRowChangeEvent(CType(e.Row,FTAlarmTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FTAlarmTableRowDeletedEvent) Is Nothing) Then
                RaiseEvent FTAlarmTableRowDeleted(Me, New FTAlarmTableRowChangeEvent(CType(e.Row,FTAlarmTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FTAlarmTableRowDeletingEvent) Is Nothing) Then
                RaiseEvent FTAlarmTableRowDeleting(Me, New FTAlarmTableRowChangeEvent(CType(e.Row,FTAlarmTableRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFTAlarmTableRow(ByVal row As FTAlarmTableRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DBxDataSet = New DBxDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FTAlarmTableDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FTDataDataTable
        Inherits Global.System.Data.TypedTableBase(Of FTDataRow)
        
        Private columnMCNo As Global.System.Data.DataColumn
        
        Private columnLotNo As Global.System.Data.DataColumn
        
        Private columnLotStartTime As Global.System.Data.DataColumn
        
        Private columnMCType As Global.System.Data.DataColumn
        
        Private columnOPNo As Global.System.Data.DataColumn
        
        Private columnOPRate As Global.System.Data.DataColumn
        
        Private columnMaximumRPM As Global.System.Data.DataColumn
        
        Private columnAverageRPM As Global.System.Data.DataColumn
        
        Private columnMTBF As Global.System.Data.DataColumn
        
        Private columnMTTR As Global.System.Data.DataColumn
        
        Private columnAlarmTotal As Global.System.Data.DataColumn
        
        Private columnLotEndTime As Global.System.Data.DataColumn
        
        Private columnRunTime As Global.System.Data.DataColumn
        
        Private columnStopTime As Global.System.Data.DataColumn
        
        Private columnAlarmTime As Global.System.Data.DataColumn
        
        Private columnEndOPNo As Global.System.Data.DataColumn
        
        Private columnTestTemperature As Global.System.Data.DataColumn
        
        Private columnProgramName As Global.System.Data.DataColumn
        
        Private columnTestFlowName As Global.System.Data.DataColumn
        
        Private columnChannelATesterNo As Global.System.Data.DataColumn
        
        Private columnChannelBTesterNo As Global.System.Data.DataColumn
        
        Private columnBoxName As Global.System.Data.DataColumn
        
        Private columnChannelATestBoxNo As Global.System.Data.DataColumn
        
        Private columnChannelBTestBoxNo As Global.System.Data.DataColumn
        
        Private columnSocketCheck As Global.System.Data.DataColumn
        
        Private columnGoodSampleQty As Global.System.Data.DataColumn
        
        Private columnNGSampleQty As Global.System.Data.DataColumn
        
        Private columnLotJudgement As Global.System.Data.DataColumn
        
        Private columnRemark As Global.System.Data.DataColumn
        
        Private columnGLCheck As Global.System.Data.DataColumn
        
        Private columnTesterType As Global.System.Data.DataColumn
        
        Private columnLCL As Global.System.Data.DataColumn
        
        Private columnInitialYield As Global.System.Data.DataColumn
        
        Private columnFirstEndYield As Global.System.Data.DataColumn
        
        Private columnFinalYield As Global.System.Data.DataColumn
        
        Private columnMarkingInspection As Global.System.Data.DataColumn
        
        Private columnLotStartVisualInspectNGQty As Global.System.Data.DataColumn
        
        Private columnLotStartVisualInspectTotalQty As Global.System.Data.DataColumn
        
        Private columnLotEndVisualInspectNGQty As Global.System.Data.DataColumn
        
        Private columnLotEndVisualInspectTotalQty As Global.System.Data.DataColumn
        
        Private columnDuringProductionCheck As Global.System.Data.DataColumn
        
        Private columnFirstAutoAsiCheck As Global.System.Data.DataColumn
        
        Private columnSecondAutoAsiCheck As Global.System.Data.DataColumn
        
        Private columnSocketChange As Global.System.Data.DataColumn
        
        Private columnInputQty As Global.System.Data.DataColumn
        
        Private columnTotalGood As Global.System.Data.DataColumn
        
        Private columnTotalNG As Global.System.Data.DataColumn
        
        Private columnFirstMeka1Qty As Global.System.Data.DataColumn
        
        Private columnFirstMeka2Qty As Global.System.Data.DataColumn
        
        Private columnFirstNGQty As Global.System.Data.DataColumn
        
        Private columnFirstUnknowQty As Global.System.Data.DataColumn
        
        Private columnHandlerCounterQty As Global.System.Data.DataColumn
        
        Private columnSecondMeka1Qty As Global.System.Data.DataColumn
        
        Private columnSecondMeka4Qty As Global.System.Data.DataColumn
        
        Private columnSecondNGQty As Global.System.Data.DataColumn
        
        Private columnSecondUnknowQty As Global.System.Data.DataColumn
        
        Private columnTesterACounterQty As Global.System.Data.DataColumn
        
        Private columnTesterBCounterQty As Global.System.Data.DataColumn
        
        Private columnTotalMeka1Qty As Global.System.Data.DataColumn
        
        Private columnTotalMeka2Qty As Global.System.Data.DataColumn
        
        Private columnTotalMeka4Qty As Global.System.Data.DataColumn
        
        Private columnTotalUnknowQty As Global.System.Data.DataColumn
        
        Private columnFirstGoodBin1Qty As Global.System.Data.DataColumn
        
        Private columnFirstGoodBin2Qty As Global.System.Data.DataColumn
        
        Private columnSecondGoodBin1Qty As Global.System.Data.DataColumn
        
        Private columnSecondGoodBin2Qty As Global.System.Data.DataColumn
        
        Private columnTotalGoodBin1Qty As Global.System.Data.DataColumn
        
        Private columnTotalGoodBin2Qty As Global.System.Data.DataColumn
        
        Private columnTotalNGQty As Global.System.Data.DataColumn
        
        Private columnSocketNumCh1 As Global.System.Data.DataColumn
        
        Private columnSocketNumCh2 As Global.System.Data.DataColumn
        
        Private columnSocketNumCh3 As Global.System.Data.DataColumn
        
        Private columnSocketNumCh4 As Global.System.Data.DataColumn
        
        Private columnChangedSocketNumCh1 As Global.System.Data.DataColumn
        
        Private columnChangedSocketNumCh2 As Global.System.Data.DataColumn
        
        Private columnChangedSocketNumCh3 As Global.System.Data.DataColumn
        
        Private columnChangedSocketNumCh4 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FTData"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MCNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMCNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LotNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLotNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LotStartTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLotStartTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MCTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMCType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaximumRPMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaximumRPM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AverageRPMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAverageRPM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MTBFColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMTBF
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MTTRColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMTTR
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AlarmTotalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAlarmTotal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LotEndTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLotEndTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RunTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRunTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StopTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStopTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AlarmTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAlarmTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EndOPNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEndOPNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TestTemperatureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTestTemperature
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProgramNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProgramName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TestFlowNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTestFlowName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ChannelATesterNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnChannelATesterNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ChannelBTesterNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnChannelBTesterNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BoxNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBoxName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ChannelATestBoxNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnChannelATestBoxNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ChannelBTestBoxNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnChannelBTestBoxNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SocketCheckColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSocketCheck
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GoodSampleQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGoodSampleQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NGSampleQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNGSampleQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LotJudgementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLotJudgement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RemarkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRemark
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GLCheckColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGLCheck
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TesterTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTesterType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LCLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLCL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InitialYieldColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInitialYield
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstEndYieldColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstEndYield
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FinalYieldColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinalYield
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarkingInspectionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarkingInspection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LotStartVisualInspectNGQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLotStartVisualInspectNGQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LotStartVisualInspectTotalQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLotStartVisualInspectTotalQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LotEndVisualInspectNGQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLotEndVisualInspectNGQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LotEndVisualInspectTotalQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLotEndVisualInspectTotalQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DuringProductionCheckColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDuringProductionCheck
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstAutoAsiCheckColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstAutoAsiCheck
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SecondAutoAsiCheckColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSecondAutoAsiCheck
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SocketChangeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSocketChange
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InputQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInputQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalGoodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalGood
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalNGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalNG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstMeka1QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstMeka1Qty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstMeka2QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstMeka2Qty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNGQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstNGQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstUnknowQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstUnknowQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HandlerCounterQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHandlerCounterQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SecondMeka1QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSecondMeka1Qty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SecondMeka4QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSecondMeka4Qty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SecondNGQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSecondNGQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SecondUnknowQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSecondUnknowQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TesterACounterQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTesterACounterQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TesterBCounterQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTesterBCounterQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalMeka1QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalMeka1Qty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalMeka2QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalMeka2Qty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalMeka4QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalMeka4Qty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalUnknowQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalUnknowQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstGoodBin1QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstGoodBin1Qty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstGoodBin2QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstGoodBin2Qty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SecondGoodBin1QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSecondGoodBin1Qty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SecondGoodBin2QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSecondGoodBin2Qty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalGoodBin1QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalGoodBin1Qty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalGoodBin2QtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalGoodBin2Qty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalNGQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalNGQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SocketNumCh1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSocketNumCh1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SocketNumCh2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSocketNumCh2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SocketNumCh3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSocketNumCh3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SocketNumCh4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnSocketNumCh4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ChangedSocketNumCh1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnChangedSocketNumCh1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ChangedSocketNumCh2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnChangedSocketNumCh2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ChangedSocketNumCh3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnChangedSocketNumCh3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ChangedSocketNumCh4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnChangedSocketNumCh4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FTDataRow
            Get
                Return CType(Me.Rows(index),FTDataRow)
            End Get
        End Property
        
        Public Event FTDataRowChanging As FTDataRowChangeEventHandler
        
        Public Event FTDataRowChanged As FTDataRowChangeEventHandler
        
        Public Event FTDataRowDeleting As FTDataRowChangeEventHandler
        
        Public Event FTDataRowDeleted As FTDataRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFTDataRow(ByVal row As FTDataRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFTDataRow( _
                    ByVal MCNo As String,  _
                    ByVal parentTransactionDataRowByFK_FTData_TransactionData As TransactionDataRow,  _
                    ByVal LotStartTime As Date,  _
                    ByVal MCType As String,  _
                    ByVal OPNo As String,  _
                    ByVal OPRate As Single,  _
                    ByVal MaximumRPM As Single,  _
                    ByVal AverageRPM As Single,  _
                    ByVal MTBF As Single,  _
                    ByVal MTTR As Single,  _
                    ByVal AlarmTotal As Short,  _
                    ByVal LotEndTime As Date,  _
                    ByVal RunTime As Single,  _
                    ByVal StopTime As Single,  _
                    ByVal AlarmTime As Single,  _
                    ByVal EndOPNo As String,  _
                    ByVal TestTemperature As String,  _
                    ByVal ProgramName As String,  _
                    ByVal TestFlowName As String,  _
                    ByVal ChannelATesterNo As String,  _
                    ByVal ChannelBTesterNo As String,  _
                    ByVal BoxName As String,  _
                    ByVal ChannelATestBoxNo As String,  _
                    ByVal ChannelBTestBoxNo As String,  _
                    ByVal SocketCheck As String,  _
                    ByVal GoodSampleQty As Short,  _
                    ByVal NGSampleQty As Short,  _
                    ByVal LotJudgement As String,  _
                    ByVal Remark As String,  _
                    ByVal GLCheck As String,  _
                    ByVal TesterType As String,  _
                    ByVal LCL As Single,  _
                    ByVal InitialYield As Single,  _
                    ByVal FirstEndYield As Single,  _
                    ByVal FinalYield As Single,  _
                    ByVal MarkingInspection As Boolean,  _
                    ByVal LotStartVisualInspectNGQty As Short,  _
                    ByVal LotStartVisualInspectTotalQty As Short,  _
                    ByVal LotEndVisualInspectNGQty As Short,  _
                    ByVal LotEndVisualInspectTotalQty As Short,  _
                    ByVal DuringProductionCheck As String,  _
                    ByVal FirstAutoAsiCheck As Boolean,  _
                    ByVal SecondAutoAsiCheck As Boolean,  _
                    ByVal SocketChange As Boolean,  _
                    ByVal InputQty As Integer,  _
                    ByVal TotalGood As Integer,  _
                    ByVal TotalNG As Integer,  _
                    ByVal FirstMeka1Qty As Integer,  _
                    ByVal FirstMeka2Qty As Integer,  _
                    ByVal FirstNGQty As Integer,  _
                    ByVal FirstUnknowQty As Integer,  _
                    ByVal HandlerCounterQty As Integer,  _
                    ByVal SecondMeka1Qty As Integer,  _
                    ByVal SecondMeka4Qty As Integer,  _
                    ByVal SecondNGQty As Integer,  _
                    ByVal SecondUnknowQty As Integer,  _
                    ByVal TesterACounterQty As Integer,  _
                    ByVal TesterBCounterQty As Integer,  _
                    ByVal TotalMeka1Qty As Integer,  _
                    ByVal TotalMeka2Qty As Integer,  _
                    ByVal TotalMeka4Qty As Integer,  _
                    ByVal TotalUnknowQty As Integer,  _
                    ByVal FirstGoodBin1Qty As Integer,  _
                    ByVal FirstGoodBin2Qty As Integer,  _
                    ByVal SecondGoodBin1Qty As Integer,  _
                    ByVal SecondGoodBin2Qty As Integer,  _
                    ByVal TotalGoodBin1Qty As Integer,  _
                    ByVal TotalGoodBin2Qty As Integer,  _
                    ByVal TotalNGQty As Integer,  _
                    ByVal SocketNumCh1 As String,  _
                    ByVal SocketNumCh2 As String,  _
                    ByVal SocketNumCh3 As String,  _
                    ByVal SocketNumCh4 As String,  _
                    ByVal ChangedSocketNumCh1 As String,  _
                    ByVal ChangedSocketNumCh2 As String,  _
                    ByVal ChangedSocketNumCh3 As String,  _
                    ByVal ChangedSocketNumCh4 As String) As FTDataRow
            Dim rowFTDataRow As FTDataRow = CType(Me.NewRow,FTDataRow)
            Dim columnValuesArray() As Object = New Object() {MCNo, Nothing, LotStartTime, MCType, OPNo, OPRate, MaximumRPM, AverageRPM, MTBF, MTTR, AlarmTotal, LotEndTime, RunTime, StopTime, AlarmTime, EndOPNo, TestTemperature, ProgramName, TestFlowName, ChannelATesterNo, ChannelBTesterNo, BoxName, ChannelATestBoxNo, ChannelBTestBoxNo, SocketCheck, GoodSampleQty, NGSampleQty, LotJudgement, Remark, GLCheck, TesterType, LCL, InitialYield, FirstEndYield, FinalYield, MarkingInspection, LotStartVisualInspectNGQty, LotStartVisualInspectTotalQty, LotEndVisualInspectNGQty, LotEndVisualInspectTotalQty, DuringProductionCheck, FirstAutoAsiCheck, SecondAutoAsiCheck, SocketChange, InputQty, TotalGood, TotalNG, FirstMeka1Qty, FirstMeka2Qty, FirstNGQty, FirstUnknowQty, HandlerCounterQty, SecondMeka1Qty, SecondMeka4Qty, SecondNGQty, SecondUnknowQty, TesterACounterQty, TesterBCounterQty, TotalMeka1Qty, TotalMeka2Qty, TotalMeka4Qty, TotalUnknowQty, FirstGoodBin1Qty, FirstGoodBin2Qty, SecondGoodBin1Qty, SecondGoodBin2Qty, TotalGoodBin1Qty, TotalGoodBin2Qty, TotalNGQty, SocketNumCh1, SocketNumCh2, SocketNumCh3, SocketNumCh4, ChangedSocketNumCh1, ChangedSocketNumCh2, ChangedSocketNumCh3, ChangedSocketNumCh4}
            If (Not (parentTransactionDataRowByFK_FTData_TransactionData) Is Nothing) Then
                columnValuesArray(1) = parentTransactionDataRowByFK_FTData_TransactionData(0)
            End If
            rowFTDataRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFTDataRow)
            Return rowFTDataRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMCNoLotNoLotStartTime(ByVal MCNo As String, ByVal LotNo As String, ByVal LotStartTime As Date) As FTDataRow
            Return CType(Me.Rows.Find(New Object() {MCNo, LotNo, LotStartTime}),FTDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FTDataDataTable = CType(MyBase.Clone,FTDataDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FTDataDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMCNo = MyBase.Columns("MCNo")
            Me.columnLotNo = MyBase.Columns("LotNo")
            Me.columnLotStartTime = MyBase.Columns("LotStartTime")
            Me.columnMCType = MyBase.Columns("MCType")
            Me.columnOPNo = MyBase.Columns("OPNo")
            Me.columnOPRate = MyBase.Columns("OPRate")
            Me.columnMaximumRPM = MyBase.Columns("MaximumRPM")
            Me.columnAverageRPM = MyBase.Columns("AverageRPM")
            Me.columnMTBF = MyBase.Columns("MTBF")
            Me.columnMTTR = MyBase.Columns("MTTR")
            Me.columnAlarmTotal = MyBase.Columns("AlarmTotal")
            Me.columnLotEndTime = MyBase.Columns("LotEndTime")
            Me.columnRunTime = MyBase.Columns("RunTime")
            Me.columnStopTime = MyBase.Columns("StopTime")
            Me.columnAlarmTime = MyBase.Columns("AlarmTime")
            Me.columnEndOPNo = MyBase.Columns("EndOPNo")
            Me.columnTestTemperature = MyBase.Columns("TestTemperature")
            Me.columnProgramName = MyBase.Columns("ProgramName")
            Me.columnTestFlowName = MyBase.Columns("TestFlowName")
            Me.columnChannelATesterNo = MyBase.Columns("ChannelATesterNo")
            Me.columnChannelBTesterNo = MyBase.Columns("ChannelBTesterNo")
            Me.columnBoxName = MyBase.Columns("BoxName")
            Me.columnChannelATestBoxNo = MyBase.Columns("ChannelATestBoxNo")
            Me.columnChannelBTestBoxNo = MyBase.Columns("ChannelBTestBoxNo")
            Me.columnSocketCheck = MyBase.Columns("SocketCheck")
            Me.columnGoodSampleQty = MyBase.Columns("GoodSampleQty")
            Me.columnNGSampleQty = MyBase.Columns("NGSampleQty")
            Me.columnLotJudgement = MyBase.Columns("LotJudgement")
            Me.columnRemark = MyBase.Columns("Remark")
            Me.columnGLCheck = MyBase.Columns("GLCheck")
            Me.columnTesterType = MyBase.Columns("TesterType")
            Me.columnLCL = MyBase.Columns("LCL")
            Me.columnInitialYield = MyBase.Columns("InitialYield")
            Me.columnFirstEndYield = MyBase.Columns("FirstEndYield")
            Me.columnFinalYield = MyBase.Columns("FinalYield")
            Me.columnMarkingInspection = MyBase.Columns("MarkingInspection")
            Me.columnLotStartVisualInspectNGQty = MyBase.Columns("LotStartVisualInspectNGQty")
            Me.columnLotStartVisualInspectTotalQty = MyBase.Columns("LotStartVisualInspectTotalQty")
            Me.columnLotEndVisualInspectNGQty = MyBase.Columns("LotEndVisualInspectNGQty")
            Me.columnLotEndVisualInspectTotalQty = MyBase.Columns("LotEndVisualInspectTotalQty")
            Me.columnDuringProductionCheck = MyBase.Columns("DuringProductionCheck")
            Me.columnFirstAutoAsiCheck = MyBase.Columns("FirstAutoAsiCheck")
            Me.columnSecondAutoAsiCheck = MyBase.Columns("SecondAutoAsiCheck")
            Me.columnSocketChange = MyBase.Columns("SocketChange")
            Me.columnInputQty = MyBase.Columns("InputQty")
            Me.columnTotalGood = MyBase.Columns("TotalGood")
            Me.columnTotalNG = MyBase.Columns("TotalNG")
            Me.columnFirstMeka1Qty = MyBase.Columns("FirstMeka1Qty")
            Me.columnFirstMeka2Qty = MyBase.Columns("FirstMeka2Qty")
            Me.columnFirstNGQty = MyBase.Columns("FirstNGQty")
            Me.columnFirstUnknowQty = MyBase.Columns("FirstUnknowQty")
            Me.columnHandlerCounterQty = MyBase.Columns("HandlerCounterQty")
            Me.columnSecondMeka1Qty = MyBase.Columns("SecondMeka1Qty")
            Me.columnSecondMeka4Qty = MyBase.Columns("SecondMeka4Qty")
            Me.columnSecondNGQty = MyBase.Columns("SecondNGQty")
            Me.columnSecondUnknowQty = MyBase.Columns("SecondUnknowQty")
            Me.columnTesterACounterQty = MyBase.Columns("TesterACounterQty")
            Me.columnTesterBCounterQty = MyBase.Columns("TesterBCounterQty")
            Me.columnTotalMeka1Qty = MyBase.Columns("TotalMeka1Qty")
            Me.columnTotalMeka2Qty = MyBase.Columns("TotalMeka2Qty")
            Me.columnTotalMeka4Qty = MyBase.Columns("TotalMeka4Qty")
            Me.columnTotalUnknowQty = MyBase.Columns("TotalUnknowQty")
            Me.columnFirstGoodBin1Qty = MyBase.Columns("FirstGoodBin1Qty")
            Me.columnFirstGoodBin2Qty = MyBase.Columns("FirstGoodBin2Qty")
            Me.columnSecondGoodBin1Qty = MyBase.Columns("SecondGoodBin1Qty")
            Me.columnSecondGoodBin2Qty = MyBase.Columns("SecondGoodBin2Qty")
            Me.columnTotalGoodBin1Qty = MyBase.Columns("TotalGoodBin1Qty")
            Me.columnTotalGoodBin2Qty = MyBase.Columns("TotalGoodBin2Qty")
            Me.columnTotalNGQty = MyBase.Columns("TotalNGQty")
            Me.columnSocketNumCh1 = MyBase.Columns("SocketNumCh1")
            Me.columnSocketNumCh2 = MyBase.Columns("SocketNumCh2")
            Me.columnSocketNumCh3 = MyBase.Columns("SocketNumCh3")
            Me.columnSocketNumCh4 = MyBase.Columns("SocketNumCh4")
            Me.columnChangedSocketNumCh1 = MyBase.Columns("ChangedSocketNumCh1")
            Me.columnChangedSocketNumCh2 = MyBase.Columns("ChangedSocketNumCh2")
            Me.columnChangedSocketNumCh3 = MyBase.Columns("ChangedSocketNumCh3")
            Me.columnChangedSocketNumCh4 = MyBase.Columns("ChangedSocketNumCh4")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMCNo = New Global.System.Data.DataColumn("MCNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMCNo)
            Me.columnLotNo = New Global.System.Data.DataColumn("LotNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLotNo)
            Me.columnLotStartTime = New Global.System.Data.DataColumn("LotStartTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLotStartTime)
            Me.columnMCType = New Global.System.Data.DataColumn("MCType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMCType)
            Me.columnOPNo = New Global.System.Data.DataColumn("OPNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPNo)
            Me.columnOPRate = New Global.System.Data.DataColumn("OPRate", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPRate)
            Me.columnMaximumRPM = New Global.System.Data.DataColumn("MaximumRPM", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaximumRPM)
            Me.columnAverageRPM = New Global.System.Data.DataColumn("AverageRPM", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAverageRPM)
            Me.columnMTBF = New Global.System.Data.DataColumn("MTBF", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMTBF)
            Me.columnMTTR = New Global.System.Data.DataColumn("MTTR", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMTTR)
            Me.columnAlarmTotal = New Global.System.Data.DataColumn("AlarmTotal", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAlarmTotal)
            Me.columnLotEndTime = New Global.System.Data.DataColumn("LotEndTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLotEndTime)
            Me.columnRunTime = New Global.System.Data.DataColumn("RunTime", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRunTime)
            Me.columnStopTime = New Global.System.Data.DataColumn("StopTime", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStopTime)
            Me.columnAlarmTime = New Global.System.Data.DataColumn("AlarmTime", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAlarmTime)
            Me.columnEndOPNo = New Global.System.Data.DataColumn("EndOPNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEndOPNo)
            Me.columnTestTemperature = New Global.System.Data.DataColumn("TestTemperature", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTestTemperature)
            Me.columnProgramName = New Global.System.Data.DataColumn("ProgramName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProgramName)
            Me.columnTestFlowName = New Global.System.Data.DataColumn("TestFlowName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTestFlowName)
            Me.columnChannelATesterNo = New Global.System.Data.DataColumn("ChannelATesterNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnChannelATesterNo)
            Me.columnChannelBTesterNo = New Global.System.Data.DataColumn("ChannelBTesterNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnChannelBTesterNo)
            Me.columnBoxName = New Global.System.Data.DataColumn("BoxName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBoxName)
            Me.columnChannelATestBoxNo = New Global.System.Data.DataColumn("ChannelATestBoxNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnChannelATestBoxNo)
            Me.columnChannelBTestBoxNo = New Global.System.Data.DataColumn("ChannelBTestBoxNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnChannelBTestBoxNo)
            Me.columnSocketCheck = New Global.System.Data.DataColumn("SocketCheck", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSocketCheck)
            Me.columnGoodSampleQty = New Global.System.Data.DataColumn("GoodSampleQty", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGoodSampleQty)
            Me.columnNGSampleQty = New Global.System.Data.DataColumn("NGSampleQty", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNGSampleQty)
            Me.columnLotJudgement = New Global.System.Data.DataColumn("LotJudgement", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLotJudgement)
            Me.columnRemark = New Global.System.Data.DataColumn("Remark", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRemark)
            Me.columnGLCheck = New Global.System.Data.DataColumn("GLCheck", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGLCheck)
            Me.columnTesterType = New Global.System.Data.DataColumn("TesterType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTesterType)
            Me.columnLCL = New Global.System.Data.DataColumn("LCL", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLCL)
            Me.columnInitialYield = New Global.System.Data.DataColumn("InitialYield", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInitialYield)
            Me.columnFirstEndYield = New Global.System.Data.DataColumn("FirstEndYield", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstEndYield)
            Me.columnFinalYield = New Global.System.Data.DataColumn("FinalYield", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinalYield)
            Me.columnMarkingInspection = New Global.System.Data.DataColumn("MarkingInspection", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarkingInspection)
            Me.columnLotStartVisualInspectNGQty = New Global.System.Data.DataColumn("LotStartVisualInspectNGQty", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLotStartVisualInspectNGQty)
            Me.columnLotStartVisualInspectTotalQty = New Global.System.Data.DataColumn("LotStartVisualInspectTotalQty", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLotStartVisualInspectTotalQty)
            Me.columnLotEndVisualInspectNGQty = New Global.System.Data.DataColumn("LotEndVisualInspectNGQty", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLotEndVisualInspectNGQty)
            Me.columnLotEndVisualInspectTotalQty = New Global.System.Data.DataColumn("LotEndVisualInspectTotalQty", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLotEndVisualInspectTotalQty)
            Me.columnDuringProductionCheck = New Global.System.Data.DataColumn("DuringProductionCheck", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDuringProductionCheck)
            Me.columnFirstAutoAsiCheck = New Global.System.Data.DataColumn("FirstAutoAsiCheck", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstAutoAsiCheck)
            Me.columnSecondAutoAsiCheck = New Global.System.Data.DataColumn("SecondAutoAsiCheck", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSecondAutoAsiCheck)
            Me.columnSocketChange = New Global.System.Data.DataColumn("SocketChange", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSocketChange)
            Me.columnInputQty = New Global.System.Data.DataColumn("InputQty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInputQty)
            Me.columnTotalGood = New Global.System.Data.DataColumn("TotalGood", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalGood)
            Me.columnTotalNG = New Global.System.Data.DataColumn("TotalNG", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalNG)
            Me.columnFirstMeka1Qty = New Global.System.Data.DataColumn("FirstMeka1Qty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstMeka1Qty)
            Me.columnFirstMeka2Qty = New Global.System.Data.DataColumn("FirstMeka2Qty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstMeka2Qty)
            Me.columnFirstNGQty = New Global.System.Data.DataColumn("FirstNGQty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstNGQty)
            Me.columnFirstUnknowQty = New Global.System.Data.DataColumn("FirstUnknowQty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstUnknowQty)
            Me.columnHandlerCounterQty = New Global.System.Data.DataColumn("HandlerCounterQty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHandlerCounterQty)
            Me.columnSecondMeka1Qty = New Global.System.Data.DataColumn("SecondMeka1Qty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSecondMeka1Qty)
            Me.columnSecondMeka4Qty = New Global.System.Data.DataColumn("SecondMeka4Qty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSecondMeka4Qty)
            Me.columnSecondNGQty = New Global.System.Data.DataColumn("SecondNGQty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSecondNGQty)
            Me.columnSecondUnknowQty = New Global.System.Data.DataColumn("SecondUnknowQty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSecondUnknowQty)
            Me.columnTesterACounterQty = New Global.System.Data.DataColumn("TesterACounterQty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTesterACounterQty)
            Me.columnTesterBCounterQty = New Global.System.Data.DataColumn("TesterBCounterQty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTesterBCounterQty)
            Me.columnTotalMeka1Qty = New Global.System.Data.DataColumn("TotalMeka1Qty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalMeka1Qty)
            Me.columnTotalMeka2Qty = New Global.System.Data.DataColumn("TotalMeka2Qty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalMeka2Qty)
            Me.columnTotalMeka4Qty = New Global.System.Data.DataColumn("TotalMeka4Qty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalMeka4Qty)
            Me.columnTotalUnknowQty = New Global.System.Data.DataColumn("TotalUnknowQty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalUnknowQty)
            Me.columnFirstGoodBin1Qty = New Global.System.Data.DataColumn("FirstGoodBin1Qty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstGoodBin1Qty)
            Me.columnFirstGoodBin2Qty = New Global.System.Data.DataColumn("FirstGoodBin2Qty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstGoodBin2Qty)
            Me.columnSecondGoodBin1Qty = New Global.System.Data.DataColumn("SecondGoodBin1Qty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSecondGoodBin1Qty)
            Me.columnSecondGoodBin2Qty = New Global.System.Data.DataColumn("SecondGoodBin2Qty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSecondGoodBin2Qty)
            Me.columnTotalGoodBin1Qty = New Global.System.Data.DataColumn("TotalGoodBin1Qty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalGoodBin1Qty)
            Me.columnTotalGoodBin2Qty = New Global.System.Data.DataColumn("TotalGoodBin2Qty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalGoodBin2Qty)
            Me.columnTotalNGQty = New Global.System.Data.DataColumn("TotalNGQty", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalNGQty)
            Me.columnSocketNumCh1 = New Global.System.Data.DataColumn("SocketNumCh1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSocketNumCh1)
            Me.columnSocketNumCh2 = New Global.System.Data.DataColumn("SocketNumCh2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSocketNumCh2)
            Me.columnSocketNumCh3 = New Global.System.Data.DataColumn("SocketNumCh3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSocketNumCh3)
            Me.columnSocketNumCh4 = New Global.System.Data.DataColumn("SocketNumCh4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSocketNumCh4)
            Me.columnChangedSocketNumCh1 = New Global.System.Data.DataColumn("ChangedSocketNumCh1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnChangedSocketNumCh1)
            Me.columnChangedSocketNumCh2 = New Global.System.Data.DataColumn("ChangedSocketNumCh2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnChangedSocketNumCh2)
            Me.columnChangedSocketNumCh3 = New Global.System.Data.DataColumn("ChangedSocketNumCh3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnChangedSocketNumCh3)
            Me.columnChangedSocketNumCh4 = New Global.System.Data.DataColumn("ChangedSocketNumCh4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnChangedSocketNumCh4)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMCNo, Me.columnLotNo, Me.columnLotStartTime}, true))
            Me.columnMCNo.AllowDBNull = false
            Me.columnMCNo.MaxLength = 10
            Me.columnLotNo.AllowDBNull = false
            Me.columnLotNo.MaxLength = 10
            Me.columnLotStartTime.AllowDBNull = false
            Me.columnMCType.MaxLength = 10
            Me.columnOPNo.MaxLength = 8
            Me.columnEndOPNo.MaxLength = 8
            Me.columnTestTemperature.MaxLength = 4
            Me.columnProgramName.MaxLength = 20
            Me.columnTestFlowName.MaxLength = 20
            Me.columnChannelATesterNo.MaxLength = 30
            Me.columnChannelBTesterNo.MaxLength = 30
            Me.columnBoxName.MaxLength = 50
            Me.columnChannelATestBoxNo.MaxLength = 8
            Me.columnChannelBTestBoxNo.MaxLength = 8
            Me.columnSocketCheck.MaxLength = 1
            Me.columnLotJudgement.MaxLength = 20
            Me.columnRemark.MaxLength = 50
            Me.columnGLCheck.MaxLength = 8
            Me.columnTesterType.MaxLength = 50
            Me.columnDuringProductionCheck.MaxLength = 1
            Me.columnSocketNumCh1.MaxLength = 50
            Me.columnSocketNumCh2.MaxLength = 50
            Me.columnSocketNumCh3.MaxLength = 50
            Me.columnSocketNumCh4.MaxLength = 50
            Me.columnChangedSocketNumCh1.MaxLength = 50
            Me.columnChangedSocketNumCh2.MaxLength = 50
            Me.columnChangedSocketNumCh3.MaxLength = 50
            Me.columnChangedSocketNumCh4.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFTDataRow() As FTDataRow
            Return CType(Me.NewRow,FTDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FTDataRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FTDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FTDataRowChangedEvent) Is Nothing) Then
                RaiseEvent FTDataRowChanged(Me, New FTDataRowChangeEvent(CType(e.Row,FTDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FTDataRowChangingEvent) Is Nothing) Then
                RaiseEvent FTDataRowChanging(Me, New FTDataRowChangeEvent(CType(e.Row,FTDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FTDataRowDeletedEvent) Is Nothing) Then
                RaiseEvent FTDataRowDeleted(Me, New FTDataRowChangeEvent(CType(e.Row,FTDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FTDataRowDeletingEvent) Is Nothing) Then
                RaiseEvent FTDataRowDeleting(Me, New FTDataRowChangeEvent(CType(e.Row,FTDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFTDataRow(ByVal row As FTDataRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DBxDataSet = New DBxDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FTDataDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FTMachineSettingDataTable
        Inherits Global.System.Data.TypedTableBase(Of FTMachineSettingRow)
        
        Private columnMCNo As Global.System.Data.DataColumn
        
        Private columnMachineType As Global.System.Data.DataColumn
        
        Private columnPDMachineType As Global.System.Data.DataColumn
        
        Private columnRPMSetting As Global.System.Data.DataColumn
        
        Private columnOPRateSetting As Global.System.Data.DataColumn
        
        Private columnMTTRSetting As Global.System.Data.DataColumn
        
        Private columnMTBFSetting As Global.System.Data.DataColumn
        
        Private columnMoxaIP As Global.System.Data.DataColumn
        
        Private columnSelfConIP As Global.System.Data.DataColumn
        
        Private columnPositionX As Global.System.Data.DataColumn
        
        Private columnPositionY As Global.System.Data.DataColumn
        
        Private columnUseAutoMode As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FTMachineSetting"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MCNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMCNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MachineTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMachineType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PDMachineTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPDMachineType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RPMSettingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPMSetting
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OPRateSettingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOPRateSetting
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MTTRSettingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMTTRSetting
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MTBFSettingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMTBFSetting
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MoxaIPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMoxaIP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SelfConIPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSelfConIP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PositionXColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPositionX
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PositionYColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPositionY
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UseAutoModeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUseAutoMode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FTMachineSettingRow
            Get
                Return CType(Me.Rows(index),FTMachineSettingRow)
            End Get
        End Property
        
        Public Event FTMachineSettingRowChanging As FTMachineSettingRowChangeEventHandler
        
        Public Event FTMachineSettingRowChanged As FTMachineSettingRowChangeEventHandler
        
        Public Event FTMachineSettingRowDeleting As FTMachineSettingRowChangeEventHandler
        
        Public Event FTMachineSettingRowDeleted As FTMachineSettingRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFTMachineSettingRow(ByVal row As FTMachineSettingRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFTMachineSettingRow(ByVal MCNo As String, ByVal MachineType As String, ByVal PDMachineType As String, ByVal RPMSetting As Single, ByVal OPRateSetting As Single, ByVal MTTRSetting As Single, ByVal MTBFSetting As Single, ByVal MoxaIP As String, ByVal SelfConIP As String, ByVal PositionX As Integer, ByVal PositionY As Integer, ByVal UseAutoMode As Boolean) As FTMachineSettingRow
            Dim rowFTMachineSettingRow As FTMachineSettingRow = CType(Me.NewRow,FTMachineSettingRow)
            Dim columnValuesArray() As Object = New Object() {MCNo, MachineType, PDMachineType, RPMSetting, OPRateSetting, MTTRSetting, MTBFSetting, MoxaIP, SelfConIP, PositionX, PositionY, UseAutoMode}
            rowFTMachineSettingRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFTMachineSettingRow)
            Return rowFTMachineSettingRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMCNo(ByVal MCNo As String) As FTMachineSettingRow
            Return CType(Me.Rows.Find(New Object() {MCNo}),FTMachineSettingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FTMachineSettingDataTable = CType(MyBase.Clone,FTMachineSettingDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FTMachineSettingDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMCNo = MyBase.Columns("MCNo")
            Me.columnMachineType = MyBase.Columns("MachineType")
            Me.columnPDMachineType = MyBase.Columns("PDMachineType")
            Me.columnRPMSetting = MyBase.Columns("RPMSetting")
            Me.columnOPRateSetting = MyBase.Columns("OPRateSetting")
            Me.columnMTTRSetting = MyBase.Columns("MTTRSetting")
            Me.columnMTBFSetting = MyBase.Columns("MTBFSetting")
            Me.columnMoxaIP = MyBase.Columns("MoxaIP")
            Me.columnSelfConIP = MyBase.Columns("SelfConIP")
            Me.columnPositionX = MyBase.Columns("PositionX")
            Me.columnPositionY = MyBase.Columns("PositionY")
            Me.columnUseAutoMode = MyBase.Columns("UseAutoMode")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMCNo = New Global.System.Data.DataColumn("MCNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMCNo)
            Me.columnMachineType = New Global.System.Data.DataColumn("MachineType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMachineType)
            Me.columnPDMachineType = New Global.System.Data.DataColumn("PDMachineType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPDMachineType)
            Me.columnRPMSetting = New Global.System.Data.DataColumn("RPMSetting", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPMSetting)
            Me.columnOPRateSetting = New Global.System.Data.DataColumn("OPRateSetting", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOPRateSetting)
            Me.columnMTTRSetting = New Global.System.Data.DataColumn("MTTRSetting", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMTTRSetting)
            Me.columnMTBFSetting = New Global.System.Data.DataColumn("MTBFSetting", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMTBFSetting)
            Me.columnMoxaIP = New Global.System.Data.DataColumn("MoxaIP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMoxaIP)
            Me.columnSelfConIP = New Global.System.Data.DataColumn("SelfConIP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSelfConIP)
            Me.columnPositionX = New Global.System.Data.DataColumn("PositionX", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPositionX)
            Me.columnPositionY = New Global.System.Data.DataColumn("PositionY", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPositionY)
            Me.columnUseAutoMode = New Global.System.Data.DataColumn("UseAutoMode", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUseAutoMode)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMCNo}, true))
            Me.columnMCNo.AllowDBNull = false
            Me.columnMCNo.Unique = true
            Me.columnMCNo.MaxLength = 10
            Me.columnMachineType.AllowDBNull = false
            Me.columnMachineType.MaxLength = 10
            Me.columnPDMachineType.MaxLength = 10
            Me.columnMoxaIP.MaxLength = 15
            Me.columnSelfConIP.MaxLength = 15
            Me.columnPositionX.AllowDBNull = false
            Me.columnPositionY.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFTMachineSettingRow() As FTMachineSettingRow
            Return CType(Me.NewRow,FTMachineSettingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FTMachineSettingRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FTMachineSettingRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FTMachineSettingRowChangedEvent) Is Nothing) Then
                RaiseEvent FTMachineSettingRowChanged(Me, New FTMachineSettingRowChangeEvent(CType(e.Row,FTMachineSettingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FTMachineSettingRowChangingEvent) Is Nothing) Then
                RaiseEvent FTMachineSettingRowChanging(Me, New FTMachineSettingRowChangeEvent(CType(e.Row,FTMachineSettingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FTMachineSettingRowDeletedEvent) Is Nothing) Then
                RaiseEvent FTMachineSettingRowDeleted(Me, New FTMachineSettingRowChangeEvent(CType(e.Row,FTMachineSettingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FTMachineSettingRowDeletingEvent) Is Nothing) Then
                RaiseEvent FTMachineSettingRowDeleting(Me, New FTMachineSettingRowChangeEvent(CType(e.Row,FTMachineSettingRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFTMachineSettingRow(ByVal row As FTMachineSettingRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DBxDataSet = New DBxDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FTMachineSettingDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MyUserDataTable
        Inherits Global.System.Data.TypedTableBase(Of MyUserRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnPassword As Global.System.Data.DataColumn
        
        Private columnFirstName As Global.System.Data.DataColumn
        
        Private columnLastName As Global.System.Data.DataColumn
        
        Private columnOrganize As Global.System.Data.DataColumn
        
        Private columnImageUrl As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MyUser"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PasswordColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPassword
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FirstNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OrganizeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOrganize
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImageUrlColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImageUrl
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MyUserRow
            Get
                Return CType(Me.Rows(index),MyUserRow)
            End Get
        End Property
        
        Public Event MyUserRowChanging As MyUserRowChangeEventHandler
        
        Public Event MyUserRowChanged As MyUserRowChangeEventHandler
        
        Public Event MyUserRowDeleting As MyUserRowChangeEventHandler
        
        Public Event MyUserRowDeleted As MyUserRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMyUserRow(ByVal row As MyUserRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMyUserRow(ByVal ID As String, ByVal Password As String, ByVal FirstName As String, ByVal LastName As String, ByVal Organize As String, ByVal ImageUrl As String) As MyUserRow
            Dim rowMyUserRow As MyUserRow = CType(Me.NewRow,MyUserRow)
            Dim columnValuesArray() As Object = New Object() {ID, Password, FirstName, LastName, Organize, ImageUrl}
            rowMyUserRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMyUserRow)
            Return rowMyUserRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As String) As MyUserRow
            Return CType(Me.Rows.Find(New Object() {ID}),MyUserRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MyUserDataTable = CType(MyBase.Clone,MyUserDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MyUserDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnPassword = MyBase.Columns("Password")
            Me.columnFirstName = MyBase.Columns("FirstName")
            Me.columnLastName = MyBase.Columns("LastName")
            Me.columnOrganize = MyBase.Columns("Organize")
            Me.columnImageUrl = MyBase.Columns("ImageUrl")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnPassword = New Global.System.Data.DataColumn("Password", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPassword)
            Me.columnFirstName = New Global.System.Data.DataColumn("FirstName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFirstName)
            Me.columnLastName = New Global.System.Data.DataColumn("LastName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastName)
            Me.columnOrganize = New Global.System.Data.DataColumn("Organize", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrganize)
            Me.columnImageUrl = New Global.System.Data.DataColumn("ImageUrl", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImageUrl)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnID.MaxLength = 6
            Me.columnPassword.MaxLength = 50
            Me.columnFirstName.MaxLength = 50
            Me.columnLastName.MaxLength = 50
            Me.columnOrganize.MaxLength = 50
            Me.columnImageUrl.MaxLength = 512
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMyUserRow() As MyUserRow
            Return CType(Me.NewRow,MyUserRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MyUserRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MyUserRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MyUserRowChangedEvent) Is Nothing) Then
                RaiseEvent MyUserRowChanged(Me, New MyUserRowChangeEvent(CType(e.Row,MyUserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MyUserRowChangingEvent) Is Nothing) Then
                RaiseEvent MyUserRowChanging(Me, New MyUserRowChangeEvent(CType(e.Row,MyUserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MyUserRowDeletedEvent) Is Nothing) Then
                RaiseEvent MyUserRowDeleted(Me, New MyUserRowChangeEvent(CType(e.Row,MyUserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MyUserRowDeletingEvent) Is Nothing) Then
                RaiseEvent MyUserRowDeleting(Me, New MyUserRowChangeEvent(CType(e.Row,MyUserRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMyUserRow(ByVal row As MyUserRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DBxDataSet = New DBxDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MyUserDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class UserGroupsDataTable
        Inherits Global.System.Data.TypedTableBase(Of UserGroupsRow)
        
        Private columnGroupName As Global.System.Data.DataColumn
        
        Private columnMemberID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "UserGroups"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GroupNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGroupName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MemberIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMemberID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As UserGroupsRow
            Get
                Return CType(Me.Rows(index),UserGroupsRow)
            End Get
        End Property
        
        Public Event UserGroupsRowChanging As UserGroupsRowChangeEventHandler
        
        Public Event UserGroupsRowChanged As UserGroupsRowChangeEventHandler
        
        Public Event UserGroupsRowDeleting As UserGroupsRowChangeEventHandler
        
        Public Event UserGroupsRowDeleted As UserGroupsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddUserGroupsRow(ByVal row As UserGroupsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddUserGroupsRow(ByVal GroupName As String, ByVal MemberID As String) As UserGroupsRow
            Dim rowUserGroupsRow As UserGroupsRow = CType(Me.NewRow,UserGroupsRow)
            Dim columnValuesArray() As Object = New Object() {GroupName, MemberID}
            rowUserGroupsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowUserGroupsRow)
            Return rowUserGroupsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As UserGroupsDataTable = CType(MyBase.Clone,UserGroupsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New UserGroupsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnGroupName = MyBase.Columns("GroupName")
            Me.columnMemberID = MyBase.Columns("MemberID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnGroupName = New Global.System.Data.DataColumn("GroupName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGroupName)
            Me.columnMemberID = New Global.System.Data.DataColumn("MemberID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMemberID)
            Me.columnGroupName.MaxLength = 50
            Me.columnMemberID.AllowDBNull = false
            Me.columnMemberID.MaxLength = 6
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewUserGroupsRow() As UserGroupsRow
            Return CType(Me.NewRow,UserGroupsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New UserGroupsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(UserGroupsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UserGroupsRowChangedEvent) Is Nothing) Then
                RaiseEvent UserGroupsRowChanged(Me, New UserGroupsRowChangeEvent(CType(e.Row,UserGroupsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UserGroupsRowChangingEvent) Is Nothing) Then
                RaiseEvent UserGroupsRowChanging(Me, New UserGroupsRowChangeEvent(CType(e.Row,UserGroupsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UserGroupsRowDeletedEvent) Is Nothing) Then
                RaiseEvent UserGroupsRowDeleted(Me, New UserGroupsRowChangeEvent(CType(e.Row,UserGroupsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UserGroupsRowDeletingEvent) Is Nothing) Then
                RaiseEvent UserGroupsRowDeleting(Me, New UserGroupsRowChangeEvent(CType(e.Row,UserGroupsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveUserGroupsRow(ByVal row As UserGroupsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DBxDataSet = New DBxDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "UserGroupsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TransactionDataDataTable
        Inherits Global.System.Data.TypedTableBase(Of TransactionDataRow)
        
        Private columnLotNo As Global.System.Data.DataColumn
        
        Private columnPackage As Global.System.Data.DataColumn
        
        Private columnDevice As Global.System.Data.DataColumn
        
        Private columnFrameNo As Global.System.Data.DataColumn
        
        Private columnFASetDirection As Global.System.Data.DataColumn
        
        Private columnCodeNo As Global.System.Data.DataColumn
        
        Private columnWaferLotNo As Global.System.Data.DataColumn
        
        Private columnTapingDirection As Global.System.Data.DataColumn
        
        Private columnMarkType As Global.System.Data.DataColumn
        
        Private columnMarkTextLine3 As Global.System.Data.DataColumn
        
        Private columnMarkTextLine2 As Global.System.Data.DataColumn
        
        Private columnMarkTextLine1 As Global.System.Data.DataColumn
        
        Private columnNumberOfStampStep As Global.System.Data.DataColumn
        
        Private columnOSFT As Global.System.Data.DataColumn
        
        Private columnOSProgram As Global.System.Data.DataColumn
        
        Private columnMoldType As Global.System.Data.DataColumn
        
        Private columnNewFormName As Global.System.Data.DataColumn
        
        Private columnFTForm As Global.System.Data.DataColumn
        
        Private columnMarkNo As Global.System.Data.DataColumn
        
        Private columnPDFree As Global.System.Data.DataColumn
        
        Private columnULMark As Global.System.Data.DataColumn
        
        Private columnReelCount As Global.System.Data.DataColumn
        
        Private columnCleamCounterMeasure As Global.System.Data.DataColumn
        
        Private columnSubRank As Global.System.Data.DataColumn
        
        Private columnMask As Global.System.Data.DataColumn
        
        Private columnETC1 As Global.System.Data.DataColumn
        
        Private columnETC2 As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TransactionData"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LotNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLotNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PackageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPackage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeviceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDevice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FrameNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFrameNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FASetDirectionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFASetDirection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCodeNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WaferLotNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWaferLotNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TapingDirectionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTapingDirection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarkTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarkType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarkTextLine3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarkTextLine3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarkTextLine2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarkTextLine2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarkTextLine1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarkTextLine1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumberOfStampStepColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNumberOfStampStep
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OSFTColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOSFT
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OSProgramColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOSProgram
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MoldTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMoldType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NewFormNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNewFormName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FTFormColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFTForm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MarkNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMarkNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PDFreeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPDFree
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ULMarkColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnULMark
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReelCountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReelCount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CleamCounterMeasureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCleamCounterMeasure
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubRankColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubRank
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaskColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMask
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ETC1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnETC1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ETC2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnETC2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TransactionDataRow
            Get
                Return CType(Me.Rows(index),TransactionDataRow)
            End Get
        End Property
        
        Public Event TransactionDataRowChanging As TransactionDataRowChangeEventHandler
        
        Public Event TransactionDataRowChanged As TransactionDataRowChangeEventHandler
        
        Public Event TransactionDataRowDeleting As TransactionDataRowChangeEventHandler
        
        Public Event TransactionDataRowDeleted As TransactionDataRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTransactionDataRow(ByVal row As TransactionDataRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTransactionDataRow( _
                    ByVal LotNo As String,  _
                    ByVal Package As String,  _
                    ByVal Device As String,  _
                    ByVal FrameNo As String,  _
                    ByVal FASetDirection As String,  _
                    ByVal CodeNo As String,  _
                    ByVal WaferLotNo As String,  _
                    ByVal TapingDirection As String,  _
                    ByVal MarkType As String,  _
                    ByVal MarkTextLine3 As String,  _
                    ByVal MarkTextLine2 As String,  _
                    ByVal MarkTextLine1 As String,  _
                    ByVal NumberOfStampStep As String,  _
                    ByVal OSFT As String,  _
                    ByVal OSProgram As String,  _
                    ByVal MoldType As String,  _
                    ByVal NewFormName As String,  _
                    ByVal FTForm As String,  _
                    ByVal MarkNo As String,  _
                    ByVal PDFree As String,  _
                    ByVal ULMark As String,  _
                    ByVal ReelCount As String,  _
                    ByVal CleamCounterMeasure As String,  _
                    ByVal SubRank As String,  _
                    ByVal Mask As String,  _
                    ByVal ETC1 As String,  _
                    ByVal ETC2 As String) As TransactionDataRow
            Dim rowTransactionDataRow As TransactionDataRow = CType(Me.NewRow,TransactionDataRow)
            Dim columnValuesArray() As Object = New Object() {LotNo, Package, Device, FrameNo, FASetDirection, CodeNo, WaferLotNo, TapingDirection, MarkType, MarkTextLine3, MarkTextLine2, MarkTextLine1, NumberOfStampStep, OSFT, OSProgram, MoldType, NewFormName, FTForm, MarkNo, PDFree, ULMark, ReelCount, CleamCounterMeasure, SubRank, Mask, ETC1, ETC2}
            rowTransactionDataRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTransactionDataRow)
            Return rowTransactionDataRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByLotNo(ByVal LotNo As String) As TransactionDataRow
            Return CType(Me.Rows.Find(New Object() {LotNo}),TransactionDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TransactionDataDataTable = CType(MyBase.Clone,TransactionDataDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TransactionDataDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnLotNo = MyBase.Columns("LotNo")
            Me.columnPackage = MyBase.Columns("Package")
            Me.columnDevice = MyBase.Columns("Device")
            Me.columnFrameNo = MyBase.Columns("FrameNo")
            Me.columnFASetDirection = MyBase.Columns("FASetDirection")
            Me.columnCodeNo = MyBase.Columns("CodeNo")
            Me.columnWaferLotNo = MyBase.Columns("WaferLotNo")
            Me.columnTapingDirection = MyBase.Columns("TapingDirection")
            Me.columnMarkType = MyBase.Columns("MarkType")
            Me.columnMarkTextLine3 = MyBase.Columns("MarkTextLine3")
            Me.columnMarkTextLine2 = MyBase.Columns("MarkTextLine2")
            Me.columnMarkTextLine1 = MyBase.Columns("MarkTextLine1")
            Me.columnNumberOfStampStep = MyBase.Columns("NumberOfStampStep")
            Me.columnOSFT = MyBase.Columns("OSFT")
            Me.columnOSProgram = MyBase.Columns("OSProgram")
            Me.columnMoldType = MyBase.Columns("MoldType")
            Me.columnNewFormName = MyBase.Columns("NewFormName")
            Me.columnFTForm = MyBase.Columns("FTForm")
            Me.columnMarkNo = MyBase.Columns("MarkNo")
            Me.columnPDFree = MyBase.Columns("PDFree")
            Me.columnULMark = MyBase.Columns("ULMark")
            Me.columnReelCount = MyBase.Columns("ReelCount")
            Me.columnCleamCounterMeasure = MyBase.Columns("CleamCounterMeasure")
            Me.columnSubRank = MyBase.Columns("SubRank")
            Me.columnMask = MyBase.Columns("Mask")
            Me.columnETC1 = MyBase.Columns("ETC1")
            Me.columnETC2 = MyBase.Columns("ETC2")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnLotNo = New Global.System.Data.DataColumn("LotNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLotNo)
            Me.columnPackage = New Global.System.Data.DataColumn("Package", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPackage)
            Me.columnDevice = New Global.System.Data.DataColumn("Device", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDevice)
            Me.columnFrameNo = New Global.System.Data.DataColumn("FrameNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFrameNo)
            Me.columnFASetDirection = New Global.System.Data.DataColumn("FASetDirection", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFASetDirection)
            Me.columnCodeNo = New Global.System.Data.DataColumn("CodeNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCodeNo)
            Me.columnWaferLotNo = New Global.System.Data.DataColumn("WaferLotNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWaferLotNo)
            Me.columnTapingDirection = New Global.System.Data.DataColumn("TapingDirection", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTapingDirection)
            Me.columnMarkType = New Global.System.Data.DataColumn("MarkType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarkType)
            Me.columnMarkTextLine3 = New Global.System.Data.DataColumn("MarkTextLine3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarkTextLine3)
            Me.columnMarkTextLine2 = New Global.System.Data.DataColumn("MarkTextLine2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarkTextLine2)
            Me.columnMarkTextLine1 = New Global.System.Data.DataColumn("MarkTextLine1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarkTextLine1)
            Me.columnNumberOfStampStep = New Global.System.Data.DataColumn("NumberOfStampStep", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumberOfStampStep)
            Me.columnOSFT = New Global.System.Data.DataColumn("OSFT", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOSFT)
            Me.columnOSProgram = New Global.System.Data.DataColumn("OSProgram", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOSProgram)
            Me.columnMoldType = New Global.System.Data.DataColumn("MoldType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMoldType)
            Me.columnNewFormName = New Global.System.Data.DataColumn("NewFormName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNewFormName)
            Me.columnFTForm = New Global.System.Data.DataColumn("FTForm", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFTForm)
            Me.columnMarkNo = New Global.System.Data.DataColumn("MarkNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMarkNo)
            Me.columnPDFree = New Global.System.Data.DataColumn("PDFree", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPDFree)
            Me.columnULMark = New Global.System.Data.DataColumn("ULMark", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnULMark)
            Me.columnReelCount = New Global.System.Data.DataColumn("ReelCount", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReelCount)
            Me.columnCleamCounterMeasure = New Global.System.Data.DataColumn("CleamCounterMeasure", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCleamCounterMeasure)
            Me.columnSubRank = New Global.System.Data.DataColumn("SubRank", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubRank)
            Me.columnMask = New Global.System.Data.DataColumn("Mask", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMask)
            Me.columnETC1 = New Global.System.Data.DataColumn("ETC1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnETC1)
            Me.columnETC2 = New Global.System.Data.DataColumn("ETC2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnETC2)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnLotNo}, true))
            Me.columnLotNo.AllowDBNull = false
            Me.columnLotNo.Unique = true
            Me.columnLotNo.MaxLength = 10
            Me.columnPackage.MaxLength = 10
            Me.columnDevice.MaxLength = 20
            Me.columnFrameNo.MaxLength = 16
            Me.columnFASetDirection.MaxLength = 4
            Me.columnCodeNo.MaxLength = 10
            Me.columnWaferLotNo.MaxLength = 12
            Me.columnTapingDirection.MaxLength = 3
            Me.columnMarkType.MaxLength = 1
            Me.columnMarkTextLine3.MaxLength = 10
            Me.columnMarkTextLine2.MaxLength = 10
            Me.columnMarkTextLine1.MaxLength = 10
            Me.columnNumberOfStampStep.MaxLength = 1
            Me.columnOSFT.MaxLength = 1
            Me.columnOSProgram.MaxLength = 12
            Me.columnMoldType.MaxLength = 16
            Me.columnNewFormName.MaxLength = 20
            Me.columnFTForm.MaxLength = 20
            Me.columnMarkNo.MaxLength = 10
            Me.columnPDFree.MaxLength = 1
            Me.columnULMark.MaxLength = 1
            Me.columnReelCount.MaxLength = 5
            Me.columnCleamCounterMeasure.MaxLength = 4
            Me.columnSubRank.MaxLength = 3
            Me.columnMask.MaxLength = 2
            Me.columnETC1.MaxLength = 20
            Me.columnETC2.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTransactionDataRow() As TransactionDataRow
            Return CType(Me.NewRow,TransactionDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TransactionDataRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TransactionDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TransactionDataRowChangedEvent) Is Nothing) Then
                RaiseEvent TransactionDataRowChanged(Me, New TransactionDataRowChangeEvent(CType(e.Row,TransactionDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TransactionDataRowChangingEvent) Is Nothing) Then
                RaiseEvent TransactionDataRowChanging(Me, New TransactionDataRowChangeEvent(CType(e.Row,TransactionDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TransactionDataRowDeletedEvent) Is Nothing) Then
                RaiseEvent TransactionDataRowDeleted(Me, New TransactionDataRowChangeEvent(CType(e.Row,TransactionDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TransactionDataRowDeletingEvent) Is Nothing) Then
                RaiseEvent TransactionDataRowDeleting(Me, New TransactionDataRowChangeEvent(CType(e.Row,TransactionDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTransactionDataRow(ByVal row As TransactionDataRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DBxDataSet = New DBxDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TransactionDataDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FixedLCLDataTable
        Inherits Global.System.Data.TypedTableBase(Of FixedLCLRow)
        
        Private columnTestFlowName As Global.System.Data.DataColumn
        
        Private columnLCL As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FixedLCL"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TestFlowNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTestFlowName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LCLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLCL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FixedLCLRow
            Get
                Return CType(Me.Rows(index),FixedLCLRow)
            End Get
        End Property
        
        Public Event FixedLCLRowChanging As FixedLCLRowChangeEventHandler
        
        Public Event FixedLCLRowChanged As FixedLCLRowChangeEventHandler
        
        Public Event FixedLCLRowDeleting As FixedLCLRowChangeEventHandler
        
        Public Event FixedLCLRowDeleted As FixedLCLRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFixedLCLRow(ByVal row As FixedLCLRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFixedLCLRow(ByVal TestFlowName As String, ByVal LCL As Single) As FixedLCLRow
            Dim rowFixedLCLRow As FixedLCLRow = CType(Me.NewRow,FixedLCLRow)
            Dim columnValuesArray() As Object = New Object() {TestFlowName, LCL}
            rowFixedLCLRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFixedLCLRow)
            Return rowFixedLCLRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByTestFlowName(ByVal TestFlowName As String) As FixedLCLRow
            Return CType(Me.Rows.Find(New Object() {TestFlowName}),FixedLCLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FixedLCLDataTable = CType(MyBase.Clone,FixedLCLDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FixedLCLDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnTestFlowName = MyBase.Columns("TestFlowName")
            Me.columnLCL = MyBase.Columns("LCL")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnTestFlowName = New Global.System.Data.DataColumn("TestFlowName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTestFlowName)
            Me.columnLCL = New Global.System.Data.DataColumn("LCL", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLCL)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnTestFlowName}, true))
            Me.columnTestFlowName.AllowDBNull = false
            Me.columnTestFlowName.Unique = true
            Me.columnTestFlowName.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFixedLCLRow() As FixedLCLRow
            Return CType(Me.NewRow,FixedLCLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FixedLCLRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FixedLCLRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FixedLCLRowChangedEvent) Is Nothing) Then
                RaiseEvent FixedLCLRowChanged(Me, New FixedLCLRowChangeEvent(CType(e.Row,FixedLCLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FixedLCLRowChangingEvent) Is Nothing) Then
                RaiseEvent FixedLCLRowChanging(Me, New FixedLCLRowChangeEvent(CType(e.Row,FixedLCLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FixedLCLRowDeletedEvent) Is Nothing) Then
                RaiseEvent FixedLCLRowDeleted(Me, New FixedLCLRowChangeEvent(CType(e.Row,FixedLCLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FixedLCLRowDeletingEvent) Is Nothing) Then
                RaiseEvent FixedLCLRowDeleting(Me, New FixedLCLRowChangeEvent(CType(e.Row,FixedLCLRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFixedLCLRow(ByVal row As FixedLCLRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DBxDataSet = New DBxDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FixedLCLDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TesterTypeDataTable
        Inherits Global.System.Data.TypedTableBase(Of TesterTypeRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TesterType"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TesterTypeRow
            Get
                Return CType(Me.Rows(index),TesterTypeRow)
            End Get
        End Property
        
        Public Event TesterTypeRowChanging As TesterTypeRowChangeEventHandler
        
        Public Event TesterTypeRowChanged As TesterTypeRowChangeEventHandler
        
        Public Event TesterTypeRowDeleting As TesterTypeRowChangeEventHandler
        
        Public Event TesterTypeRowDeleted As TesterTypeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTesterTypeRow(ByVal row As TesterTypeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTesterTypeRow(ByVal ID As Integer, ByVal Name As String) As TesterTypeRow
            Dim rowTesterTypeRow As TesterTypeRow = CType(Me.NewRow,TesterTypeRow)
            Dim columnValuesArray() As Object = New Object() {ID, Name}
            rowTesterTypeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTesterTypeRow)
            Return rowTesterTypeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As Integer) As TesterTypeRow
            Return CType(Me.Rows.Find(New Object() {ID}),TesterTypeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TesterTypeDataTable = CType(MyBase.Clone,TesterTypeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TesterTypeDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnName = MyBase.Columns("Name")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnName.AllowDBNull = false
            Me.columnName.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTesterTypeRow() As TesterTypeRow
            Return CType(Me.NewRow,TesterTypeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TesterTypeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TesterTypeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TesterTypeRowChangedEvent) Is Nothing) Then
                RaiseEvent TesterTypeRowChanged(Me, New TesterTypeRowChangeEvent(CType(e.Row,TesterTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TesterTypeRowChangingEvent) Is Nothing) Then
                RaiseEvent TesterTypeRowChanging(Me, New TesterTypeRowChangeEvent(CType(e.Row,TesterTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TesterTypeRowDeletedEvent) Is Nothing) Then
                RaiseEvent TesterTypeRowDeleted(Me, New TesterTypeRowChangeEvent(CType(e.Row,TesterTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TesterTypeRowDeletingEvent) Is Nothing) Then
                RaiseEvent TesterTypeRowDeleting(Me, New TesterTypeRowChangeEvent(CType(e.Row,TesterTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTesterTypeRow(ByVal row As TesterTypeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DBxDataSet = New DBxDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TesterTypeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class EquipmentLocationDataTable
        Inherits Global.System.Data.TypedTableBase(Of EquipmentLocationRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnStatusID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "EquipmentLocation"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatusID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As EquipmentLocationRow
            Get
                Return CType(Me.Rows(index),EquipmentLocationRow)
            End Get
        End Property
        
        Public Event EquipmentLocationRowChanging As EquipmentLocationRowChangeEventHandler
        
        Public Event EquipmentLocationRowChanged As EquipmentLocationRowChangeEventHandler
        
        Public Event EquipmentLocationRowDeleting As EquipmentLocationRowChangeEventHandler
        
        Public Event EquipmentLocationRowDeleted As EquipmentLocationRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddEquipmentLocationRow(ByVal row As EquipmentLocationRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddEquipmentLocationRow(ByVal StatusID As Integer) As EquipmentLocationRow
            Dim rowEquipmentLocationRow As EquipmentLocationRow = CType(Me.NewRow,EquipmentLocationRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, StatusID}
            rowEquipmentLocationRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowEquipmentLocationRow)
            Return rowEquipmentLocationRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As Integer) As EquipmentLocationRow
            Return CType(Me.Rows.Find(New Object() {ID}),EquipmentLocationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As EquipmentLocationDataTable = CType(MyBase.Clone,EquipmentLocationDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New EquipmentLocationDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnStatusID = MyBase.Columns("StatusID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnStatusID = New Global.System.Data.DataColumn("StatusID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatusID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewEquipmentLocationRow() As EquipmentLocationRow
            Return CType(Me.NewRow,EquipmentLocationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New EquipmentLocationRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(EquipmentLocationRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.EquipmentLocationRowChangedEvent) Is Nothing) Then
                RaiseEvent EquipmentLocationRowChanged(Me, New EquipmentLocationRowChangeEvent(CType(e.Row,EquipmentLocationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.EquipmentLocationRowChangingEvent) Is Nothing) Then
                RaiseEvent EquipmentLocationRowChanging(Me, New EquipmentLocationRowChangeEvent(CType(e.Row,EquipmentLocationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.EquipmentLocationRowDeletedEvent) Is Nothing) Then
                RaiseEvent EquipmentLocationRowDeleted(Me, New EquipmentLocationRowChangeEvent(CType(e.Row,EquipmentLocationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.EquipmentLocationRowDeletingEvent) Is Nothing) Then
                RaiseEvent EquipmentLocationRowDeleting(Me, New EquipmentLocationRowChangeEvent(CType(e.Row,EquipmentLocationRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveEquipmentLocationRow(ByVal row As EquipmentLocationRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DBxDataSet = New DBxDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "EquipmentLocationDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class DataDataTable
        Inherits Global.System.Data.TypedTableBase(Of DataRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnQRName As Global.System.Data.DataColumn
        
        Private columnNum As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Data"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QRNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQRName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As DataRow
            Get
                Return CType(Me.Rows(index),DataRow)
            End Get
        End Property
        
        Public Event DataRowChanging As DataRowChangeEventHandler
        
        Public Event DataRowChanged As DataRowChangeEventHandler
        
        Public Event DataRowDeleting As DataRowChangeEventHandler
        
        Public Event DataRowDeleted As DataRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddDataRow(ByVal row As DataRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddDataRow(ByVal QRName As String, ByVal Num As String) As DataRow
            Dim rowDataRow As DataRow = CType(Me.NewRow,DataRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, QRName, Num}
            rowDataRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowDataRow)
            Return rowDataRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As Integer) As DataRow
            Return CType(Me.Rows.Find(New Object() {ID}),DataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As DataDataTable = CType(MyBase.Clone,DataDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New DataDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnQRName = MyBase.Columns("QRName")
            Me.columnNum = MyBase.Columns("Num")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnQRName = New Global.System.Data.DataColumn("QRName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQRName)
            Me.columnNum = New Global.System.Data.DataColumn("Num", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNum)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnQRName.ReadOnly = true
            Me.columnQRName.MaxLength = 9
            Me.columnNum.AllowDBNull = false
            Me.columnNum.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewDataRow() As DataRow
            Return CType(Me.NewRow,DataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New DataRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(DataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DataRowChangedEvent) Is Nothing) Then
                RaiseEvent DataRowChanged(Me, New DataRowChangeEvent(CType(e.Row,DataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DataRowChangingEvent) Is Nothing) Then
                RaiseEvent DataRowChanging(Me, New DataRowChangeEvent(CType(e.Row,DataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DataRowDeletedEvent) Is Nothing) Then
                RaiseEvent DataRowDeleted(Me, New DataRowChangeEvent(CType(e.Row,DataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DataRowDeletingEvent) Is Nothing) Then
                RaiseEvent DataRowDeleting(Me, New DataRowChangeEvent(CType(e.Row,DataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveDataRow(ByVal row As DataRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DBxDataSet = New DBxDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DataDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FTSetupReportDataTable
        Inherits Global.System.Data.TypedTableBase(Of FTSetupReportRow)
        
        Private columnMCNo As Global.System.Data.DataColumn
        
        Private columnLotNo As Global.System.Data.DataColumn
        
        Private columnPackageName As Global.System.Data.DataColumn
        
        Private columnDeviceName As Global.System.Data.DataColumn
        
        Private columnProgramName As Global.System.Data.DataColumn
        
        Private columnTesterType As Global.System.Data.DataColumn
        
        Private columnTestFlow As Global.System.Data.DataColumn
        
        Private columnTesterNoA As Global.System.Data.DataColumn
        
        Private columnTesterNoB As Global.System.Data.DataColumn
        
        Private columnChannelAFTB As Global.System.Data.DataColumn
        
        Private columnChannelBFTB As Global.System.Data.DataColumn
        
        Private columnTestBoxA As Global.System.Data.DataColumn
        
        Private columnTestBoxB As Global.System.Data.DataColumn
        
        Private columnAdaptorA As Global.System.Data.DataColumn
        
        Private columnAdaptorB As Global.System.Data.DataColumn
        
        Private columnDutcardA As Global.System.Data.DataColumn
        
        Private columnDutcardB As Global.System.Data.DataColumn
        
        Private columnBridgecableA As Global.System.Data.DataColumn
        
        Private columnBridgecableB As Global.System.Data.DataColumn
        
        Private columnTypeChangePackage As Global.System.Data.DataColumn
        
        Private columnSetupStartDate As Global.System.Data.DataColumn
        
        Private columnSetupEndDate As Global.System.Data.DataColumn
        
        Private columnBoxTesterConnection As Global.System.Data.DataColumn
        
        Private columnOptionSetup As Global.System.Data.DataColumn
        
        Private columnOptionConnection As Global.System.Data.DataColumn
        
        Private columnOptionName1 As Global.System.Data.DataColumn
        
        Private columnOptionName2 As Global.System.Data.DataColumn
        
        Private columnOptionName3 As Global.System.Data.DataColumn
        
        Private columnOptionName4 As Global.System.Data.DataColumn
        
        Private columnOptionName5 As Global.System.Data.DataColumn
        
        Private columnOptionName6 As Global.System.Data.DataColumn
        
        Private columnOptionName7 As Global.System.Data.DataColumn
        
        Private columnOptionType1 As Global.System.Data.DataColumn
        
        Private columnOptionType2 As Global.System.Data.DataColumn
        
        Private columnOptionType3 As Global.System.Data.DataColumn
        
        Private columnOptionType4 As Global.System.Data.DataColumn
        
        Private columnOptionType5 As Global.System.Data.DataColumn
        
        Private columnOptionType6 As Global.System.Data.DataColumn
        
        Private columnOptionType7 As Global.System.Data.DataColumn
        
        Private columnOptionSetting1 As Global.System.Data.DataColumn
        
        Private columnOptionSetting2 As Global.System.Data.DataColumn
        
        Private columnOptionSetting3 As Global.System.Data.DataColumn
        
        Private columnOptionSetting4 As Global.System.Data.DataColumn
        
        Private columnOptionSetting5 As Global.System.Data.DataColumn
        
        Private columnOptionSetting6 As Global.System.Data.DataColumn
        
        Private columnOptionSetting7 As Global.System.Data.DataColumn
        
        Private columnQfpVacuumPad As Global.System.Data.DataColumn
        
        Private columnQfpSocketSetup As Global.System.Data.DataColumn
        
        Private columnQfpSocketDecision As Global.System.Data.DataColumn
        
        Private columnQfpDecisionLeadPress As Global.System.Data.DataColumn
        
        Private columnQfpTray As Global.System.Data.DataColumn
        
        Private columnSopStopper As Global.System.Data.DataColumn
        
        Private columnSopSocketDecision As Global.System.Data.DataColumn
        
        Private columnSopDecisionLeadPress As Global.System.Data.DataColumn
        
        Private columnManualCheckTest As Global.System.Data.DataColumn
        
        Private columnManualCheckTE As Global.System.Data.DataColumn
        
        Private columnManualCheckRequestTE As Global.System.Data.DataColumn
        
        Private columnManualCheckRequestTEConfirm As Global.System.Data.DataColumn
        
        Private columnPkgGood As Global.System.Data.DataColumn
        
        Private columnPkgNG As Global.System.Data.DataColumn
        
        Private columnPkgGoodJudgement As Global.System.Data.DataColumn
        
        Private columnPkgNGJudgement As Global.System.Data.DataColumn
        
        Private columnPkgNishikiCamara As Global.System.Data.DataColumn
        
        Private columnPkgNishikiCamaraJudgement As Global.System.Data.DataColumn
        
        Private columnPkqBantLead As Global.System.Data.DataColumn
        
        Private columnPkqKakeHige As Global.System.Data.DataColumn
        
        Private columnBgaSmallBall As Global.System.Data.DataColumn
        
        Private columnBgaBentTape As Global.System.Data.DataColumn
        
        Private columnBge5S As Global.System.Data.DataColumn
        
        Private columnSetupStatus As Global.System.Data.DataColumn
        
        Private columnSetupConfirmDate As Global.System.Data.DataColumn
        
        Private columnQRCodesocketChannel4 As Global.System.Data.DataColumn
        
        Private columnTesterNoAQRcode As Global.System.Data.DataColumn
        
        Private columnTesterNoBQRcode As Global.System.Data.DataColumn
        
        Private columnChannelAFTBQRcode As Global.System.Data.DataColumn
        
        Private columnChannelBFTBQRcode As Global.System.Data.DataColumn
        
        Private columnTestBoxAQRcode As Global.System.Data.DataColumn
        
        Private columnTestBoxBQRcode As Global.System.Data.DataColumn
        
        Private columnAdaptorAQRcode As Global.System.Data.DataColumn
        
        Private columnAdaptorBQRcode As Global.System.Data.DataColumn
        
        Private columnDutcardAQRcode As Global.System.Data.DataColumn
        
        Private columnDutcardBQRcode As Global.System.Data.DataColumn
        
        Private columnBridgecableAQRcode As Global.System.Data.DataColumn
        
        Private columnBridgecableBQRcode As Global.System.Data.DataColumn
        
        Private columnQRCodesocket1 As Global.System.Data.DataColumn
        
        Private columnQRCodesocket2 As Global.System.Data.DataColumn
        
        Private columnQRCodesocket3 As Global.System.Data.DataColumn
        
        Private columnQRCodesocket4 As Global.System.Data.DataColumn
        
        Private columnQRCodesocketChannel1 As Global.System.Data.DataColumn
        
        Private columnQRCodesocketChannel2 As Global.System.Data.DataColumn
        
        Private columnQRCodesocketChannel3 As Global.System.Data.DataColumn
        
        Private columnConfirmedCheckSheetOp As Global.System.Data.DataColumn
        
        Private columnConfirmedCheckSheetSection As Global.System.Data.DataColumn
        
        Private columnConfirmedShonoSection As Global.System.Data.DataColumn
        
        Private columnConfirmedCheckSheetGL As Global.System.Data.DataColumn
        
        Private columnConfirmedShonoGL As Global.System.Data.DataColumn
        
        Private columnConfirmedShonoOp As Global.System.Data.DataColumn
        
        Private columnStatusShonoOP As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FTSetupReport"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MCNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMCNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LotNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLotNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PackageNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPackageName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeviceNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDeviceName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProgramNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProgramName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TesterTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTesterType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TestFlowColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTestFlow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TesterNoAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTesterNoA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TesterNoBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTesterNoB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ChannelAFTBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnChannelAFTB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ChannelBFTBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnChannelBFTB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TestBoxAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTestBoxA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TestBoxBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTestBoxB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdaptorAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdaptorA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdaptorBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdaptorB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DutcardAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDutcardA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DutcardBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDutcardB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BridgecableAColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBridgecableA
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BridgecableBColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBridgecableB
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeChangePackageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTypeChangePackage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SetupStartDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSetupStartDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SetupEndDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSetupEndDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BoxTesterConnectionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBoxTesterConnection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OptionSetupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOptionSetup
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OptionConnectionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOptionConnection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OptionName1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOptionName1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OptionName2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOptionName2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OptionName3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOptionName3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OptionName4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOptionName4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OptionName5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOptionName5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OptionName6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOptionName6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OptionName7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOptionName7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OptionType1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOptionType1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OptionType2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOptionType2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OptionType3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOptionType3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OptionType4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOptionType4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OptionType5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOptionType5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OptionType6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOptionType6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OptionType7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOptionType7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OptionSetting1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOptionSetting1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OptionSetting2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOptionSetting2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OptionSetting3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOptionSetting3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OptionSetting4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOptionSetting4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OptionSetting5Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOptionSetting5
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OptionSetting6Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOptionSetting6
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OptionSetting7Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnOptionSetting7
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QfpVacuumPadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQfpVacuumPad
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QfpSocketSetupColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQfpSocketSetup
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QfpSocketDecisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQfpSocketDecision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QfpDecisionLeadPressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQfpDecisionLeadPress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QfpTrayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQfpTray
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SopStopperColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSopStopper
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SopSocketDecisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSopSocketDecision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SopDecisionLeadPressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSopDecisionLeadPress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ManualCheckTestColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnManualCheckTest
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ManualCheckTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnManualCheckTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ManualCheckRequestTEColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnManualCheckRequestTE
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ManualCheckRequestTEConfirmColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnManualCheckRequestTEConfirm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PkgGoodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPkgGood
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PkgNGColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPkgNG
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PkgGoodJudgementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPkgGoodJudgement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PkgNGJudgementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPkgNGJudgement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PkgNishikiCamaraColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPkgNishikiCamara
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PkgNishikiCamaraJudgementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPkgNishikiCamaraJudgement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PkqBantLeadColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPkqBantLead
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PkqKakeHigeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPkqKakeHige
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BgaSmallBallColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBgaSmallBall
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BgaBentTapeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBgaBentTape
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Bge5SColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBge5S
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SetupStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSetupStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SetupConfirmDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSetupConfirmDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QRCodesocketChannel4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnQRCodesocketChannel4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TesterNoAQRcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTesterNoAQRcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TesterNoBQRcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTesterNoBQRcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ChannelAFTBQRcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnChannelAFTBQRcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ChannelBFTBQRcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnChannelBFTBQRcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TestBoxAQRcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTestBoxAQRcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TestBoxBQRcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTestBoxBQRcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdaptorAQRcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdaptorAQRcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdaptorBQRcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdaptorBQRcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DutcardAQRcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDutcardAQRcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DutcardBQRcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDutcardBQRcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BridgecableAQRcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBridgecableAQRcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BridgecableBQRcodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBridgecableBQRcode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QRCodesocket1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnQRCodesocket1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QRCodesocket2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnQRCodesocket2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QRCodesocket3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnQRCodesocket3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QRCodesocket4Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnQRCodesocket4
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QRCodesocketChannel1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnQRCodesocketChannel1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QRCodesocketChannel2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnQRCodesocketChannel2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QRCodesocketChannel3Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnQRCodesocketChannel3
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConfirmedCheckSheetOpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConfirmedCheckSheetOp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConfirmedCheckSheetSectionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConfirmedCheckSheetSection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConfirmedShonoSectionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConfirmedShonoSection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConfirmedCheckSheetGLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConfirmedCheckSheetGL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConfirmedShonoGLColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConfirmedShonoGL
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConfirmedShonoOpColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConfirmedShonoOp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusShonoOPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatusShonoOP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FTSetupReportRow
            Get
                Return CType(Me.Rows(index),FTSetupReportRow)
            End Get
        End Property
        
        Public Event FTSetupReportRowChanging As FTSetupReportRowChangeEventHandler
        
        Public Event FTSetupReportRowChanged As FTSetupReportRowChangeEventHandler
        
        Public Event FTSetupReportRowDeleting As FTSetupReportRowChangeEventHandler
        
        Public Event FTSetupReportRowDeleted As FTSetupReportRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFTSetupReportRow(ByVal row As FTSetupReportRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFTSetupReportRow( _
                    ByVal MCNo As String,  _
                    ByVal LotNo As String,  _
                    ByVal PackageName As String,  _
                    ByVal DeviceName As String,  _
                    ByVal ProgramName As String,  _
                    ByVal TesterType As String,  _
                    ByVal TestFlow As String,  _
                    ByVal TesterNoA As String,  _
                    ByVal TesterNoB As String,  _
                    ByVal ChannelAFTB As String,  _
                    ByVal ChannelBFTB As String,  _
                    ByVal TestBoxA As String,  _
                    ByVal TestBoxB As String,  _
                    ByVal AdaptorA As String,  _
                    ByVal AdaptorB As String,  _
                    ByVal DutcardA As String,  _
                    ByVal DutcardB As String,  _
                    ByVal BridgecableA As String,  _
                    ByVal BridgecableB As String,  _
                    ByVal TypeChangePackage As String,  _
                    ByVal SetupStartDate As Date,  _
                    ByVal SetupEndDate As Date,  _
                    ByVal BoxTesterConnection As String,  _
                    ByVal OptionSetup As String,  _
                    ByVal OptionConnection As String,  _
                    ByVal OptionName1 As String,  _
                    ByVal OptionName2 As String,  _
                    ByVal OptionName3 As String,  _
                    ByVal OptionName4 As String,  _
                    ByVal OptionName5 As String,  _
                    ByVal OptionName6 As String,  _
                    ByVal OptionName7 As String,  _
                    ByVal OptionType1 As String,  _
                    ByVal OptionType2 As String,  _
                    ByVal OptionType3 As String,  _
                    ByVal OptionType4 As String,  _
                    ByVal OptionType5 As String,  _
                    ByVal OptionType6 As String,  _
                    ByVal OptionType7 As String,  _
                    ByVal OptionSetting1 As String,  _
                    ByVal OptionSetting2 As String,  _
                    ByVal OptionSetting3 As String,  _
                    ByVal OptionSetting4 As String,  _
                    ByVal OptionSetting5 As String,  _
                    ByVal OptionSetting6 As String,  _
                    ByVal OptionSetting7 As String,  _
                    ByVal QfpVacuumPad As String,  _
                    ByVal QfpSocketSetup As String,  _
                    ByVal QfpSocketDecision As String,  _
                    ByVal QfpDecisionLeadPress As String,  _
                    ByVal QfpTray As String,  _
                    ByVal SopStopper As String,  _
                    ByVal SopSocketDecision As String,  _
                    ByVal SopDecisionLeadPress As String,  _
                    ByVal ManualCheckTest As Integer,  _
                    ByVal ManualCheckTE As String,  _
                    ByVal ManualCheckRequestTE As Integer,  _
                    ByVal ManualCheckRequestTEConfirm As String,  _
                    ByVal PkgGood As String,  _
                    ByVal PkgNG As String,  _
                    ByVal PkgGoodJudgement As String,  _
                    ByVal PkgNGJudgement As String,  _
                    ByVal PkgNishikiCamara As String,  _
                    ByVal PkgNishikiCamaraJudgement As String,  _
                    ByVal PkqBantLead As String,  _
                    ByVal PkqKakeHige As String,  _
                    ByVal BgaSmallBall As String,  _
                    ByVal BgaBentTape As String,  _
                    ByVal Bge5S As String,  _
                    ByVal SetupStatus As String,  _
                    ByVal SetupConfirmDate As Date,  _
                    ByVal QRCodesocketChannel4 As String,  _
                    ByVal TesterNoAQRcode As String,  _
                    ByVal TesterNoBQRcode As String,  _
                    ByVal ChannelAFTBQRcode As String,  _
                    ByVal ChannelBFTBQRcode As String,  _
                    ByVal TestBoxAQRcode As String,  _
                    ByVal TestBoxBQRcode As String,  _
                    ByVal AdaptorAQRcode As String,  _
                    ByVal AdaptorBQRcode As String,  _
                    ByVal DutcardAQRcode As String,  _
                    ByVal DutcardBQRcode As String,  _
                    ByVal BridgecableAQRcode As String,  _
                    ByVal BridgecableBQRcode As String,  _
                    ByVal QRCodesocket1 As String,  _
                    ByVal QRCodesocket2 As String,  _
                    ByVal QRCodesocket3 As String,  _
                    ByVal QRCodesocket4 As String,  _
                    ByVal QRCodesocketChannel1 As String,  _
                    ByVal QRCodesocketChannel2 As String,  _
                    ByVal QRCodesocketChannel3 As String,  _
                    ByVal ConfirmedCheckSheetOp As String,  _
                    ByVal ConfirmedCheckSheetSection As String,  _
                    ByVal ConfirmedShonoSection As String,  _
                    ByVal ConfirmedCheckSheetGL As String,  _
                    ByVal ConfirmedShonoGL As String,  _
                    ByVal ConfirmedShonoOp As String,  _
                    ByVal StatusShonoOP As String) As FTSetupReportRow
            Dim rowFTSetupReportRow As FTSetupReportRow = CType(Me.NewRow,FTSetupReportRow)
            Dim columnValuesArray() As Object = New Object() {MCNo, LotNo, PackageName, DeviceName, ProgramName, TesterType, TestFlow, TesterNoA, TesterNoB, ChannelAFTB, ChannelBFTB, TestBoxA, TestBoxB, AdaptorA, AdaptorB, DutcardA, DutcardB, BridgecableA, BridgecableB, TypeChangePackage, SetupStartDate, SetupEndDate, BoxTesterConnection, OptionSetup, OptionConnection, OptionName1, OptionName2, OptionName3, OptionName4, OptionName5, OptionName6, OptionName7, OptionType1, OptionType2, OptionType3, OptionType4, OptionType5, OptionType6, OptionType7, OptionSetting1, OptionSetting2, OptionSetting3, OptionSetting4, OptionSetting5, OptionSetting6, OptionSetting7, QfpVacuumPad, QfpSocketSetup, QfpSocketDecision, QfpDecisionLeadPress, QfpTray, SopStopper, SopSocketDecision, SopDecisionLeadPress, ManualCheckTest, ManualCheckTE, ManualCheckRequestTE, ManualCheckRequestTEConfirm, PkgGood, PkgNG, PkgGoodJudgement, PkgNGJudgement, PkgNishikiCamara, PkgNishikiCamaraJudgement, PkqBantLead, PkqKakeHige, BgaSmallBall, BgaBentTape, Bge5S, SetupStatus, SetupConfirmDate, QRCodesocketChannel4, TesterNoAQRcode, TesterNoBQRcode, ChannelAFTBQRcode, ChannelBFTBQRcode, TestBoxAQRcode, TestBoxBQRcode, AdaptorAQRcode, AdaptorBQRcode, DutcardAQRcode, DutcardBQRcode, BridgecableAQRcode, BridgecableBQRcode, QRCodesocket1, QRCodesocket2, QRCodesocket3, QRCodesocket4, QRCodesocketChannel1, QRCodesocketChannel2, QRCodesocketChannel3, ConfirmedCheckSheetOp, ConfirmedCheckSheetSection, ConfirmedShonoSection, ConfirmedCheckSheetGL, ConfirmedShonoGL, ConfirmedShonoOp, StatusShonoOP}
            rowFTSetupReportRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFTSetupReportRow)
            Return rowFTSetupReportRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByMCNo(ByVal MCNo As String) As FTSetupReportRow
            Return CType(Me.Rows.Find(New Object() {MCNo}),FTSetupReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FTSetupReportDataTable = CType(MyBase.Clone,FTSetupReportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FTSetupReportDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnMCNo = MyBase.Columns("MCNo")
            Me.columnLotNo = MyBase.Columns("LotNo")
            Me.columnPackageName = MyBase.Columns("PackageName")
            Me.columnDeviceName = MyBase.Columns("DeviceName")
            Me.columnProgramName = MyBase.Columns("ProgramName")
            Me.columnTesterType = MyBase.Columns("TesterType")
            Me.columnTestFlow = MyBase.Columns("TestFlow")
            Me.columnTesterNoA = MyBase.Columns("TesterNoA")
            Me.columnTesterNoB = MyBase.Columns("TesterNoB")
            Me.columnChannelAFTB = MyBase.Columns("ChannelAFTB")
            Me.columnChannelBFTB = MyBase.Columns("ChannelBFTB")
            Me.columnTestBoxA = MyBase.Columns("TestBoxA")
            Me.columnTestBoxB = MyBase.Columns("TestBoxB")
            Me.columnAdaptorA = MyBase.Columns("AdaptorA")
            Me.columnAdaptorB = MyBase.Columns("AdaptorB")
            Me.columnDutcardA = MyBase.Columns("DutcardA")
            Me.columnDutcardB = MyBase.Columns("DutcardB")
            Me.columnBridgecableA = MyBase.Columns("BridgecableA")
            Me.columnBridgecableB = MyBase.Columns("BridgecableB")
            Me.columnTypeChangePackage = MyBase.Columns("TypeChangePackage")
            Me.columnSetupStartDate = MyBase.Columns("SetupStartDate")
            Me.columnSetupEndDate = MyBase.Columns("SetupEndDate")
            Me.columnBoxTesterConnection = MyBase.Columns("BoxTesterConnection")
            Me.columnOptionSetup = MyBase.Columns("OptionSetup")
            Me.columnOptionConnection = MyBase.Columns("OptionConnection")
            Me.columnOptionName1 = MyBase.Columns("OptionName1")
            Me.columnOptionName2 = MyBase.Columns("OptionName2")
            Me.columnOptionName3 = MyBase.Columns("OptionName3")
            Me.columnOptionName4 = MyBase.Columns("OptionName4")
            Me.columnOptionName5 = MyBase.Columns("OptionName5")
            Me.columnOptionName6 = MyBase.Columns("OptionName6")
            Me.columnOptionName7 = MyBase.Columns("OptionName7")
            Me.columnOptionType1 = MyBase.Columns("OptionType1")
            Me.columnOptionType2 = MyBase.Columns("OptionType2")
            Me.columnOptionType3 = MyBase.Columns("OptionType3")
            Me.columnOptionType4 = MyBase.Columns("OptionType4")
            Me.columnOptionType5 = MyBase.Columns("OptionType5")
            Me.columnOptionType6 = MyBase.Columns("OptionType6")
            Me.columnOptionType7 = MyBase.Columns("OptionType7")
            Me.columnOptionSetting1 = MyBase.Columns("OptionSetting1")
            Me.columnOptionSetting2 = MyBase.Columns("OptionSetting2")
            Me.columnOptionSetting3 = MyBase.Columns("OptionSetting3")
            Me.columnOptionSetting4 = MyBase.Columns("OptionSetting4")
            Me.columnOptionSetting5 = MyBase.Columns("OptionSetting5")
            Me.columnOptionSetting6 = MyBase.Columns("OptionSetting6")
            Me.columnOptionSetting7 = MyBase.Columns("OptionSetting7")
            Me.columnQfpVacuumPad = MyBase.Columns("QfpVacuumPad")
            Me.columnQfpSocketSetup = MyBase.Columns("QfpSocketSetup")
            Me.columnQfpSocketDecision = MyBase.Columns("QfpSocketDecision")
            Me.columnQfpDecisionLeadPress = MyBase.Columns("QfpDecisionLeadPress")
            Me.columnQfpTray = MyBase.Columns("QfpTray")
            Me.columnSopStopper = MyBase.Columns("SopStopper")
            Me.columnSopSocketDecision = MyBase.Columns("SopSocketDecision")
            Me.columnSopDecisionLeadPress = MyBase.Columns("SopDecisionLeadPress")
            Me.columnManualCheckTest = MyBase.Columns("ManualCheckTest")
            Me.columnManualCheckTE = MyBase.Columns("ManualCheckTE")
            Me.columnManualCheckRequestTE = MyBase.Columns("ManualCheckRequestTE")
            Me.columnManualCheckRequestTEConfirm = MyBase.Columns("ManualCheckRequestTEConfirm")
            Me.columnPkgGood = MyBase.Columns("PkgGood")
            Me.columnPkgNG = MyBase.Columns("PkgNG")
            Me.columnPkgGoodJudgement = MyBase.Columns("PkgGoodJudgement")
            Me.columnPkgNGJudgement = MyBase.Columns("PkgNGJudgement")
            Me.columnPkgNishikiCamara = MyBase.Columns("PkgNishikiCamara")
            Me.columnPkgNishikiCamaraJudgement = MyBase.Columns("PkgNishikiCamaraJudgement")
            Me.columnPkqBantLead = MyBase.Columns("PkqBantLead")
            Me.columnPkqKakeHige = MyBase.Columns("PkqKakeHige")
            Me.columnBgaSmallBall = MyBase.Columns("BgaSmallBall")
            Me.columnBgaBentTape = MyBase.Columns("BgaBentTape")
            Me.columnBge5S = MyBase.Columns("Bge5S")
            Me.columnSetupStatus = MyBase.Columns("SetupStatus")
            Me.columnSetupConfirmDate = MyBase.Columns("SetupConfirmDate")
            Me.columnQRCodesocketChannel4 = MyBase.Columns("QRCodesocketChannel4")
            Me.columnTesterNoAQRcode = MyBase.Columns("TesterNoAQRcode")
            Me.columnTesterNoBQRcode = MyBase.Columns("TesterNoBQRcode")
            Me.columnChannelAFTBQRcode = MyBase.Columns("ChannelAFTBQRcode")
            Me.columnChannelBFTBQRcode = MyBase.Columns("ChannelBFTBQRcode")
            Me.columnTestBoxAQRcode = MyBase.Columns("TestBoxAQRcode")
            Me.columnTestBoxBQRcode = MyBase.Columns("TestBoxBQRcode")
            Me.columnAdaptorAQRcode = MyBase.Columns("AdaptorAQRcode")
            Me.columnAdaptorBQRcode = MyBase.Columns("AdaptorBQRcode")
            Me.columnDutcardAQRcode = MyBase.Columns("DutcardAQRcode")
            Me.columnDutcardBQRcode = MyBase.Columns("DutcardBQRcode")
            Me.columnBridgecableAQRcode = MyBase.Columns("BridgecableAQRcode")
            Me.columnBridgecableBQRcode = MyBase.Columns("BridgecableBQRcode")
            Me.columnQRCodesocket1 = MyBase.Columns("QRCodesocket1")
            Me.columnQRCodesocket2 = MyBase.Columns("QRCodesocket2")
            Me.columnQRCodesocket3 = MyBase.Columns("QRCodesocket3")
            Me.columnQRCodesocket4 = MyBase.Columns("QRCodesocket4")
            Me.columnQRCodesocketChannel1 = MyBase.Columns("QRCodesocketChannel1")
            Me.columnQRCodesocketChannel2 = MyBase.Columns("QRCodesocketChannel2")
            Me.columnQRCodesocketChannel3 = MyBase.Columns("QRCodesocketChannel3")
            Me.columnConfirmedCheckSheetOp = MyBase.Columns("ConfirmedCheckSheetOp")
            Me.columnConfirmedCheckSheetSection = MyBase.Columns("ConfirmedCheckSheetSection")
            Me.columnConfirmedShonoSection = MyBase.Columns("ConfirmedShonoSection")
            Me.columnConfirmedCheckSheetGL = MyBase.Columns("ConfirmedCheckSheetGL")
            Me.columnConfirmedShonoGL = MyBase.Columns("ConfirmedShonoGL")
            Me.columnConfirmedShonoOp = MyBase.Columns("ConfirmedShonoOp")
            Me.columnStatusShonoOP = MyBase.Columns("StatusShonoOP")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnMCNo = New Global.System.Data.DataColumn("MCNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMCNo)
            Me.columnLotNo = New Global.System.Data.DataColumn("LotNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLotNo)
            Me.columnPackageName = New Global.System.Data.DataColumn("PackageName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPackageName)
            Me.columnDeviceName = New Global.System.Data.DataColumn("DeviceName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDeviceName)
            Me.columnProgramName = New Global.System.Data.DataColumn("ProgramName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProgramName)
            Me.columnTesterType = New Global.System.Data.DataColumn("TesterType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTesterType)
            Me.columnTestFlow = New Global.System.Data.DataColumn("TestFlow", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTestFlow)
            Me.columnTesterNoA = New Global.System.Data.DataColumn("TesterNoA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTesterNoA)
            Me.columnTesterNoB = New Global.System.Data.DataColumn("TesterNoB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTesterNoB)
            Me.columnChannelAFTB = New Global.System.Data.DataColumn("ChannelAFTB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnChannelAFTB)
            Me.columnChannelBFTB = New Global.System.Data.DataColumn("ChannelBFTB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnChannelBFTB)
            Me.columnTestBoxA = New Global.System.Data.DataColumn("TestBoxA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTestBoxA)
            Me.columnTestBoxB = New Global.System.Data.DataColumn("TestBoxB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTestBoxB)
            Me.columnAdaptorA = New Global.System.Data.DataColumn("AdaptorA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdaptorA)
            Me.columnAdaptorB = New Global.System.Data.DataColumn("AdaptorB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdaptorB)
            Me.columnDutcardA = New Global.System.Data.DataColumn("DutcardA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDutcardA)
            Me.columnDutcardB = New Global.System.Data.DataColumn("DutcardB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDutcardB)
            Me.columnBridgecableA = New Global.System.Data.DataColumn("BridgecableA", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBridgecableA)
            Me.columnBridgecableB = New Global.System.Data.DataColumn("BridgecableB", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBridgecableB)
            Me.columnTypeChangePackage = New Global.System.Data.DataColumn("TypeChangePackage", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeChangePackage)
            Me.columnSetupStartDate = New Global.System.Data.DataColumn("SetupStartDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSetupStartDate)
            Me.columnSetupEndDate = New Global.System.Data.DataColumn("SetupEndDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSetupEndDate)
            Me.columnBoxTesterConnection = New Global.System.Data.DataColumn("BoxTesterConnection", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBoxTesterConnection)
            Me.columnOptionSetup = New Global.System.Data.DataColumn("OptionSetup", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOptionSetup)
            Me.columnOptionConnection = New Global.System.Data.DataColumn("OptionConnection", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOptionConnection)
            Me.columnOptionName1 = New Global.System.Data.DataColumn("OptionName1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOptionName1)
            Me.columnOptionName2 = New Global.System.Data.DataColumn("OptionName2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOptionName2)
            Me.columnOptionName3 = New Global.System.Data.DataColumn("OptionName3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOptionName3)
            Me.columnOptionName4 = New Global.System.Data.DataColumn("OptionName4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOptionName4)
            Me.columnOptionName5 = New Global.System.Data.DataColumn("OptionName5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOptionName5)
            Me.columnOptionName6 = New Global.System.Data.DataColumn("OptionName6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOptionName6)
            Me.columnOptionName7 = New Global.System.Data.DataColumn("OptionName7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOptionName7)
            Me.columnOptionType1 = New Global.System.Data.DataColumn("OptionType1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOptionType1)
            Me.columnOptionType2 = New Global.System.Data.DataColumn("OptionType2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOptionType2)
            Me.columnOptionType3 = New Global.System.Data.DataColumn("OptionType3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOptionType3)
            Me.columnOptionType4 = New Global.System.Data.DataColumn("OptionType4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOptionType4)
            Me.columnOptionType5 = New Global.System.Data.DataColumn("OptionType5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOptionType5)
            Me.columnOptionType6 = New Global.System.Data.DataColumn("OptionType6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOptionType6)
            Me.columnOptionType7 = New Global.System.Data.DataColumn("OptionType7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOptionType7)
            Me.columnOptionSetting1 = New Global.System.Data.DataColumn("OptionSetting1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOptionSetting1)
            Me.columnOptionSetting2 = New Global.System.Data.DataColumn("OptionSetting2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOptionSetting2)
            Me.columnOptionSetting3 = New Global.System.Data.DataColumn("OptionSetting3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOptionSetting3)
            Me.columnOptionSetting4 = New Global.System.Data.DataColumn("OptionSetting4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOptionSetting4)
            Me.columnOptionSetting5 = New Global.System.Data.DataColumn("OptionSetting5", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOptionSetting5)
            Me.columnOptionSetting6 = New Global.System.Data.DataColumn("OptionSetting6", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOptionSetting6)
            Me.columnOptionSetting7 = New Global.System.Data.DataColumn("OptionSetting7", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOptionSetting7)
            Me.columnQfpVacuumPad = New Global.System.Data.DataColumn("QfpVacuumPad", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQfpVacuumPad)
            Me.columnQfpSocketSetup = New Global.System.Data.DataColumn("QfpSocketSetup", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQfpSocketSetup)
            Me.columnQfpSocketDecision = New Global.System.Data.DataColumn("QfpSocketDecision", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQfpSocketDecision)
            Me.columnQfpDecisionLeadPress = New Global.System.Data.DataColumn("QfpDecisionLeadPress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQfpDecisionLeadPress)
            Me.columnQfpTray = New Global.System.Data.DataColumn("QfpTray", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQfpTray)
            Me.columnSopStopper = New Global.System.Data.DataColumn("SopStopper", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSopStopper)
            Me.columnSopSocketDecision = New Global.System.Data.DataColumn("SopSocketDecision", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSopSocketDecision)
            Me.columnSopDecisionLeadPress = New Global.System.Data.DataColumn("SopDecisionLeadPress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSopDecisionLeadPress)
            Me.columnManualCheckTest = New Global.System.Data.DataColumn("ManualCheckTest", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnManualCheckTest)
            Me.columnManualCheckTE = New Global.System.Data.DataColumn("ManualCheckTE", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnManualCheckTE)
            Me.columnManualCheckRequestTE = New Global.System.Data.DataColumn("ManualCheckRequestTE", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnManualCheckRequestTE)
            Me.columnManualCheckRequestTEConfirm = New Global.System.Data.DataColumn("ManualCheckRequestTEConfirm", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnManualCheckRequestTEConfirm)
            Me.columnPkgGood = New Global.System.Data.DataColumn("PkgGood", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPkgGood)
            Me.columnPkgNG = New Global.System.Data.DataColumn("PkgNG", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPkgNG)
            Me.columnPkgGoodJudgement = New Global.System.Data.DataColumn("PkgGoodJudgement", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPkgGoodJudgement)
            Me.columnPkgNGJudgement = New Global.System.Data.DataColumn("PkgNGJudgement", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPkgNGJudgement)
            Me.columnPkgNishikiCamara = New Global.System.Data.DataColumn("PkgNishikiCamara", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPkgNishikiCamara)
            Me.columnPkgNishikiCamaraJudgement = New Global.System.Data.DataColumn("PkgNishikiCamaraJudgement", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPkgNishikiCamaraJudgement)
            Me.columnPkqBantLead = New Global.System.Data.DataColumn("PkqBantLead", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPkqBantLead)
            Me.columnPkqKakeHige = New Global.System.Data.DataColumn("PkqKakeHige", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPkqKakeHige)
            Me.columnBgaSmallBall = New Global.System.Data.DataColumn("BgaSmallBall", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBgaSmallBall)
            Me.columnBgaBentTape = New Global.System.Data.DataColumn("BgaBentTape", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBgaBentTape)
            Me.columnBge5S = New Global.System.Data.DataColumn("Bge5S", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBge5S)
            Me.columnSetupStatus = New Global.System.Data.DataColumn("SetupStatus", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSetupStatus)
            Me.columnSetupConfirmDate = New Global.System.Data.DataColumn("SetupConfirmDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSetupConfirmDate)
            Me.columnQRCodesocketChannel4 = New Global.System.Data.DataColumn("QRCodesocketChannel4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQRCodesocketChannel4)
            Me.columnTesterNoAQRcode = New Global.System.Data.DataColumn("TesterNoAQRcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTesterNoAQRcode)
            Me.columnTesterNoBQRcode = New Global.System.Data.DataColumn("TesterNoBQRcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTesterNoBQRcode)
            Me.columnChannelAFTBQRcode = New Global.System.Data.DataColumn("ChannelAFTBQRcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnChannelAFTBQRcode)
            Me.columnChannelBFTBQRcode = New Global.System.Data.DataColumn("ChannelBFTBQRcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnChannelBFTBQRcode)
            Me.columnTestBoxAQRcode = New Global.System.Data.DataColumn("TestBoxAQRcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTestBoxAQRcode)
            Me.columnTestBoxBQRcode = New Global.System.Data.DataColumn("TestBoxBQRcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTestBoxBQRcode)
            Me.columnAdaptorAQRcode = New Global.System.Data.DataColumn("AdaptorAQRcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdaptorAQRcode)
            Me.columnAdaptorBQRcode = New Global.System.Data.DataColumn("AdaptorBQRcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdaptorBQRcode)
            Me.columnDutcardAQRcode = New Global.System.Data.DataColumn("DutcardAQRcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDutcardAQRcode)
            Me.columnDutcardBQRcode = New Global.System.Data.DataColumn("DutcardBQRcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDutcardBQRcode)
            Me.columnBridgecableAQRcode = New Global.System.Data.DataColumn("BridgecableAQRcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBridgecableAQRcode)
            Me.columnBridgecableBQRcode = New Global.System.Data.DataColumn("BridgecableBQRcode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBridgecableBQRcode)
            Me.columnQRCodesocket1 = New Global.System.Data.DataColumn("QRCodesocket1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQRCodesocket1)
            Me.columnQRCodesocket2 = New Global.System.Data.DataColumn("QRCodesocket2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQRCodesocket2)
            Me.columnQRCodesocket3 = New Global.System.Data.DataColumn("QRCodesocket3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQRCodesocket3)
            Me.columnQRCodesocket4 = New Global.System.Data.DataColumn("QRCodesocket4", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQRCodesocket4)
            Me.columnQRCodesocketChannel1 = New Global.System.Data.DataColumn("QRCodesocketChannel1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQRCodesocketChannel1)
            Me.columnQRCodesocketChannel2 = New Global.System.Data.DataColumn("QRCodesocketChannel2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQRCodesocketChannel2)
            Me.columnQRCodesocketChannel3 = New Global.System.Data.DataColumn("QRCodesocketChannel3", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQRCodesocketChannel3)
            Me.columnConfirmedCheckSheetOp = New Global.System.Data.DataColumn("ConfirmedCheckSheetOp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConfirmedCheckSheetOp)
            Me.columnConfirmedCheckSheetSection = New Global.System.Data.DataColumn("ConfirmedCheckSheetSection", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConfirmedCheckSheetSection)
            Me.columnConfirmedShonoSection = New Global.System.Data.DataColumn("ConfirmedShonoSection", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConfirmedShonoSection)
            Me.columnConfirmedCheckSheetGL = New Global.System.Data.DataColumn("ConfirmedCheckSheetGL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConfirmedCheckSheetGL)
            Me.columnConfirmedShonoGL = New Global.System.Data.DataColumn("ConfirmedShonoGL", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConfirmedShonoGL)
            Me.columnConfirmedShonoOp = New Global.System.Data.DataColumn("ConfirmedShonoOp", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConfirmedShonoOp)
            Me.columnStatusShonoOP = New Global.System.Data.DataColumn("StatusShonoOP", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatusShonoOP)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnMCNo}, true))
            Me.columnMCNo.AllowDBNull = false
            Me.columnMCNo.Unique = true
            Me.columnMCNo.MaxLength = 15
            Me.columnLotNo.MaxLength = 10
            Me.columnPackageName.MaxLength = 10
            Me.columnDeviceName.MaxLength = 20
            Me.columnProgramName.MaxLength = 30
            Me.columnTesterType.MaxLength = 30
            Me.columnTestFlow.MaxLength = 30
            Me.columnTesterNoA.MaxLength = 30
            Me.columnTesterNoB.MaxLength = 30
            Me.columnChannelAFTB.MaxLength = 30
            Me.columnChannelBFTB.MaxLength = 30
            Me.columnTestBoxA.MaxLength = 30
            Me.columnTestBoxB.MaxLength = 30
            Me.columnAdaptorA.MaxLength = 30
            Me.columnAdaptorB.MaxLength = 30
            Me.columnDutcardA.MaxLength = 30
            Me.columnDutcardB.MaxLength = 30
            Me.columnBridgecableA.MaxLength = 30
            Me.columnBridgecableB.MaxLength = 30
            Me.columnTypeChangePackage.MaxLength = 30
            Me.columnBoxTesterConnection.MaxLength = 10
            Me.columnOptionSetup.MaxLength = 10
            Me.columnOptionConnection.MaxLength = 10
            Me.columnOptionName1.MaxLength = 30
            Me.columnOptionName2.MaxLength = 30
            Me.columnOptionName3.MaxLength = 30
            Me.columnOptionName4.MaxLength = 30
            Me.columnOptionName5.MaxLength = 30
            Me.columnOptionName6.MaxLength = 30
            Me.columnOptionName7.MaxLength = 30
            Me.columnOptionType1.MaxLength = 30
            Me.columnOptionType2.MaxLength = 30
            Me.columnOptionType3.MaxLength = 30
            Me.columnOptionType4.MaxLength = 30
            Me.columnOptionType5.MaxLength = 30
            Me.columnOptionType6.MaxLength = 30
            Me.columnOptionType7.MaxLength = 30
            Me.columnOptionSetting1.MaxLength = 30
            Me.columnOptionSetting2.MaxLength = 30
            Me.columnOptionSetting3.MaxLength = 30
            Me.columnOptionSetting4.MaxLength = 30
            Me.columnOptionSetting5.MaxLength = 30
            Me.columnOptionSetting6.MaxLength = 30
            Me.columnOptionSetting7.MaxLength = 30
            Me.columnQfpVacuumPad.MaxLength = 10
            Me.columnQfpSocketSetup.MaxLength = 10
            Me.columnQfpSocketDecision.MaxLength = 10
            Me.columnQfpDecisionLeadPress.MaxLength = 10
            Me.columnQfpTray.MaxLength = 10
            Me.columnSopStopper.MaxLength = 10
            Me.columnSopSocketDecision.MaxLength = 10
            Me.columnSopDecisionLeadPress.MaxLength = 10
            Me.columnManualCheckTE.MaxLength = 10
            Me.columnManualCheckRequestTEConfirm.MaxLength = 10
            Me.columnPkgGood.MaxLength = 10
            Me.columnPkgNG.MaxLength = 10
            Me.columnPkgGoodJudgement.MaxLength = 10
            Me.columnPkgNGJudgement.MaxLength = 10
            Me.columnPkgNishikiCamara.MaxLength = 10
            Me.columnPkgNishikiCamaraJudgement.MaxLength = 10
            Me.columnPkqBantLead.MaxLength = 10
            Me.columnPkqKakeHige.MaxLength = 10
            Me.columnBgaSmallBall.MaxLength = 10
            Me.columnBgaBentTape.MaxLength = 10
            Me.columnBge5S.MaxLength = 10
            Me.columnSetupStatus.MaxLength = 10
            Me.columnQRCodesocketChannel4.MaxLength = 30
            Me.columnTesterNoAQRcode.MaxLength = 30
            Me.columnTesterNoBQRcode.MaxLength = 30
            Me.columnChannelAFTBQRcode.MaxLength = 30
            Me.columnChannelBFTBQRcode.MaxLength = 30
            Me.columnTestBoxAQRcode.MaxLength = 30
            Me.columnTestBoxBQRcode.MaxLength = 30
            Me.columnAdaptorAQRcode.MaxLength = 30
            Me.columnAdaptorBQRcode.MaxLength = 30
            Me.columnDutcardAQRcode.MaxLength = 30
            Me.columnDutcardBQRcode.MaxLength = 30
            Me.columnBridgecableAQRcode.MaxLength = 30
            Me.columnBridgecableBQRcode.MaxLength = 30
            Me.columnQRCodesocket1.MaxLength = 30
            Me.columnQRCodesocket2.MaxLength = 30
            Me.columnQRCodesocket3.MaxLength = 30
            Me.columnQRCodesocket4.MaxLength = 30
            Me.columnQRCodesocketChannel1.MaxLength = 30
            Me.columnQRCodesocketChannel2.MaxLength = 30
            Me.columnQRCodesocketChannel3.MaxLength = 30
            Me.columnConfirmedCheckSheetOp.MaxLength = 15
            Me.columnConfirmedCheckSheetSection.MaxLength = 15
            Me.columnConfirmedShonoSection.MaxLength = 15
            Me.columnConfirmedCheckSheetGL.MaxLength = 15
            Me.columnConfirmedShonoGL.MaxLength = 15
            Me.columnConfirmedShonoOp.MaxLength = 15
            Me.columnStatusShonoOP.MaxLength = 5
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFTSetupReportRow() As FTSetupReportRow
            Return CType(Me.NewRow,FTSetupReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FTSetupReportRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FTSetupReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FTSetupReportRowChangedEvent) Is Nothing) Then
                RaiseEvent FTSetupReportRowChanged(Me, New FTSetupReportRowChangeEvent(CType(e.Row,FTSetupReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FTSetupReportRowChangingEvent) Is Nothing) Then
                RaiseEvent FTSetupReportRowChanging(Me, New FTSetupReportRowChangeEvent(CType(e.Row,FTSetupReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FTSetupReportRowDeletedEvent) Is Nothing) Then
                RaiseEvent FTSetupReportRowDeleted(Me, New FTSetupReportRowChangeEvent(CType(e.Row,FTSetupReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FTSetupReportRowDeletingEvent) Is Nothing) Then
                RaiseEvent FTSetupReportRowDeleting(Me, New FTSetupReportRowChangeEvent(CType(e.Row,FTSetupReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFTSetupReportRow(ByVal row As FTSetupReportRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DBxDataSet = New DBxDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FTSetupReportDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FTBomDataTable
        Inherits Global.System.Data.TypedTableBase(Of FTBomRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnPackageID As Global.System.Data.DataColumn
        
        Private columnFTDeviceID As Global.System.Data.DataColumn
        
        Private columnTesterTypeID As Global.System.Data.DataColumn
        
        Private columnBomTesterTypeID As Global.System.Data.DataColumn
        
        Private columnTestChannel As Global.System.Data.DataColumn
        
        Private columnTestFlowID As Global.System.Data.DataColumn
        
        Private columnBomTestFlowID As Global.System.Data.DataColumn
        
        Private columnPCMachineTypeID As Global.System.Data.DataColumn
        
        Private columnTempOfProduct As Global.System.Data.DataColumn
        
        Private columnTempOfMachine As Global.System.Data.DataColumn
        
        Private columnDSStartDate As Global.System.Data.DataColumn
        
        Private columnESStartDate As Global.System.Data.DataColumn
        
        Private columnCSSTartDate As Global.System.Data.DataColumn
        
        Private columnPLStartDate As Global.System.Data.DataColumn
        
        Private columnMPStartDate As Global.System.Data.DataColumn
        
        Private columnSocketTypeID As Global.System.Data.DataColumn
        
        Private columnTestProgram As Global.System.Data.DataColumn
        
        Private columnTestTime As Global.System.Data.DataColumn
        
        Private columnSpecialRank As Global.System.Data.DataColumn
        
        Private columnInspectionCondition As Global.System.Data.DataColumn
        
        Private columnRPM As Global.System.Data.DataColumn
        
        Private columnBoxCapa As Global.System.Data.DataColumn
        
        Private columnTotalBoxCapa As Global.System.Data.DataColumn
        
        Private columnLeadTimeOfLot As Global.System.Data.DataColumn
        
        Private columnProductionLine As Global.System.Data.DataColumn
        
        Private columnTubeTray As Global.System.Data.DataColumn
        
        Private columnEmboss As Global.System.Data.DataColumn
        
        Private columnReel As Global.System.Data.DataColumn
        
        Private columnHandlerLeadTime As Global.System.Data.DataColumn
        
        Private columnTesterLoadTime As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FTBom"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PackageIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPackageID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FTDeviceIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFTDeviceID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TesterTypeIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTesterTypeID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BomTesterTypeIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBomTesterTypeID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TestChannelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTestChannel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TestFlowIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTestFlowID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BomTestFlowIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBomTestFlowID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PCMachineTypeIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPCMachineTypeID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TempOfProductColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTempOfProduct
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TempOfMachineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTempOfMachine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DSStartDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDSStartDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ESStartDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnESStartDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CSSTartDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCSSTartDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PLStartDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPLStartDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MPStartDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMPStartDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SocketTypeIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSocketTypeID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TestProgramColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTestProgram
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TestTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTestTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SpecialRankColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSpecialRank
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InspectionConditionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInspectionCondition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RPMColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRPM
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BoxCapaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBoxCapa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalBoxCapaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalBoxCapa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LeadTimeOfLotColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLeadTimeOfLot
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProductionLineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProductionLine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TubeTrayColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTubeTray
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmbossColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmboss
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HandlerLeadTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHandlerLeadTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TesterLoadTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTesterLoadTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FTBomRow
            Get
                Return CType(Me.Rows(index),FTBomRow)
            End Get
        End Property
        
        Public Event FTBomRowChanging As FTBomRowChangeEventHandler
        
        Public Event FTBomRowChanged As FTBomRowChangeEventHandler
        
        Public Event FTBomRowDeleting As FTBomRowChangeEventHandler
        
        Public Event FTBomRowDeleted As FTBomRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFTBomRow(ByVal row As FTBomRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFTBomRow( _
                    ByVal ID As Integer,  _
                    ByVal PackageID As Integer,  _
                    ByVal FTDeviceID As Integer,  _
                    ByVal parentTesterTypeRowByFK_FTBom_TesterType As TesterTypeRow,  _
                    ByVal BomTesterTypeID As Integer,  _
                    ByVal TestChannel As Integer,  _
                    ByVal TestFlowID As Integer,  _
                    ByVal BomTestFlowID As Integer,  _
                    ByVal parentFTPCTypeRowByFK_FTBom_FTPCType As FTPCTypeRow,  _
                    ByVal TempOfProduct As Single,  _
                    ByVal TempOfMachine As Single,  _
                    ByVal DSStartDate As String,  _
                    ByVal ESStartDate As String,  _
                    ByVal CSSTartDate As String,  _
                    ByVal PLStartDate As String,  _
                    ByVal MPStartDate As String,  _
                    ByVal SocketTypeID As Integer,  _
                    ByVal TestProgram As String,  _
                    ByVal TestTime As Single,  _
                    ByVal SpecialRank As String,  _
                    ByVal InspectionCondition As String,  _
                    ByVal RPM As Single,  _
                    ByVal BoxCapa As Single,  _
                    ByVal TotalBoxCapa As Single,  _
                    ByVal LeadTimeOfLot As Single,  _
                    ByVal ProductionLine As String,  _
                    ByVal TubeTray As String,  _
                    ByVal Emboss As String,  _
                    ByVal Reel As String,  _
                    ByVal HandlerLeadTime As Single,  _
                    ByVal TesterLoadTime As Single) As FTBomRow
            Dim rowFTBomRow As FTBomRow = CType(Me.NewRow,FTBomRow)
            Dim columnValuesArray() As Object = New Object() {ID, PackageID, FTDeviceID, Nothing, BomTesterTypeID, TestChannel, TestFlowID, BomTestFlowID, Nothing, TempOfProduct, TempOfMachine, DSStartDate, ESStartDate, CSSTartDate, PLStartDate, MPStartDate, SocketTypeID, TestProgram, TestTime, SpecialRank, InspectionCondition, RPM, BoxCapa, TotalBoxCapa, LeadTimeOfLot, ProductionLine, TubeTray, Emboss, Reel, HandlerLeadTime, TesterLoadTime}
            If (Not (parentTesterTypeRowByFK_FTBom_TesterType) Is Nothing) Then
                columnValuesArray(3) = parentTesterTypeRowByFK_FTBom_TesterType(0)
            End If
            If (Not (parentFTPCTypeRowByFK_FTBom_FTPCType) Is Nothing) Then
                columnValuesArray(8) = parentFTPCTypeRowByFK_FTBom_FTPCType(0)
            End If
            rowFTBomRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFTBomRow)
            Return rowFTBomRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As Integer) As FTBomRow
            Return CType(Me.Rows.Find(New Object() {ID}),FTBomRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FTBomDataTable = CType(MyBase.Clone,FTBomDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FTBomDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnPackageID = MyBase.Columns("PackageID")
            Me.columnFTDeviceID = MyBase.Columns("FTDeviceID")
            Me.columnTesterTypeID = MyBase.Columns("TesterTypeID")
            Me.columnBomTesterTypeID = MyBase.Columns("BomTesterTypeID")
            Me.columnTestChannel = MyBase.Columns("TestChannel")
            Me.columnTestFlowID = MyBase.Columns("TestFlowID")
            Me.columnBomTestFlowID = MyBase.Columns("BomTestFlowID")
            Me.columnPCMachineTypeID = MyBase.Columns("PCMachineTypeID")
            Me.columnTempOfProduct = MyBase.Columns("TempOfProduct")
            Me.columnTempOfMachine = MyBase.Columns("TempOfMachine")
            Me.columnDSStartDate = MyBase.Columns("DSStartDate")
            Me.columnESStartDate = MyBase.Columns("ESStartDate")
            Me.columnCSSTartDate = MyBase.Columns("CSSTartDate")
            Me.columnPLStartDate = MyBase.Columns("PLStartDate")
            Me.columnMPStartDate = MyBase.Columns("MPStartDate")
            Me.columnSocketTypeID = MyBase.Columns("SocketTypeID")
            Me.columnTestProgram = MyBase.Columns("TestProgram")
            Me.columnTestTime = MyBase.Columns("TestTime")
            Me.columnSpecialRank = MyBase.Columns("SpecialRank")
            Me.columnInspectionCondition = MyBase.Columns("InspectionCondition")
            Me.columnRPM = MyBase.Columns("RPM")
            Me.columnBoxCapa = MyBase.Columns("BoxCapa")
            Me.columnTotalBoxCapa = MyBase.Columns("TotalBoxCapa")
            Me.columnLeadTimeOfLot = MyBase.Columns("LeadTimeOfLot")
            Me.columnProductionLine = MyBase.Columns("ProductionLine")
            Me.columnTubeTray = MyBase.Columns("TubeTray")
            Me.columnEmboss = MyBase.Columns("Emboss")
            Me.columnReel = MyBase.Columns("Reel")
            Me.columnHandlerLeadTime = MyBase.Columns("HandlerLeadTime")
            Me.columnTesterLoadTime = MyBase.Columns("TesterLoadTime")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnPackageID = New Global.System.Data.DataColumn("PackageID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPackageID)
            Me.columnFTDeviceID = New Global.System.Data.DataColumn("FTDeviceID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFTDeviceID)
            Me.columnTesterTypeID = New Global.System.Data.DataColumn("TesterTypeID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTesterTypeID)
            Me.columnBomTesterTypeID = New Global.System.Data.DataColumn("BomTesterTypeID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBomTesterTypeID)
            Me.columnTestChannel = New Global.System.Data.DataColumn("TestChannel", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTestChannel)
            Me.columnTestFlowID = New Global.System.Data.DataColumn("TestFlowID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTestFlowID)
            Me.columnBomTestFlowID = New Global.System.Data.DataColumn("BomTestFlowID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBomTestFlowID)
            Me.columnPCMachineTypeID = New Global.System.Data.DataColumn("PCMachineTypeID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPCMachineTypeID)
            Me.columnTempOfProduct = New Global.System.Data.DataColumn("TempOfProduct", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTempOfProduct)
            Me.columnTempOfMachine = New Global.System.Data.DataColumn("TempOfMachine", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTempOfMachine)
            Me.columnDSStartDate = New Global.System.Data.DataColumn("DSStartDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDSStartDate)
            Me.columnESStartDate = New Global.System.Data.DataColumn("ESStartDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnESStartDate)
            Me.columnCSSTartDate = New Global.System.Data.DataColumn("CSSTartDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCSSTartDate)
            Me.columnPLStartDate = New Global.System.Data.DataColumn("PLStartDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPLStartDate)
            Me.columnMPStartDate = New Global.System.Data.DataColumn("MPStartDate", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMPStartDate)
            Me.columnSocketTypeID = New Global.System.Data.DataColumn("SocketTypeID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSocketTypeID)
            Me.columnTestProgram = New Global.System.Data.DataColumn("TestProgram", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTestProgram)
            Me.columnTestTime = New Global.System.Data.DataColumn("TestTime", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTestTime)
            Me.columnSpecialRank = New Global.System.Data.DataColumn("SpecialRank", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSpecialRank)
            Me.columnInspectionCondition = New Global.System.Data.DataColumn("InspectionCondition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInspectionCondition)
            Me.columnRPM = New Global.System.Data.DataColumn("RPM", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRPM)
            Me.columnBoxCapa = New Global.System.Data.DataColumn("BoxCapa", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBoxCapa)
            Me.columnTotalBoxCapa = New Global.System.Data.DataColumn("TotalBoxCapa", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalBoxCapa)
            Me.columnLeadTimeOfLot = New Global.System.Data.DataColumn("LeadTimeOfLot", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLeadTimeOfLot)
            Me.columnProductionLine = New Global.System.Data.DataColumn("ProductionLine", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductionLine)
            Me.columnTubeTray = New Global.System.Data.DataColumn("TubeTray", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTubeTray)
            Me.columnEmboss = New Global.System.Data.DataColumn("Emboss", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmboss)
            Me.columnReel = New Global.System.Data.DataColumn("Reel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReel)
            Me.columnHandlerLeadTime = New Global.System.Data.DataColumn("HandlerLeadTime", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHandlerLeadTime)
            Me.columnTesterLoadTime = New Global.System.Data.DataColumn("TesterLoadTime", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTesterLoadTime)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnPackageID.AllowDBNull = false
            Me.columnFTDeviceID.AllowDBNull = false
            Me.columnTesterTypeID.AllowDBNull = false
            Me.columnTestChannel.AllowDBNull = false
            Me.columnTestFlowID.AllowDBNull = false
            Me.columnPCMachineTypeID.AllowDBNull = false
            Me.columnTempOfProduct.AllowDBNull = false
            Me.columnTempOfMachine.AllowDBNull = false
            Me.columnDSStartDate.MaxLength = 20
            Me.columnESStartDate.MaxLength = 20
            Me.columnCSSTartDate.MaxLength = 20
            Me.columnPLStartDate.MaxLength = 20
            Me.columnMPStartDate.MaxLength = 20
            Me.columnSocketTypeID.AllowDBNull = false
            Me.columnTestProgram.MaxLength = 50
            Me.columnSpecialRank.MaxLength = 50
            Me.columnInspectionCondition.MaxLength = 50
            Me.columnProductionLine.MaxLength = 50
            Me.columnTubeTray.MaxLength = 50
            Me.columnEmboss.MaxLength = 50
            Me.columnReel.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFTBomRow() As FTBomRow
            Return CType(Me.NewRow,FTBomRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FTBomRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FTBomRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FTBomRowChangedEvent) Is Nothing) Then
                RaiseEvent FTBomRowChanged(Me, New FTBomRowChangeEvent(CType(e.Row,FTBomRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FTBomRowChangingEvent) Is Nothing) Then
                RaiseEvent FTBomRowChanging(Me, New FTBomRowChangeEvent(CType(e.Row,FTBomRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FTBomRowDeletedEvent) Is Nothing) Then
                RaiseEvent FTBomRowDeleted(Me, New FTBomRowChangeEvent(CType(e.Row,FTBomRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FTBomRowDeletingEvent) Is Nothing) Then
                RaiseEvent FTBomRowDeleting(Me, New FTBomRowChangeEvent(CType(e.Row,FTBomRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFTBomRow(ByVal row As FTBomRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DBxDataSet = New DBxDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FTBomDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FTBomOptionDataTable
        Inherits Global.System.Data.TypedTableBase(Of FTBomOptionRow)
        
        Private columnFTBomID As Global.System.Data.DataColumn
        
        Private columnOptionTypeID As Global.System.Data.DataColumn
        
        Private columnQuantity As Global.System.Data.DataColumn
        
        Private columnSetting As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FTBomOption"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FTBomIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFTBomID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OptionTypeIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOptionTypeID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QuantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuantity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SettingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSetting
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FTBomOptionRow
            Get
                Return CType(Me.Rows(index),FTBomOptionRow)
            End Get
        End Property
        
        Public Event FTBomOptionRowChanging As FTBomOptionRowChangeEventHandler
        
        Public Event FTBomOptionRowChanged As FTBomOptionRowChangeEventHandler
        
        Public Event FTBomOptionRowDeleting As FTBomOptionRowChangeEventHandler
        
        Public Event FTBomOptionRowDeleted As FTBomOptionRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFTBomOptionRow(ByVal row As FTBomOptionRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFTBomOptionRow(ByVal parentFTBomRowByFK_FTBomOption_FTBom As FTBomRow, ByVal OptionTypeID As Integer, ByVal Quantity As Integer, ByVal Setting As String) As FTBomOptionRow
            Dim rowFTBomOptionRow As FTBomOptionRow = CType(Me.NewRow,FTBomOptionRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, OptionTypeID, Quantity, Setting}
            If (Not (parentFTBomRowByFK_FTBomOption_FTBom) Is Nothing) Then
                columnValuesArray(0) = parentFTBomRowByFK_FTBomOption_FTBom(0)
            End If
            rowFTBomOptionRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFTBomOptionRow)
            Return rowFTBomOptionRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFTBomIDOptionTypeID(ByVal FTBomID As Integer, ByVal OptionTypeID As Integer) As FTBomOptionRow
            Return CType(Me.Rows.Find(New Object() {FTBomID, OptionTypeID}),FTBomOptionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FTBomOptionDataTable = CType(MyBase.Clone,FTBomOptionDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FTBomOptionDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFTBomID = MyBase.Columns("FTBomID")
            Me.columnOptionTypeID = MyBase.Columns("OptionTypeID")
            Me.columnQuantity = MyBase.Columns("Quantity")
            Me.columnSetting = MyBase.Columns("Setting")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFTBomID = New Global.System.Data.DataColumn("FTBomID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFTBomID)
            Me.columnOptionTypeID = New Global.System.Data.DataColumn("OptionTypeID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOptionTypeID)
            Me.columnQuantity = New Global.System.Data.DataColumn("Quantity", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuantity)
            Me.columnSetting = New Global.System.Data.DataColumn("Setting", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSetting)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFTBomID, Me.columnOptionTypeID}, true))
            Me.columnFTBomID.AllowDBNull = false
            Me.columnOptionTypeID.AllowDBNull = false
            Me.columnQuantity.AllowDBNull = false
            Me.columnSetting.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFTBomOptionRow() As FTBomOptionRow
            Return CType(Me.NewRow,FTBomOptionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FTBomOptionRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FTBomOptionRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FTBomOptionRowChangedEvent) Is Nothing) Then
                RaiseEvent FTBomOptionRowChanged(Me, New FTBomOptionRowChangeEvent(CType(e.Row,FTBomOptionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FTBomOptionRowChangingEvent) Is Nothing) Then
                RaiseEvent FTBomOptionRowChanging(Me, New FTBomOptionRowChangeEvent(CType(e.Row,FTBomOptionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FTBomOptionRowDeletedEvent) Is Nothing) Then
                RaiseEvent FTBomOptionRowDeleted(Me, New FTBomOptionRowChangeEvent(CType(e.Row,FTBomOptionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FTBomOptionRowDeletingEvent) Is Nothing) Then
                RaiseEvent FTBomOptionRowDeleting(Me, New FTBomOptionRowChangeEvent(CType(e.Row,FTBomOptionRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFTBomOptionRow(ByVal row As FTBomOptionRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DBxDataSet = New DBxDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FTBomOptionDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FTBomTestEquipmentDataTable
        Inherits Global.System.Data.TypedTableBase(Of FTBomTestEquipmentRow)
        
        Private columnFTBomID As Global.System.Data.DataColumn
        
        Private columnTestEquipmentID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FTBomTestEquipment"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FTBomIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFTBomID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TestEquipmentIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTestEquipmentID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FTBomTestEquipmentRow
            Get
                Return CType(Me.Rows(index),FTBomTestEquipmentRow)
            End Get
        End Property
        
        Public Event FTBomTestEquipmentRowChanging As FTBomTestEquipmentRowChangeEventHandler
        
        Public Event FTBomTestEquipmentRowChanged As FTBomTestEquipmentRowChangeEventHandler
        
        Public Event FTBomTestEquipmentRowDeleting As FTBomTestEquipmentRowChangeEventHandler
        
        Public Event FTBomTestEquipmentRowDeleted As FTBomTestEquipmentRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFTBomTestEquipmentRow(ByVal row As FTBomTestEquipmentRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFTBomTestEquipmentRow(ByVal parentFTBomRowByFK_FTBomTestEquipment_FTBom As FTBomRow, ByVal TestEquipmentID As Integer) As FTBomTestEquipmentRow
            Dim rowFTBomTestEquipmentRow As FTBomTestEquipmentRow = CType(Me.NewRow,FTBomTestEquipmentRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, TestEquipmentID}
            If (Not (parentFTBomRowByFK_FTBomTestEquipment_FTBom) Is Nothing) Then
                columnValuesArray(0) = parentFTBomRowByFK_FTBomTestEquipment_FTBom(0)
            End If
            rowFTBomTestEquipmentRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFTBomTestEquipmentRow)
            Return rowFTBomTestEquipmentRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByFTBomIDTestEquipmentID(ByVal FTBomID As Integer, ByVal TestEquipmentID As Integer) As FTBomTestEquipmentRow
            Return CType(Me.Rows.Find(New Object() {FTBomID, TestEquipmentID}),FTBomTestEquipmentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FTBomTestEquipmentDataTable = CType(MyBase.Clone,FTBomTestEquipmentDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FTBomTestEquipmentDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFTBomID = MyBase.Columns("FTBomID")
            Me.columnTestEquipmentID = MyBase.Columns("TestEquipmentID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFTBomID = New Global.System.Data.DataColumn("FTBomID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFTBomID)
            Me.columnTestEquipmentID = New Global.System.Data.DataColumn("TestEquipmentID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTestEquipmentID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFTBomID, Me.columnTestEquipmentID}, true))
            Me.columnFTBomID.AllowDBNull = false
            Me.columnTestEquipmentID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFTBomTestEquipmentRow() As FTBomTestEquipmentRow
            Return CType(Me.NewRow,FTBomTestEquipmentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FTBomTestEquipmentRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FTBomTestEquipmentRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FTBomTestEquipmentRowChangedEvent) Is Nothing) Then
                RaiseEvent FTBomTestEquipmentRowChanged(Me, New FTBomTestEquipmentRowChangeEvent(CType(e.Row,FTBomTestEquipmentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FTBomTestEquipmentRowChangingEvent) Is Nothing) Then
                RaiseEvent FTBomTestEquipmentRowChanging(Me, New FTBomTestEquipmentRowChangeEvent(CType(e.Row,FTBomTestEquipmentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FTBomTestEquipmentRowDeletedEvent) Is Nothing) Then
                RaiseEvent FTBomTestEquipmentRowDeleted(Me, New FTBomTestEquipmentRowChangeEvent(CType(e.Row,FTBomTestEquipmentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FTBomTestEquipmentRowDeletingEvent) Is Nothing) Then
                RaiseEvent FTBomTestEquipmentRowDeleting(Me, New FTBomTestEquipmentRowChangeEvent(CType(e.Row,FTBomTestEquipmentRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFTBomTestEquipmentRow(ByVal row As FTBomTestEquipmentRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DBxDataSet = New DBxDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FTBomTestEquipmentDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class TempDataDataTable
        Inherits Global.System.Data.TypedTableBase(Of TempDataRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnQRCode As Global.System.Data.DataColumn
        
        Private columnQRCodeByUser As Global.System.Data.DataColumn
        
        Private columnSubTypeID As Global.System.Data.DataColumn
        
        Private columnRegistrationDate As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnStorageID As Global.System.Data.DataColumn
        
        Private columnPeriodCheckTime As Global.System.Data.DataColumn
        
        Private columnLifeTime As Global.System.Data.DataColumn
        
        Private columnSmallCode As Global.System.Data.DataColumn
        
        Private columnMCNo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "TempData"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QRCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQRCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QRCodeByUserColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQRCodeByUser
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubTypeIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubTypeID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RegistrationDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRegistrationDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StorageIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStorageID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PeriodCheckTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPeriodCheckTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LifeTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLifeTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SmallCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSmallCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MCNoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMCNo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As TempDataRow
            Get
                Return CType(Me.Rows(index),TempDataRow)
            End Get
        End Property
        
        Public Event TempDataRowChanging As TempDataRowChangeEventHandler
        
        Public Event TempDataRowChanged As TempDataRowChangeEventHandler
        
        Public Event TempDataRowDeleting As TempDataRowChangeEventHandler
        
        Public Event TempDataRowDeleted As TempDataRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddTempDataRow(ByVal row As TempDataRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddTempDataRow(ByVal QRCode As String, ByVal QRCodeByUser As String, ByVal SubTypeID As Integer, ByVal RegistrationDate As Date, ByVal Status As String, ByVal StorageID As Integer, ByVal PeriodCheckTime As Integer, ByVal LifeTime As Integer, ByVal SmallCode As String, ByVal MCNo As String) As TempDataRow
            Dim rowTempDataRow As TempDataRow = CType(Me.NewRow,TempDataRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, QRCode, QRCodeByUser, SubTypeID, RegistrationDate, Status, StorageID, PeriodCheckTime, LifeTime, SmallCode, MCNo}
            rowTempDataRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowTempDataRow)
            Return rowTempDataRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As Integer) As TempDataRow
            Return CType(Me.Rows.Find(New Object() {ID}),TempDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As TempDataDataTable = CType(MyBase.Clone,TempDataDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New TempDataDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnQRCode = MyBase.Columns("QRCode")
            Me.columnQRCodeByUser = MyBase.Columns("QRCodeByUser")
            Me.columnSubTypeID = MyBase.Columns("SubTypeID")
            Me.columnRegistrationDate = MyBase.Columns("RegistrationDate")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnStorageID = MyBase.Columns("StorageID")
            Me.columnPeriodCheckTime = MyBase.Columns("PeriodCheckTime")
            Me.columnLifeTime = MyBase.Columns("LifeTime")
            Me.columnSmallCode = MyBase.Columns("SmallCode")
            Me.columnMCNo = MyBase.Columns("MCNo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnQRCode = New Global.System.Data.DataColumn("QRCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQRCode)
            Me.columnQRCodeByUser = New Global.System.Data.DataColumn("QRCodeByUser", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQRCodeByUser)
            Me.columnSubTypeID = New Global.System.Data.DataColumn("SubTypeID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubTypeID)
            Me.columnRegistrationDate = New Global.System.Data.DataColumn("RegistrationDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRegistrationDate)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnStorageID = New Global.System.Data.DataColumn("StorageID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStorageID)
            Me.columnPeriodCheckTime = New Global.System.Data.DataColumn("PeriodCheckTime", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPeriodCheckTime)
            Me.columnLifeTime = New Global.System.Data.DataColumn("LifeTime", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLifeTime)
            Me.columnSmallCode = New Global.System.Data.DataColumn("SmallCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSmallCode)
            Me.columnMCNo = New Global.System.Data.DataColumn("MCNo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMCNo)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AutoIncrement = true
            Me.columnID.AutoIncrementSeed = -1
            Me.columnID.AutoIncrementStep = -1
            Me.columnID.AllowDBNull = false
            Me.columnID.ReadOnly = true
            Me.columnID.Unique = true
            Me.columnQRCode.ReadOnly = true
            Me.columnQRCode.MaxLength = 9
            Me.columnQRCodeByUser.MaxLength = 50
            Me.columnStatus.MaxLength = 50
            Me.columnSmallCode.ReadOnly = true
            Me.columnSmallCode.MaxLength = 4
            Me.columnMCNo.MaxLength = 10
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewTempDataRow() As TempDataRow
            Return CType(Me.NewRow,TempDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New TempDataRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(TempDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TempDataRowChangedEvent) Is Nothing) Then
                RaiseEvent TempDataRowChanged(Me, New TempDataRowChangeEvent(CType(e.Row,TempDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TempDataRowChangingEvent) Is Nothing) Then
                RaiseEvent TempDataRowChanging(Me, New TempDataRowChangeEvent(CType(e.Row,TempDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TempDataRowDeletedEvent) Is Nothing) Then
                RaiseEvent TempDataRowDeleted(Me, New TempDataRowChangeEvent(CType(e.Row,TempDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TempDataRowDeletingEvent) Is Nothing) Then
                RaiseEvent TempDataRowDeleting(Me, New TempDataRowChangeEvent(CType(e.Row,TempDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveTempDataRow(ByVal row As TempDataRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DBxDataSet = New DBxDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TempDataDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class FTPCTypeDataTable
        Inherits Global.System.Data.TypedTableBase(Of FTPCTypeRow)
        
        Private columnID As Global.System.Data.DataColumn
        
        Private columnPCType As Global.System.Data.DataColumn
        
        Private columnPCMain As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "FTPCType"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PCTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPCType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PCMainColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPCMain
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As FTPCTypeRow
            Get
                Return CType(Me.Rows(index),FTPCTypeRow)
            End Get
        End Property
        
        Public Event FTPCTypeRowChanging As FTPCTypeRowChangeEventHandler
        
        Public Event FTPCTypeRowChanged As FTPCTypeRowChangeEventHandler
        
        Public Event FTPCTypeRowDeleting As FTPCTypeRowChangeEventHandler
        
        Public Event FTPCTypeRowDeleted As FTPCTypeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddFTPCTypeRow(ByVal row As FTPCTypeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddFTPCTypeRow(ByVal ID As Integer, ByVal PCType As String, ByVal PCMain As String) As FTPCTypeRow
            Dim rowFTPCTypeRow As FTPCTypeRow = CType(Me.NewRow,FTPCTypeRow)
            Dim columnValuesArray() As Object = New Object() {ID, PCType, PCMain}
            rowFTPCTypeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowFTPCTypeRow)
            Return rowFTPCTypeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByID(ByVal ID As Integer) As FTPCTypeRow
            Return CType(Me.Rows.Find(New Object() {ID}),FTPCTypeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As FTPCTypeDataTable = CType(MyBase.Clone,FTPCTypeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New FTPCTypeDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnPCType = MyBase.Columns("PCType")
            Me.columnPCMain = MyBase.Columns("PCMain")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnPCType = New Global.System.Data.DataColumn("PCType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPCType)
            Me.columnPCMain = New Global.System.Data.DataColumn("PCMain", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPCMain)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnID}, true))
            Me.columnID.AllowDBNull = false
            Me.columnID.Unique = true
            Me.columnPCType.AllowDBNull = false
            Me.columnPCType.MaxLength = 50
            Me.columnPCMain.AllowDBNull = false
            Me.columnPCMain.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewFTPCTypeRow() As FTPCTypeRow
            Return CType(Me.NewRow,FTPCTypeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New FTPCTypeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(FTPCTypeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FTPCTypeRowChangedEvent) Is Nothing) Then
                RaiseEvent FTPCTypeRowChanged(Me, New FTPCTypeRowChangeEvent(CType(e.Row,FTPCTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FTPCTypeRowChangingEvent) Is Nothing) Then
                RaiseEvent FTPCTypeRowChanging(Me, New FTPCTypeRowChangeEvent(CType(e.Row,FTPCTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FTPCTypeRowDeletedEvent) Is Nothing) Then
                RaiseEvent FTPCTypeRowDeleted(Me, New FTPCTypeRowChangeEvent(CType(e.Row,FTPCTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FTPCTypeRowDeletingEvent) Is Nothing) Then
                RaiseEvent FTPCTypeRowDeleting(Me, New FTPCTypeRowChangeEvent(CType(e.Row,FTPCTypeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveFTPCTypeRow(ByVal row As FTPCTypeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As DBxDataSet = New DBxDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FTPCTypeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class UkebaraiDataRow
        Inherits Global.System.Data.DataRow
        
        Private tableUkebaraiData As UkebaraiDataDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableUkebaraiData = CType(Me.Table,UkebaraiDataDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DBxProcessID() As Integer
            Get
                Return CType(Me(Me.tableUkebaraiData.DBxProcessIDColumn),Integer)
            End Get
            Set
                Me(Me.tableUkebaraiData.DBxProcessIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DBxLotNo() As String
            Get
                Return CType(Me(Me.tableUkebaraiData.DBxLotNoColumn),String)
            End Get
            Set
                Me(Me.tableUkebaraiData.DBxLotNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DBxMCNo() As String
            Get
                Return CType(Me(Me.tableUkebaraiData.DBxMCNoColumn),String)
            End Get
            Set
                Me(Me.tableUkebaraiData.DBxMCNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DBxLotStartTime() As Date
            Get
                Return CType(Me(Me.tableUkebaraiData.DBxLotStartTimeColumn),Date)
            End Get
            Set
                Me(Me.tableUkebaraiData.DBxLotStartTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DBxLotEndTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableUkebaraiData.DBxLotEndTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DBxLotEndTime' in table 'UkebaraiData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUkebaraiData.DBxLotEndTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LotNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableUkebaraiData.LotNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LotNo' in table 'UkebaraiData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUkebaraiData.LotNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Process_No() As String
            Get
                Try 
                    Return CType(Me(Me.tableUkebaraiData.Process_NoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Process_No' in table 'UkebaraiData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUkebaraiData.Process_NoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Date() As String
            Get
                Try 
                    Return CType(Me(Me.tableUkebaraiData.DateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Date' in table 'UkebaraiData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUkebaraiData.DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Time() As String
            Get
                Try 
                    Return CType(Me(Me.tableUkebaraiData.TimeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Time' in table 'UkebaraiData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUkebaraiData.TimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Good_Qty() As String
            Get
                Try 
                    Return CType(Me(Me.tableUkebaraiData.Good_QtyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Good_Qty' in table 'UkebaraiData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUkebaraiData.Good_QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NG_Qty() As String
            Get
                Try 
                    Return CType(Me(Me.tableUkebaraiData.NG_QtyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NG_Qty' in table 'UkebaraiData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUkebaraiData.NG_QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDBxLotEndTimeNull() As Boolean
            Return Me.IsNull(Me.tableUkebaraiData.DBxLotEndTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDBxLotEndTimeNull()
            Me(Me.tableUkebaraiData.DBxLotEndTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLotNoNull() As Boolean
            Return Me.IsNull(Me.tableUkebaraiData.LotNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLotNoNull()
            Me(Me.tableUkebaraiData.LotNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProcess_NoNull() As Boolean
            Return Me.IsNull(Me.tableUkebaraiData.Process_NoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProcess_NoNull()
            Me(Me.tableUkebaraiData.Process_NoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_DateNull() As Boolean
            Return Me.IsNull(Me.tableUkebaraiData.DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_DateNull()
            Me(Me.tableUkebaraiData.DateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTimeNull() As Boolean
            Return Me.IsNull(Me.tableUkebaraiData.TimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTimeNull()
            Me(Me.tableUkebaraiData.TimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGood_QtyNull() As Boolean
            Return Me.IsNull(Me.tableUkebaraiData.Good_QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGood_QtyNull()
            Me(Me.tableUkebaraiData.Good_QtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNG_QtyNull() As Boolean
            Return Me.IsNull(Me.tableUkebaraiData.NG_QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNG_QtyNull()
            Me(Me.tableUkebaraiData.NG_QtyColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FTAlarmInfoRow
        Inherits Global.System.Data.DataRow
        
        Private tableFTAlarmInfo As FTAlarmInfoDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFTAlarmInfo = CType(Me.Table,FTAlarmInfoDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableFTAlarmInfo.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableFTAlarmInfo.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RecordTime() As Date
            Get
                Return CType(Me(Me.tableFTAlarmInfo.RecordTimeColumn),Date)
            End Get
            Set
                Me(Me.tableFTAlarmInfo.RecordTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AlarmID() As Integer
            Get
                Return CType(Me(Me.tableFTAlarmInfo.AlarmIDColumn),Integer)
            End Get
            Set
                Me(Me.tableFTAlarmInfo.AlarmIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LotNo() As String
            Get
                Return CType(Me(Me.tableFTAlarmInfo.LotNoColumn),String)
            End Get
            Set
                Me(Me.tableFTAlarmInfo.LotNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MCNo() As String
            Get
                Return CType(Me(Me.tableFTAlarmInfo.MCNoColumn),String)
            End Get
            Set
                Me(Me.tableFTAlarmInfo.MCNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFTAlarmInfo.ClearTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClearTime' in table 'FTAlarmInfo' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTAlarmInfo.ClearTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FTAlarmTableRow() As FTAlarmTableRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_FTAlarmInfo_FTAlarmTable")),FTAlarmTableRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_FTAlarmInfo_FTAlarmTable"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClearTimeNull() As Boolean
            Return Me.IsNull(Me.tableFTAlarmInfo.ClearTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClearTimeNull()
            Me(Me.tableFTAlarmInfo.ClearTimeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FTAlarmTableRow
        Inherits Global.System.Data.DataRow
        
        Private tableFTAlarmTable As FTAlarmTableDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFTAlarmTable = CType(Me.Table,FTAlarmTableDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableFTAlarmTable.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableFTAlarmTable.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AlarmNo() As String
            Get
                Return CType(Me(Me.tableFTAlarmTable.AlarmNoColumn),String)
            End Get
            Set
                Me(Me.tableFTAlarmTable.AlarmNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MachineType() As String
            Get
                Return CType(Me(Me.tableFTAlarmTable.MachineTypeColumn),String)
            End Get
            Set
                Me(Me.tableFTAlarmTable.MachineTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AlarmType() As String
            Get
                Return CType(Me(Me.tableFTAlarmTable.AlarmTypeColumn),String)
            End Get
            Set
                Me(Me.tableFTAlarmTable.AlarmTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AlarmMessage() As String
            Get
                Return CType(Me(Me.tableFTAlarmTable.AlarmMessageColumn),String)
            End Get
            Set
                Me(Me.tableFTAlarmTable.AlarmMessageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetFTAlarmInfoRows() As FTAlarmInfoRow()
            If (Me.Table.ChildRelations("FK_FTAlarmInfo_FTAlarmTable") Is Nothing) Then
                Return New FTAlarmInfoRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_FTAlarmInfo_FTAlarmTable")),FTAlarmInfoRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FTDataRow
        Inherits Global.System.Data.DataRow
        
        Private tableFTData As FTDataDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFTData = CType(Me.Table,FTDataDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MCNo() As String
            Get
                Return CType(Me(Me.tableFTData.MCNoColumn),String)
            End Get
            Set
                Me(Me.tableFTData.MCNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LotNo() As String
            Get
                Return CType(Me(Me.tableFTData.LotNoColumn),String)
            End Get
            Set
                Me(Me.tableFTData.LotNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LotStartTime() As Date
            Get
                Return CType(Me(Me.tableFTData.LotStartTimeColumn),Date)
            End Get
            Set
                Me(Me.tableFTData.LotStartTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MCType() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTData.MCTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MCType' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.MCTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTData.OPNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OPNo' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.OPNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPRate() As Single
            Get
                Try 
                    Return CType(Me(Me.tableFTData.OPRateColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OPRate' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.OPRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MaximumRPM() As Single
            Get
                Try 
                    Return CType(Me(Me.tableFTData.MaximumRPMColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MaximumRPM' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.MaximumRPMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AverageRPM() As Single
            Get
                Try 
                    Return CType(Me(Me.tableFTData.AverageRPMColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AverageRPM' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.AverageRPMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MTBF() As Single
            Get
                Try 
                    Return CType(Me(Me.tableFTData.MTBFColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MTBF' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.MTBFColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MTTR() As Single
            Get
                Try 
                    Return CType(Me(Me.tableFTData.MTTRColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MTTR' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.MTTRColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AlarmTotal() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFTData.AlarmTotalColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AlarmTotal' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.AlarmTotalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LotEndTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFTData.LotEndTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LotEndTime' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.LotEndTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RunTime() As Single
            Get
                Try 
                    Return CType(Me(Me.tableFTData.RunTimeColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RunTime' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.RunTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StopTime() As Single
            Get
                Try 
                    Return CType(Me(Me.tableFTData.StopTimeColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StopTime' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.StopTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AlarmTime() As Single
            Get
                Try 
                    Return CType(Me(Me.tableFTData.AlarmTimeColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AlarmTime' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.AlarmTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EndOPNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTData.EndOPNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EndOPNo' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.EndOPNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TestTemperature() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTData.TestTemperatureColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TestTemperature' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.TestTemperatureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProgramName() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTData.ProgramNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProgramName' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.ProgramNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TestFlowName() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTData.TestFlowNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TestFlowName' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.TestFlowNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ChannelATesterNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTData.ChannelATesterNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ChannelATesterNo' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.ChannelATesterNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ChannelBTesterNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTData.ChannelBTesterNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ChannelBTesterNo' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.ChannelBTesterNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BoxName() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTData.BoxNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BoxName' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.BoxNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ChannelATestBoxNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTData.ChannelATestBoxNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ChannelATestBoxNo' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.ChannelATestBoxNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ChannelBTestBoxNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTData.ChannelBTestBoxNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ChannelBTestBoxNo' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.ChannelBTestBoxNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SocketCheck() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTData.SocketCheckColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SocketCheck' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.SocketCheckColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GoodSampleQty() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFTData.GoodSampleQtyColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GoodSampleQty' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.GoodSampleQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NGSampleQty() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFTData.NGSampleQtyColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NGSampleQty' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.NGSampleQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LotJudgement() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTData.LotJudgementColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LotJudgement' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.LotJudgementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Remark() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTData.RemarkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Remark' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.RemarkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GLCheck() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTData.GLCheckColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GLCheck' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.GLCheckColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TesterType() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTData.TesterTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TesterType' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.TesterTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LCL() As Single
            Get
                Try 
                    Return CType(Me(Me.tableFTData.LCLColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LCL' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.LCLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InitialYield() As Single
            Get
                Try 
                    Return CType(Me(Me.tableFTData.InitialYieldColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InitialYield' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.InitialYieldColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstEndYield() As Single
            Get
                Try 
                    Return CType(Me(Me.tableFTData.FirstEndYieldColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstEndYield' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.FirstEndYieldColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FinalYield() As Single
            Get
                Try 
                    Return CType(Me(Me.tableFTData.FinalYieldColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FinalYield' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.FinalYieldColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MarkingInspection() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableFTData.MarkingInspectionColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MarkingInspection' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.MarkingInspectionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LotStartVisualInspectNGQty() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFTData.LotStartVisualInspectNGQtyColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LotStartVisualInspectNGQty' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.LotStartVisualInspectNGQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LotStartVisualInspectTotalQty() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFTData.LotStartVisualInspectTotalQtyColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LotStartVisualInspectTotalQty' in table 'FTData' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.LotStartVisualInspectTotalQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LotEndVisualInspectNGQty() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFTData.LotEndVisualInspectNGQtyColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LotEndVisualInspectNGQty' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.LotEndVisualInspectNGQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LotEndVisualInspectTotalQty() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFTData.LotEndVisualInspectTotalQtyColumn),Short)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LotEndVisualInspectTotalQty' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.LotEndVisualInspectTotalQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DuringProductionCheck() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTData.DuringProductionCheckColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DuringProductionCheck' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.DuringProductionCheckColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstAutoAsiCheck() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableFTData.FirstAutoAsiCheckColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstAutoAsiCheck' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.FirstAutoAsiCheckColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SecondAutoAsiCheck() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableFTData.SecondAutoAsiCheckColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SecondAutoAsiCheck' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.SecondAutoAsiCheckColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SocketChange() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableFTData.SocketChangeColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SocketChange' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.SocketChangeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InputQty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFTData.InputQtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InputQty' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.InputQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalGood() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFTData.TotalGoodColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalGood' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.TotalGoodColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalNG() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFTData.TotalNGColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalNG' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.TotalNGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstMeka1Qty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFTData.FirstMeka1QtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstMeka1Qty' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.FirstMeka1QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstMeka2Qty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFTData.FirstMeka2QtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstMeka2Qty' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.FirstMeka2QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstNGQty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFTData.FirstNGQtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstNGQty' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.FirstNGQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstUnknowQty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFTData.FirstUnknowQtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstUnknowQty' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.FirstUnknowQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HandlerCounterQty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFTData.HandlerCounterQtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HandlerCounterQty' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.HandlerCounterQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SecondMeka1Qty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFTData.SecondMeka1QtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SecondMeka1Qty' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.SecondMeka1QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SecondMeka4Qty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFTData.SecondMeka4QtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SecondMeka4Qty' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.SecondMeka4QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SecondNGQty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFTData.SecondNGQtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SecondNGQty' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.SecondNGQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SecondUnknowQty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFTData.SecondUnknowQtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SecondUnknowQty' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.SecondUnknowQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TesterACounterQty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFTData.TesterACounterQtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TesterACounterQty' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.TesterACounterQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TesterBCounterQty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFTData.TesterBCounterQtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TesterBCounterQty' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.TesterBCounterQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalMeka1Qty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFTData.TotalMeka1QtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalMeka1Qty' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.TotalMeka1QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalMeka2Qty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFTData.TotalMeka2QtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalMeka2Qty' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.TotalMeka2QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalMeka4Qty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFTData.TotalMeka4QtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalMeka4Qty' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.TotalMeka4QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalUnknowQty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFTData.TotalUnknowQtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalUnknowQty' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.TotalUnknowQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstGoodBin1Qty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFTData.FirstGoodBin1QtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstGoodBin1Qty' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.FirstGoodBin1QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstGoodBin2Qty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFTData.FirstGoodBin2QtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstGoodBin2Qty' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.FirstGoodBin2QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SecondGoodBin1Qty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFTData.SecondGoodBin1QtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SecondGoodBin1Qty' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.SecondGoodBin1QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SecondGoodBin2Qty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFTData.SecondGoodBin2QtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SecondGoodBin2Qty' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.SecondGoodBin2QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalGoodBin1Qty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFTData.TotalGoodBin1QtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalGoodBin1Qty' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.TotalGoodBin1QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalGoodBin2Qty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFTData.TotalGoodBin2QtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalGoodBin2Qty' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.TotalGoodBin2QtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalNGQty() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFTData.TotalNGQtyColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalNGQty' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.TotalNGQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SocketNumCh1() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTData.SocketNumCh1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SocketNumCh1' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.SocketNumCh1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SocketNumCh2() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTData.SocketNumCh2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SocketNumCh2' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.SocketNumCh2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SocketNumCh3() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTData.SocketNumCh3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SocketNumCh3' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.SocketNumCh3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SocketNumCh4() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTData.SocketNumCh4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SocketNumCh4' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.SocketNumCh4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ChangedSocketNumCh1() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTData.ChangedSocketNumCh1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ChangedSocketNumCh1' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.ChangedSocketNumCh1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ChangedSocketNumCh2() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTData.ChangedSocketNumCh2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ChangedSocketNumCh2' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.ChangedSocketNumCh2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ChangedSocketNumCh3() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTData.ChangedSocketNumCh3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ChangedSocketNumCh3' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.ChangedSocketNumCh3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ChangedSocketNumCh4() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTData.ChangedSocketNumCh4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ChangedSocketNumCh4' in table 'FTData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTData.ChangedSocketNumCh4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TransactionDataRow() As TransactionDataRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_FTData_TransactionData")),TransactionDataRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_FTData_TransactionData"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMCTypeNull() As Boolean
            Return Me.IsNull(Me.tableFTData.MCTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMCTypeNull()
            Me(Me.tableFTData.MCTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOPNoNull() As Boolean
            Return Me.IsNull(Me.tableFTData.OPNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOPNoNull()
            Me(Me.tableFTData.OPNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOPRateNull() As Boolean
            Return Me.IsNull(Me.tableFTData.OPRateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOPRateNull()
            Me(Me.tableFTData.OPRateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaximumRPMNull() As Boolean
            Return Me.IsNull(Me.tableFTData.MaximumRPMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaximumRPMNull()
            Me(Me.tableFTData.MaximumRPMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAverageRPMNull() As Boolean
            Return Me.IsNull(Me.tableFTData.AverageRPMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAverageRPMNull()
            Me(Me.tableFTData.AverageRPMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMTBFNull() As Boolean
            Return Me.IsNull(Me.tableFTData.MTBFColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMTBFNull()
            Me(Me.tableFTData.MTBFColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMTTRNull() As Boolean
            Return Me.IsNull(Me.tableFTData.MTTRColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMTTRNull()
            Me(Me.tableFTData.MTTRColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAlarmTotalNull() As Boolean
            Return Me.IsNull(Me.tableFTData.AlarmTotalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAlarmTotalNull()
            Me(Me.tableFTData.AlarmTotalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLotEndTimeNull() As Boolean
            Return Me.IsNull(Me.tableFTData.LotEndTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLotEndTimeNull()
            Me(Me.tableFTData.LotEndTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRunTimeNull() As Boolean
            Return Me.IsNull(Me.tableFTData.RunTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRunTimeNull()
            Me(Me.tableFTData.RunTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStopTimeNull() As Boolean
            Return Me.IsNull(Me.tableFTData.StopTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStopTimeNull()
            Me(Me.tableFTData.StopTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAlarmTimeNull() As Boolean
            Return Me.IsNull(Me.tableFTData.AlarmTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAlarmTimeNull()
            Me(Me.tableFTData.AlarmTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEndOPNoNull() As Boolean
            Return Me.IsNull(Me.tableFTData.EndOPNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEndOPNoNull()
            Me(Me.tableFTData.EndOPNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTestTemperatureNull() As Boolean
            Return Me.IsNull(Me.tableFTData.TestTemperatureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTestTemperatureNull()
            Me(Me.tableFTData.TestTemperatureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProgramNameNull() As Boolean
            Return Me.IsNull(Me.tableFTData.ProgramNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProgramNameNull()
            Me(Me.tableFTData.ProgramNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTestFlowNameNull() As Boolean
            Return Me.IsNull(Me.tableFTData.TestFlowNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTestFlowNameNull()
            Me(Me.tableFTData.TestFlowNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsChannelATesterNoNull() As Boolean
            Return Me.IsNull(Me.tableFTData.ChannelATesterNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetChannelATesterNoNull()
            Me(Me.tableFTData.ChannelATesterNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsChannelBTesterNoNull() As Boolean
            Return Me.IsNull(Me.tableFTData.ChannelBTesterNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetChannelBTesterNoNull()
            Me(Me.tableFTData.ChannelBTesterNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBoxNameNull() As Boolean
            Return Me.IsNull(Me.tableFTData.BoxNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBoxNameNull()
            Me(Me.tableFTData.BoxNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsChannelATestBoxNoNull() As Boolean
            Return Me.IsNull(Me.tableFTData.ChannelATestBoxNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetChannelATestBoxNoNull()
            Me(Me.tableFTData.ChannelATestBoxNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsChannelBTestBoxNoNull() As Boolean
            Return Me.IsNull(Me.tableFTData.ChannelBTestBoxNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetChannelBTestBoxNoNull()
            Me(Me.tableFTData.ChannelBTestBoxNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSocketCheckNull() As Boolean
            Return Me.IsNull(Me.tableFTData.SocketCheckColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSocketCheckNull()
            Me(Me.tableFTData.SocketCheckColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGoodSampleQtyNull() As Boolean
            Return Me.IsNull(Me.tableFTData.GoodSampleQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGoodSampleQtyNull()
            Me(Me.tableFTData.GoodSampleQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNGSampleQtyNull() As Boolean
            Return Me.IsNull(Me.tableFTData.NGSampleQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNGSampleQtyNull()
            Me(Me.tableFTData.NGSampleQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLotJudgementNull() As Boolean
            Return Me.IsNull(Me.tableFTData.LotJudgementColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLotJudgementNull()
            Me(Me.tableFTData.LotJudgementColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRemarkNull() As Boolean
            Return Me.IsNull(Me.tableFTData.RemarkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRemarkNull()
            Me(Me.tableFTData.RemarkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGLCheckNull() As Boolean
            Return Me.IsNull(Me.tableFTData.GLCheckColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGLCheckNull()
            Me(Me.tableFTData.GLCheckColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTesterTypeNull() As Boolean
            Return Me.IsNull(Me.tableFTData.TesterTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTesterTypeNull()
            Me(Me.tableFTData.TesterTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLCLNull() As Boolean
            Return Me.IsNull(Me.tableFTData.LCLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLCLNull()
            Me(Me.tableFTData.LCLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInitialYieldNull() As Boolean
            Return Me.IsNull(Me.tableFTData.InitialYieldColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInitialYieldNull()
            Me(Me.tableFTData.InitialYieldColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstEndYieldNull() As Boolean
            Return Me.IsNull(Me.tableFTData.FirstEndYieldColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstEndYieldNull()
            Me(Me.tableFTData.FirstEndYieldColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFinalYieldNull() As Boolean
            Return Me.IsNull(Me.tableFTData.FinalYieldColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFinalYieldNull()
            Me(Me.tableFTData.FinalYieldColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarkingInspectionNull() As Boolean
            Return Me.IsNull(Me.tableFTData.MarkingInspectionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarkingInspectionNull()
            Me(Me.tableFTData.MarkingInspectionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLotStartVisualInspectNGQtyNull() As Boolean
            Return Me.IsNull(Me.tableFTData.LotStartVisualInspectNGQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLotStartVisualInspectNGQtyNull()
            Me(Me.tableFTData.LotStartVisualInspectNGQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLotStartVisualInspectTotalQtyNull() As Boolean
            Return Me.IsNull(Me.tableFTData.LotStartVisualInspectTotalQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLotStartVisualInspectTotalQtyNull()
            Me(Me.tableFTData.LotStartVisualInspectTotalQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLotEndVisualInspectNGQtyNull() As Boolean
            Return Me.IsNull(Me.tableFTData.LotEndVisualInspectNGQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLotEndVisualInspectNGQtyNull()
            Me(Me.tableFTData.LotEndVisualInspectNGQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLotEndVisualInspectTotalQtyNull() As Boolean
            Return Me.IsNull(Me.tableFTData.LotEndVisualInspectTotalQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLotEndVisualInspectTotalQtyNull()
            Me(Me.tableFTData.LotEndVisualInspectTotalQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDuringProductionCheckNull() As Boolean
            Return Me.IsNull(Me.tableFTData.DuringProductionCheckColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDuringProductionCheckNull()
            Me(Me.tableFTData.DuringProductionCheckColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstAutoAsiCheckNull() As Boolean
            Return Me.IsNull(Me.tableFTData.FirstAutoAsiCheckColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstAutoAsiCheckNull()
            Me(Me.tableFTData.FirstAutoAsiCheckColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSecondAutoAsiCheckNull() As Boolean
            Return Me.IsNull(Me.tableFTData.SecondAutoAsiCheckColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSecondAutoAsiCheckNull()
            Me(Me.tableFTData.SecondAutoAsiCheckColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSocketChangeNull() As Boolean
            Return Me.IsNull(Me.tableFTData.SocketChangeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSocketChangeNull()
            Me(Me.tableFTData.SocketChangeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInputQtyNull() As Boolean
            Return Me.IsNull(Me.tableFTData.InputQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInputQtyNull()
            Me(Me.tableFTData.InputQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalGoodNull() As Boolean
            Return Me.IsNull(Me.tableFTData.TotalGoodColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalGoodNull()
            Me(Me.tableFTData.TotalGoodColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalNGNull() As Boolean
            Return Me.IsNull(Me.tableFTData.TotalNGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalNGNull()
            Me(Me.tableFTData.TotalNGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstMeka1QtyNull() As Boolean
            Return Me.IsNull(Me.tableFTData.FirstMeka1QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstMeka1QtyNull()
            Me(Me.tableFTData.FirstMeka1QtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstMeka2QtyNull() As Boolean
            Return Me.IsNull(Me.tableFTData.FirstMeka2QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstMeka2QtyNull()
            Me(Me.tableFTData.FirstMeka2QtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstNGQtyNull() As Boolean
            Return Me.IsNull(Me.tableFTData.FirstNGQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstNGQtyNull()
            Me(Me.tableFTData.FirstNGQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstUnknowQtyNull() As Boolean
            Return Me.IsNull(Me.tableFTData.FirstUnknowQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstUnknowQtyNull()
            Me(Me.tableFTData.FirstUnknowQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHandlerCounterQtyNull() As Boolean
            Return Me.IsNull(Me.tableFTData.HandlerCounterQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHandlerCounterQtyNull()
            Me(Me.tableFTData.HandlerCounterQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSecondMeka1QtyNull() As Boolean
            Return Me.IsNull(Me.tableFTData.SecondMeka1QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSecondMeka1QtyNull()
            Me(Me.tableFTData.SecondMeka1QtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSecondMeka4QtyNull() As Boolean
            Return Me.IsNull(Me.tableFTData.SecondMeka4QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSecondMeka4QtyNull()
            Me(Me.tableFTData.SecondMeka4QtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSecondNGQtyNull() As Boolean
            Return Me.IsNull(Me.tableFTData.SecondNGQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSecondNGQtyNull()
            Me(Me.tableFTData.SecondNGQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSecondUnknowQtyNull() As Boolean
            Return Me.IsNull(Me.tableFTData.SecondUnknowQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSecondUnknowQtyNull()
            Me(Me.tableFTData.SecondUnknowQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTesterACounterQtyNull() As Boolean
            Return Me.IsNull(Me.tableFTData.TesterACounterQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTesterACounterQtyNull()
            Me(Me.tableFTData.TesterACounterQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTesterBCounterQtyNull() As Boolean
            Return Me.IsNull(Me.tableFTData.TesterBCounterQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTesterBCounterQtyNull()
            Me(Me.tableFTData.TesterBCounterQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalMeka1QtyNull() As Boolean
            Return Me.IsNull(Me.tableFTData.TotalMeka1QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalMeka1QtyNull()
            Me(Me.tableFTData.TotalMeka1QtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalMeka2QtyNull() As Boolean
            Return Me.IsNull(Me.tableFTData.TotalMeka2QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalMeka2QtyNull()
            Me(Me.tableFTData.TotalMeka2QtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalMeka4QtyNull() As Boolean
            Return Me.IsNull(Me.tableFTData.TotalMeka4QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalMeka4QtyNull()
            Me(Me.tableFTData.TotalMeka4QtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalUnknowQtyNull() As Boolean
            Return Me.IsNull(Me.tableFTData.TotalUnknowQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalUnknowQtyNull()
            Me(Me.tableFTData.TotalUnknowQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstGoodBin1QtyNull() As Boolean
            Return Me.IsNull(Me.tableFTData.FirstGoodBin1QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstGoodBin1QtyNull()
            Me(Me.tableFTData.FirstGoodBin1QtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstGoodBin2QtyNull() As Boolean
            Return Me.IsNull(Me.tableFTData.FirstGoodBin2QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstGoodBin2QtyNull()
            Me(Me.tableFTData.FirstGoodBin2QtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSecondGoodBin1QtyNull() As Boolean
            Return Me.IsNull(Me.tableFTData.SecondGoodBin1QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSecondGoodBin1QtyNull()
            Me(Me.tableFTData.SecondGoodBin1QtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSecondGoodBin2QtyNull() As Boolean
            Return Me.IsNull(Me.tableFTData.SecondGoodBin2QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSecondGoodBin2QtyNull()
            Me(Me.tableFTData.SecondGoodBin2QtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalGoodBin1QtyNull() As Boolean
            Return Me.IsNull(Me.tableFTData.TotalGoodBin1QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalGoodBin1QtyNull()
            Me(Me.tableFTData.TotalGoodBin1QtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalGoodBin2QtyNull() As Boolean
            Return Me.IsNull(Me.tableFTData.TotalGoodBin2QtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalGoodBin2QtyNull()
            Me(Me.tableFTData.TotalGoodBin2QtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalNGQtyNull() As Boolean
            Return Me.IsNull(Me.tableFTData.TotalNGQtyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalNGQtyNull()
            Me(Me.tableFTData.TotalNGQtyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSocketNumCh1Null() As Boolean
            Return Me.IsNull(Me.tableFTData.SocketNumCh1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSocketNumCh1Null()
            Me(Me.tableFTData.SocketNumCh1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSocketNumCh2Null() As Boolean
            Return Me.IsNull(Me.tableFTData.SocketNumCh2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSocketNumCh2Null()
            Me(Me.tableFTData.SocketNumCh2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSocketNumCh3Null() As Boolean
            Return Me.IsNull(Me.tableFTData.SocketNumCh3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSocketNumCh3Null()
            Me(Me.tableFTData.SocketNumCh3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSocketNumCh4Null() As Boolean
            Return Me.IsNull(Me.tableFTData.SocketNumCh4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSocketNumCh4Null()
            Me(Me.tableFTData.SocketNumCh4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsChangedSocketNumCh1Null() As Boolean
            Return Me.IsNull(Me.tableFTData.ChangedSocketNumCh1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetChangedSocketNumCh1Null()
            Me(Me.tableFTData.ChangedSocketNumCh1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsChangedSocketNumCh2Null() As Boolean
            Return Me.IsNull(Me.tableFTData.ChangedSocketNumCh2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetChangedSocketNumCh2Null()
            Me(Me.tableFTData.ChangedSocketNumCh2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsChangedSocketNumCh3Null() As Boolean
            Return Me.IsNull(Me.tableFTData.ChangedSocketNumCh3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetChangedSocketNumCh3Null()
            Me(Me.tableFTData.ChangedSocketNumCh3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsChangedSocketNumCh4Null() As Boolean
            Return Me.IsNull(Me.tableFTData.ChangedSocketNumCh4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetChangedSocketNumCh4Null()
            Me(Me.tableFTData.ChangedSocketNumCh4Column) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FTMachineSettingRow
        Inherits Global.System.Data.DataRow
        
        Private tableFTMachineSetting As FTMachineSettingDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFTMachineSetting = CType(Me.Table,FTMachineSettingDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MCNo() As String
            Get
                Return CType(Me(Me.tableFTMachineSetting.MCNoColumn),String)
            End Get
            Set
                Me(Me.tableFTMachineSetting.MCNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MachineType() As String
            Get
                Return CType(Me(Me.tableFTMachineSetting.MachineTypeColumn),String)
            End Get
            Set
                Me(Me.tableFTMachineSetting.MachineTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PDMachineType() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTMachineSetting.PDMachineTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PDMachineType' in table 'FTMachineSetting' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTMachineSetting.PDMachineTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RPMSetting() As Single
            Get
                Try 
                    Return CType(Me(Me.tableFTMachineSetting.RPMSettingColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RPMSetting' in table 'FTMachineSetting' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTMachineSetting.RPMSettingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OPRateSetting() As Single
            Get
                Try 
                    Return CType(Me(Me.tableFTMachineSetting.OPRateSettingColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OPRateSetting' in table 'FTMachineSetting' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTMachineSetting.OPRateSettingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MTTRSetting() As Single
            Get
                Try 
                    Return CType(Me(Me.tableFTMachineSetting.MTTRSettingColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MTTRSetting' in table 'FTMachineSetting' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTMachineSetting.MTTRSettingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MTBFSetting() As Single
            Get
                Try 
                    Return CType(Me(Me.tableFTMachineSetting.MTBFSettingColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MTBFSetting' in table 'FTMachineSetting' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTMachineSetting.MTBFSettingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MoxaIP() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTMachineSetting.MoxaIPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MoxaIP' in table 'FTMachineSetting' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTMachineSetting.MoxaIPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SelfConIP() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTMachineSetting.SelfConIPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SelfConIP' in table 'FTMachineSetting' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTMachineSetting.SelfConIPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PositionX() As Integer
            Get
                Return CType(Me(Me.tableFTMachineSetting.PositionXColumn),Integer)
            End Get
            Set
                Me(Me.tableFTMachineSetting.PositionXColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PositionY() As Integer
            Get
                Return CType(Me(Me.tableFTMachineSetting.PositionYColumn),Integer)
            End Get
            Set
                Me(Me.tableFTMachineSetting.PositionYColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UseAutoMode() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableFTMachineSetting.UseAutoModeColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'UseAutoMode' in table 'FTMachineSetting' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTMachineSetting.UseAutoModeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPDMachineTypeNull() As Boolean
            Return Me.IsNull(Me.tableFTMachineSetting.PDMachineTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPDMachineTypeNull()
            Me(Me.tableFTMachineSetting.PDMachineTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRPMSettingNull() As Boolean
            Return Me.IsNull(Me.tableFTMachineSetting.RPMSettingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRPMSettingNull()
            Me(Me.tableFTMachineSetting.RPMSettingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOPRateSettingNull() As Boolean
            Return Me.IsNull(Me.tableFTMachineSetting.OPRateSettingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOPRateSettingNull()
            Me(Me.tableFTMachineSetting.OPRateSettingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMTTRSettingNull() As Boolean
            Return Me.IsNull(Me.tableFTMachineSetting.MTTRSettingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMTTRSettingNull()
            Me(Me.tableFTMachineSetting.MTTRSettingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMTBFSettingNull() As Boolean
            Return Me.IsNull(Me.tableFTMachineSetting.MTBFSettingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMTBFSettingNull()
            Me(Me.tableFTMachineSetting.MTBFSettingColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMoxaIPNull() As Boolean
            Return Me.IsNull(Me.tableFTMachineSetting.MoxaIPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMoxaIPNull()
            Me(Me.tableFTMachineSetting.MoxaIPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSelfConIPNull() As Boolean
            Return Me.IsNull(Me.tableFTMachineSetting.SelfConIPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSelfConIPNull()
            Me(Me.tableFTMachineSetting.SelfConIPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUseAutoModeNull() As Boolean
            Return Me.IsNull(Me.tableFTMachineSetting.UseAutoModeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUseAutoModeNull()
            Me(Me.tableFTMachineSetting.UseAutoModeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MyUserRow
        Inherits Global.System.Data.DataRow
        
        Private tableMyUser As MyUserDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMyUser = CType(Me.Table,MyUserDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As String
            Get
                Return CType(Me(Me.tableMyUser.IDColumn),String)
            End Get
            Set
                Me(Me.tableMyUser.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Password() As String
            Get
                Try 
                    Return CType(Me(Me.tableMyUser.PasswordColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Password' in table 'MyUser' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMyUser.PasswordColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FirstName() As String
            Get
                Try 
                    Return CType(Me(Me.tableMyUser.FirstNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FirstName' in table 'MyUser' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMyUser.FirstNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastName() As String
            Get
                Try 
                    Return CType(Me(Me.tableMyUser.LastNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastName' in table 'MyUser' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMyUser.LastNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Organize() As String
            Get
                Try 
                    Return CType(Me(Me.tableMyUser.OrganizeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Organize' in table 'MyUser' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMyUser.OrganizeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImageUrl() As String
            Get
                Try 
                    Return CType(Me(Me.tableMyUser.ImageUrlColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ImageUrl' in table 'MyUser' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMyUser.ImageUrlColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPasswordNull() As Boolean
            Return Me.IsNull(Me.tableMyUser.PasswordColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPasswordNull()
            Me(Me.tableMyUser.PasswordColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFirstNameNull() As Boolean
            Return Me.IsNull(Me.tableMyUser.FirstNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFirstNameNull()
            Me(Me.tableMyUser.FirstNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastNameNull() As Boolean
            Return Me.IsNull(Me.tableMyUser.LastNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastNameNull()
            Me(Me.tableMyUser.LastNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrganizeNull() As Boolean
            Return Me.IsNull(Me.tableMyUser.OrganizeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrganizeNull()
            Me(Me.tableMyUser.OrganizeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsImageUrlNull() As Boolean
            Return Me.IsNull(Me.tableMyUser.ImageUrlColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetImageUrlNull()
            Me(Me.tableMyUser.ImageUrlColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class UserGroupsRow
        Inherits Global.System.Data.DataRow
        
        Private tableUserGroups As UserGroupsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableUserGroups = CType(Me.Table,UserGroupsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GroupName() As String
            Get
                Try 
                    Return CType(Me(Me.tableUserGroups.GroupNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'GroupName' in table 'UserGroups' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUserGroups.GroupNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MemberID() As String
            Get
                Return CType(Me(Me.tableUserGroups.MemberIDColumn),String)
            End Get
            Set
                Me(Me.tableUserGroups.MemberIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGroupNameNull() As Boolean
            Return Me.IsNull(Me.tableUserGroups.GroupNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGroupNameNull()
            Me(Me.tableUserGroups.GroupNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TransactionDataRow
        Inherits Global.System.Data.DataRow
        
        Private tableTransactionData As TransactionDataDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTransactionData = CType(Me.Table,TransactionDataDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LotNo() As String
            Get
                Return CType(Me(Me.tableTransactionData.LotNoColumn),String)
            End Get
            Set
                Me(Me.tableTransactionData.LotNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Package() As String
            Get
                Try 
                    Return CType(Me(Me.tableTransactionData.PackageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Package' in table 'TransactionData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransactionData.PackageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Device() As String
            Get
                Try 
                    Return CType(Me(Me.tableTransactionData.DeviceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Device' in table 'TransactionData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransactionData.DeviceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FrameNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableTransactionData.FrameNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FrameNo' in table 'TransactionData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransactionData.FrameNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FASetDirection() As String
            Get
                Try 
                    Return CType(Me(Me.tableTransactionData.FASetDirectionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FASetDirection' in table 'TransactionData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransactionData.FASetDirectionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CodeNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableTransactionData.CodeNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CodeNo' in table 'TransactionData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransactionData.CodeNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WaferLotNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableTransactionData.WaferLotNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'WaferLotNo' in table 'TransactionData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransactionData.WaferLotNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TapingDirection() As String
            Get
                Try 
                    Return CType(Me(Me.tableTransactionData.TapingDirectionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TapingDirection' in table 'TransactionData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransactionData.TapingDirectionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MarkType() As String
            Get
                Try 
                    Return CType(Me(Me.tableTransactionData.MarkTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MarkType' in table 'TransactionData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransactionData.MarkTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MarkTextLine3() As String
            Get
                Try 
                    Return CType(Me(Me.tableTransactionData.MarkTextLine3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MarkTextLine3' in table 'TransactionData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransactionData.MarkTextLine3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MarkTextLine2() As String
            Get
                Try 
                    Return CType(Me(Me.tableTransactionData.MarkTextLine2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MarkTextLine2' in table 'TransactionData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransactionData.MarkTextLine2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MarkTextLine1() As String
            Get
                Try 
                    Return CType(Me(Me.tableTransactionData.MarkTextLine1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MarkTextLine1' in table 'TransactionData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransactionData.MarkTextLine1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumberOfStampStep() As String
            Get
                Try 
                    Return CType(Me(Me.tableTransactionData.NumberOfStampStepColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NumberOfStampStep' in table 'TransactionData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransactionData.NumberOfStampStepColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OSFT() As String
            Get
                Try 
                    Return CType(Me(Me.tableTransactionData.OSFTColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OSFT' in table 'TransactionData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransactionData.OSFTColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OSProgram() As String
            Get
                Try 
                    Return CType(Me(Me.tableTransactionData.OSProgramColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OSProgram' in table 'TransactionData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransactionData.OSProgramColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MoldType() As String
            Get
                Try 
                    Return CType(Me(Me.tableTransactionData.MoldTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MoldType' in table 'TransactionData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransactionData.MoldTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NewFormName() As String
            Get
                Try 
                    Return CType(Me(Me.tableTransactionData.NewFormNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NewFormName' in table 'TransactionData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransactionData.NewFormNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FTForm() As String
            Get
                Try 
                    Return CType(Me(Me.tableTransactionData.FTFormColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FTForm' in table 'TransactionData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransactionData.FTFormColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MarkNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableTransactionData.MarkNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MarkNo' in table 'TransactionData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransactionData.MarkNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PDFree() As String
            Get
                Try 
                    Return CType(Me(Me.tableTransactionData.PDFreeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PDFree' in table 'TransactionData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransactionData.PDFreeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ULMark() As String
            Get
                Try 
                    Return CType(Me(Me.tableTransactionData.ULMarkColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ULMark' in table 'TransactionData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransactionData.ULMarkColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReelCount() As String
            Get
                Try 
                    Return CType(Me(Me.tableTransactionData.ReelCountColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReelCount' in table 'TransactionData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransactionData.ReelCountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CleamCounterMeasure() As String
            Get
                Try 
                    Return CType(Me(Me.tableTransactionData.CleamCounterMeasureColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CleamCounterMeasure' in table 'TransactionData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransactionData.CleamCounterMeasureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubRank() As String
            Get
                Try 
                    Return CType(Me(Me.tableTransactionData.SubRankColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubRank' in table 'TransactionData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransactionData.SubRankColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Mask() As String
            Get
                Try 
                    Return CType(Me(Me.tableTransactionData.MaskColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Mask' in table 'TransactionData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransactionData.MaskColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ETC1() As String
            Get
                Try 
                    Return CType(Me(Me.tableTransactionData.ETC1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ETC1' in table 'TransactionData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransactionData.ETC1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ETC2() As String
            Get
                Try 
                    Return CType(Me(Me.tableTransactionData.ETC2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ETC2' in table 'TransactionData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTransactionData.ETC2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPackageNull() As Boolean
            Return Me.IsNull(Me.tableTransactionData.PackageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPackageNull()
            Me(Me.tableTransactionData.PackageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeviceNull() As Boolean
            Return Me.IsNull(Me.tableTransactionData.DeviceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeviceNull()
            Me(Me.tableTransactionData.DeviceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFrameNoNull() As Boolean
            Return Me.IsNull(Me.tableTransactionData.FrameNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFrameNoNull()
            Me(Me.tableTransactionData.FrameNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFASetDirectionNull() As Boolean
            Return Me.IsNull(Me.tableTransactionData.FASetDirectionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFASetDirectionNull()
            Me(Me.tableTransactionData.FASetDirectionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCodeNoNull() As Boolean
            Return Me.IsNull(Me.tableTransactionData.CodeNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCodeNoNull()
            Me(Me.tableTransactionData.CodeNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWaferLotNoNull() As Boolean
            Return Me.IsNull(Me.tableTransactionData.WaferLotNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWaferLotNoNull()
            Me(Me.tableTransactionData.WaferLotNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTapingDirectionNull() As Boolean
            Return Me.IsNull(Me.tableTransactionData.TapingDirectionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTapingDirectionNull()
            Me(Me.tableTransactionData.TapingDirectionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarkTypeNull() As Boolean
            Return Me.IsNull(Me.tableTransactionData.MarkTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarkTypeNull()
            Me(Me.tableTransactionData.MarkTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarkTextLine3Null() As Boolean
            Return Me.IsNull(Me.tableTransactionData.MarkTextLine3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarkTextLine3Null()
            Me(Me.tableTransactionData.MarkTextLine3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarkTextLine2Null() As Boolean
            Return Me.IsNull(Me.tableTransactionData.MarkTextLine2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarkTextLine2Null()
            Me(Me.tableTransactionData.MarkTextLine2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarkTextLine1Null() As Boolean
            Return Me.IsNull(Me.tableTransactionData.MarkTextLine1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarkTextLine1Null()
            Me(Me.tableTransactionData.MarkTextLine1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumberOfStampStepNull() As Boolean
            Return Me.IsNull(Me.tableTransactionData.NumberOfStampStepColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumberOfStampStepNull()
            Me(Me.tableTransactionData.NumberOfStampStepColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOSFTNull() As Boolean
            Return Me.IsNull(Me.tableTransactionData.OSFTColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOSFTNull()
            Me(Me.tableTransactionData.OSFTColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOSProgramNull() As Boolean
            Return Me.IsNull(Me.tableTransactionData.OSProgramColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOSProgramNull()
            Me(Me.tableTransactionData.OSProgramColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMoldTypeNull() As Boolean
            Return Me.IsNull(Me.tableTransactionData.MoldTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMoldTypeNull()
            Me(Me.tableTransactionData.MoldTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNewFormNameNull() As Boolean
            Return Me.IsNull(Me.tableTransactionData.NewFormNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNewFormNameNull()
            Me(Me.tableTransactionData.NewFormNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFTFormNull() As Boolean
            Return Me.IsNull(Me.tableTransactionData.FTFormColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFTFormNull()
            Me(Me.tableTransactionData.FTFormColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMarkNoNull() As Boolean
            Return Me.IsNull(Me.tableTransactionData.MarkNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMarkNoNull()
            Me(Me.tableTransactionData.MarkNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPDFreeNull() As Boolean
            Return Me.IsNull(Me.tableTransactionData.PDFreeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPDFreeNull()
            Me(Me.tableTransactionData.PDFreeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsULMarkNull() As Boolean
            Return Me.IsNull(Me.tableTransactionData.ULMarkColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetULMarkNull()
            Me(Me.tableTransactionData.ULMarkColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReelCountNull() As Boolean
            Return Me.IsNull(Me.tableTransactionData.ReelCountColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReelCountNull()
            Me(Me.tableTransactionData.ReelCountColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCleamCounterMeasureNull() As Boolean
            Return Me.IsNull(Me.tableTransactionData.CleamCounterMeasureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCleamCounterMeasureNull()
            Me(Me.tableTransactionData.CleamCounterMeasureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubRankNull() As Boolean
            Return Me.IsNull(Me.tableTransactionData.SubRankColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubRankNull()
            Me(Me.tableTransactionData.SubRankColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMaskNull() As Boolean
            Return Me.IsNull(Me.tableTransactionData.MaskColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMaskNull()
            Me(Me.tableTransactionData.MaskColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsETC1Null() As Boolean
            Return Me.IsNull(Me.tableTransactionData.ETC1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetETC1Null()
            Me(Me.tableTransactionData.ETC1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsETC2Null() As Boolean
            Return Me.IsNull(Me.tableTransactionData.ETC2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetETC2Null()
            Me(Me.tableTransactionData.ETC2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetFTDataRows() As FTDataRow()
            If (Me.Table.ChildRelations("FK_FTData_TransactionData") Is Nothing) Then
                Return New FTDataRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_FTData_TransactionData")),FTDataRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FixedLCLRow
        Inherits Global.System.Data.DataRow
        
        Private tableFixedLCL As FixedLCLDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFixedLCL = CType(Me.Table,FixedLCLDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TestFlowName() As String
            Get
                Return CType(Me(Me.tableFixedLCL.TestFlowNameColumn),String)
            End Get
            Set
                Me(Me.tableFixedLCL.TestFlowNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LCL() As Single
            Get
                Try 
                    Return CType(Me(Me.tableFixedLCL.LCLColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LCL' in table 'FixedLCL' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFixedLCL.LCLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLCLNull() As Boolean
            Return Me.IsNull(Me.tableFixedLCL.LCLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLCLNull()
            Me(Me.tableFixedLCL.LCLColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TesterTypeRow
        Inherits Global.System.Data.DataRow
        
        Private tableTesterType As TesterTypeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTesterType = CType(Me.Table,TesterTypeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableTesterType.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableTesterType.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Name() As String
            Get
                Return CType(Me(Me.tableTesterType.NameColumn),String)
            End Get
            Set
                Me(Me.tableTesterType.NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetFTBomRows() As FTBomRow()
            If (Me.Table.ChildRelations("FK_FTBom_TesterType") Is Nothing) Then
                Return New FTBomRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_FTBom_TesterType")),FTBomRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class EquipmentLocationRow
        Inherits Global.System.Data.DataRow
        
        Private tableEquipmentLocation As EquipmentLocationDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableEquipmentLocation = CType(Me.Table,EquipmentLocationDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableEquipmentLocation.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableEquipmentLocation.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StatusID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableEquipmentLocation.StatusIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StatusID' in table 'EquipmentLocation' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableEquipmentLocation.StatusIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusIDNull() As Boolean
            Return Me.IsNull(Me.tableEquipmentLocation.StatusIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusIDNull()
            Me(Me.tableEquipmentLocation.StatusIDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DataRow
        Inherits Global.System.Data.DataRow
        
        Private tableData As DataDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableData = CType(Me.Table,DataDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableData.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableData.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QRName() As String
            Get
                Try 
                    Return CType(Me(Me.tableData.QRNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QRName' in table 'Data' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableData.QRNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Num() As String
            Get
                Return CType(Me(Me.tableData.NumColumn),String)
            End Get
            Set
                Me(Me.tableData.NumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQRNameNull() As Boolean
            Return Me.IsNull(Me.tableData.QRNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQRNameNull()
            Me(Me.tableData.QRNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FTSetupReportRow
        Inherits Global.System.Data.DataRow
        
        Private tableFTSetupReport As FTSetupReportDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFTSetupReport = CType(Me.Table,FTSetupReportDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MCNo() As String
            Get
                Return CType(Me(Me.tableFTSetupReport.MCNoColumn),String)
            End Get
            Set
                Me(Me.tableFTSetupReport.MCNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LotNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.LotNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LotNo' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.LotNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PackageName() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.PackageNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PackageName' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.PackageNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DeviceName() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.DeviceNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DeviceName' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.DeviceNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProgramName() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.ProgramNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProgramName' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.ProgramNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TesterType() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.TesterTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TesterType' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.TesterTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TestFlow() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.TestFlowColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TestFlow' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.TestFlowColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TesterNoA() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.TesterNoAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TesterNoA' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.TesterNoAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TesterNoB() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.TesterNoBColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TesterNoB' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.TesterNoBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ChannelAFTB() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.ChannelAFTBColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ChannelAFTB' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.ChannelAFTBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ChannelBFTB() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.ChannelBFTBColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ChannelBFTB' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.ChannelBFTBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TestBoxA() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.TestBoxAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TestBoxA' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.TestBoxAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TestBoxB() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.TestBoxBColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TestBoxB' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.TestBoxBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AdaptorA() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.AdaptorAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AdaptorA' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.AdaptorAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AdaptorB() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.AdaptorBColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AdaptorB' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.AdaptorBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DutcardA() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.DutcardAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DutcardA' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.DutcardAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DutcardB() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.DutcardBColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DutcardB' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.DutcardBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BridgecableA() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.BridgecableAColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BridgecableA' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.BridgecableAColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BridgecableB() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.BridgecableBColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BridgecableB' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.BridgecableBColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TypeChangePackage() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.TypeChangePackageColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TypeChangePackage' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.TypeChangePackageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SetupStartDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.SetupStartDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SetupStartDate' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.SetupStartDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SetupEndDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.SetupEndDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SetupEndDate' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.SetupEndDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BoxTesterConnection() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.BoxTesterConnectionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BoxTesterConnection' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.BoxTesterConnectionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OptionSetup() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.OptionSetupColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OptionSetup' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.OptionSetupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OptionConnection() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.OptionConnectionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OptionConnection' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.OptionConnectionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OptionName1() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.OptionName1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OptionName1' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.OptionName1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OptionName2() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.OptionName2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OptionName2' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.OptionName2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OptionName3() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.OptionName3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OptionName3' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.OptionName3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OptionName4() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.OptionName4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OptionName4' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.OptionName4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OptionName5() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.OptionName5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OptionName5' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.OptionName5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OptionName6() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.OptionName6Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OptionName6' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.OptionName6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OptionName7() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.OptionName7Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OptionName7' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.OptionName7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OptionType1() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.OptionType1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OptionType1' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.OptionType1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OptionType2() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.OptionType2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OptionType2' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.OptionType2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OptionType3() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.OptionType3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OptionType3' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.OptionType3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OptionType4() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.OptionType4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OptionType4' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.OptionType4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OptionType5() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.OptionType5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OptionType5' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.OptionType5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OptionType6() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.OptionType6Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OptionType6' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.OptionType6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OptionType7() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.OptionType7Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OptionType7' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.OptionType7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OptionSetting1() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.OptionSetting1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OptionSetting1' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.OptionSetting1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OptionSetting2() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.OptionSetting2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OptionSetting2' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.OptionSetting2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OptionSetting3() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.OptionSetting3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OptionSetting3' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.OptionSetting3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OptionSetting4() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.OptionSetting4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OptionSetting4' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.OptionSetting4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OptionSetting5() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.OptionSetting5Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OptionSetting5' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.OptionSetting5Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OptionSetting6() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.OptionSetting6Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OptionSetting6' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.OptionSetting6Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OptionSetting7() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.OptionSetting7Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'OptionSetting7' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.OptionSetting7Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QfpVacuumPad() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.QfpVacuumPadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QfpVacuumPad' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.QfpVacuumPadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QfpSocketSetup() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.QfpSocketSetupColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QfpSocketSetup' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.QfpSocketSetupColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QfpSocketDecision() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.QfpSocketDecisionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QfpSocketDecision' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.QfpSocketDecisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QfpDecisionLeadPress() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.QfpDecisionLeadPressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QfpDecisionLeadPress' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.QfpDecisionLeadPressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QfpTray() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.QfpTrayColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QfpTray' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.QfpTrayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SopStopper() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.SopStopperColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SopStopper' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.SopStopperColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SopSocketDecision() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.SopSocketDecisionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SopSocketDecision' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.SopSocketDecisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SopDecisionLeadPress() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.SopDecisionLeadPressColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SopDecisionLeadPress' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.SopDecisionLeadPressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ManualCheckTest() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.ManualCheckTestColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ManualCheckTest' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.ManualCheckTestColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ManualCheckTE() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.ManualCheckTEColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ManualCheckTE' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.ManualCheckTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ManualCheckRequestTE() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.ManualCheckRequestTEColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ManualCheckRequestTE' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.ManualCheckRequestTEColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ManualCheckRequestTEConfirm() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.ManualCheckRequestTEConfirmColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ManualCheckRequestTEConfirm' in table 'FTSetupReport' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.ManualCheckRequestTEConfirmColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PkgGood() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.PkgGoodColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PkgGood' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.PkgGoodColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PkgNG() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.PkgNGColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PkgNG' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.PkgNGColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PkgGoodJudgement() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.PkgGoodJudgementColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PkgGoodJudgement' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.PkgGoodJudgementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PkgNGJudgement() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.PkgNGJudgementColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PkgNGJudgement' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.PkgNGJudgementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PkgNishikiCamara() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.PkgNishikiCamaraColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PkgNishikiCamara' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.PkgNishikiCamaraColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PkgNishikiCamaraJudgement() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.PkgNishikiCamaraJudgementColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PkgNishikiCamaraJudgement' in table 'FTSetupReport' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.PkgNishikiCamaraJudgementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PkqBantLead() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.PkqBantLeadColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PkqBantLead' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.PkqBantLeadColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PkqKakeHige() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.PkqKakeHigeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PkqKakeHige' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.PkqKakeHigeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BgaSmallBall() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.BgaSmallBallColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BgaSmallBall' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.BgaSmallBallColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BgaBentTape() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.BgaBentTapeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BgaBentTape' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.BgaBentTapeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Bge5S() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.Bge5SColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Bge5S' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.Bge5SColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SetupStatus() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.SetupStatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SetupStatus' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.SetupStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SetupConfirmDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.SetupConfirmDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SetupConfirmDate' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.SetupConfirmDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QRCodesocketChannel4() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.QRCodesocketChannel4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QRCodesocketChannel4' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.QRCodesocketChannel4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TesterNoAQRcode() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.TesterNoAQRcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TesterNoAQRcode' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.TesterNoAQRcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TesterNoBQRcode() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.TesterNoBQRcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TesterNoBQRcode' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.TesterNoBQRcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ChannelAFTBQRcode() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.ChannelAFTBQRcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ChannelAFTBQRcode' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.ChannelAFTBQRcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ChannelBFTBQRcode() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.ChannelBFTBQRcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ChannelBFTBQRcode' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.ChannelBFTBQRcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TestBoxAQRcode() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.TestBoxAQRcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TestBoxAQRcode' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.TestBoxAQRcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TestBoxBQRcode() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.TestBoxBQRcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TestBoxBQRcode' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.TestBoxBQRcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AdaptorAQRcode() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.AdaptorAQRcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AdaptorAQRcode' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.AdaptorAQRcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AdaptorBQRcode() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.AdaptorBQRcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AdaptorBQRcode' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.AdaptorBQRcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DutcardAQRcode() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.DutcardAQRcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DutcardAQRcode' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.DutcardAQRcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DutcardBQRcode() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.DutcardBQRcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DutcardBQRcode' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.DutcardBQRcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BridgecableAQRcode() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.BridgecableAQRcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BridgecableAQRcode' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.BridgecableAQRcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BridgecableBQRcode() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.BridgecableBQRcodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BridgecableBQRcode' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.BridgecableBQRcodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QRCodesocket1() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.QRCodesocket1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QRCodesocket1' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.QRCodesocket1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QRCodesocket2() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.QRCodesocket2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QRCodesocket2' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.QRCodesocket2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QRCodesocket3() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.QRCodesocket3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QRCodesocket3' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.QRCodesocket3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QRCodesocket4() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.QRCodesocket4Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QRCodesocket4' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.QRCodesocket4Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QRCodesocketChannel1() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.QRCodesocketChannel1Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QRCodesocketChannel1' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.QRCodesocketChannel1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QRCodesocketChannel2() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.QRCodesocketChannel2Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QRCodesocketChannel2' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.QRCodesocketChannel2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QRCodesocketChannel3() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.QRCodesocketChannel3Column),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QRCodesocketChannel3' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.QRCodesocketChannel3Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ConfirmedCheckSheetOp() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.ConfirmedCheckSheetOpColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ConfirmedCheckSheetOp' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.ConfirmedCheckSheetOpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ConfirmedCheckSheetSection() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.ConfirmedCheckSheetSectionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ConfirmedCheckSheetSection' in table 'FTSetupReport' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.ConfirmedCheckSheetSectionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ConfirmedShonoSection() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.ConfirmedShonoSectionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ConfirmedShonoSection' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.ConfirmedShonoSectionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ConfirmedCheckSheetGL() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.ConfirmedCheckSheetGLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ConfirmedCheckSheetGL' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.ConfirmedCheckSheetGLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ConfirmedShonoGL() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.ConfirmedShonoGLColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ConfirmedShonoGL' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.ConfirmedShonoGLColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ConfirmedShonoOp() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.ConfirmedShonoOpColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ConfirmedShonoOp' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.ConfirmedShonoOpColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StatusShonoOP() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTSetupReport.StatusShonoOPColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StatusShonoOP' in table 'FTSetupReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTSetupReport.StatusShonoOPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLotNoNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.LotNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLotNoNull()
            Me(Me.tableFTSetupReport.LotNoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPackageNameNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.PackageNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPackageNameNull()
            Me(Me.tableFTSetupReport.PackageNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeviceNameNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.DeviceNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeviceNameNull()
            Me(Me.tableFTSetupReport.DeviceNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProgramNameNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.ProgramNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProgramNameNull()
            Me(Me.tableFTSetupReport.ProgramNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTesterTypeNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.TesterTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTesterTypeNull()
            Me(Me.tableFTSetupReport.TesterTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTestFlowNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.TestFlowColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTestFlowNull()
            Me(Me.tableFTSetupReport.TestFlowColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTesterNoANull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.TesterNoAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTesterNoANull()
            Me(Me.tableFTSetupReport.TesterNoAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTesterNoBNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.TesterNoBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTesterNoBNull()
            Me(Me.tableFTSetupReport.TesterNoBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsChannelAFTBNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.ChannelAFTBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetChannelAFTBNull()
            Me(Me.tableFTSetupReport.ChannelAFTBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsChannelBFTBNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.ChannelBFTBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetChannelBFTBNull()
            Me(Me.tableFTSetupReport.ChannelBFTBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTestBoxANull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.TestBoxAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTestBoxANull()
            Me(Me.tableFTSetupReport.TestBoxAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTestBoxBNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.TestBoxBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTestBoxBNull()
            Me(Me.tableFTSetupReport.TestBoxBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdaptorANull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.AdaptorAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdaptorANull()
            Me(Me.tableFTSetupReport.AdaptorAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdaptorBNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.AdaptorBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdaptorBNull()
            Me(Me.tableFTSetupReport.AdaptorBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDutcardANull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.DutcardAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDutcardANull()
            Me(Me.tableFTSetupReport.DutcardAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDutcardBNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.DutcardBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDutcardBNull()
            Me(Me.tableFTSetupReport.DutcardBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBridgecableANull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.BridgecableAColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBridgecableANull()
            Me(Me.tableFTSetupReport.BridgecableAColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBridgecableBNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.BridgecableBColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBridgecableBNull()
            Me(Me.tableFTSetupReport.BridgecableBColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeChangePackageNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.TypeChangePackageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeChangePackageNull()
            Me(Me.tableFTSetupReport.TypeChangePackageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSetupStartDateNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.SetupStartDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSetupStartDateNull()
            Me(Me.tableFTSetupReport.SetupStartDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSetupEndDateNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.SetupEndDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSetupEndDateNull()
            Me(Me.tableFTSetupReport.SetupEndDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBoxTesterConnectionNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.BoxTesterConnectionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBoxTesterConnectionNull()
            Me(Me.tableFTSetupReport.BoxTesterConnectionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOptionSetupNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.OptionSetupColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOptionSetupNull()
            Me(Me.tableFTSetupReport.OptionSetupColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOptionConnectionNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.OptionConnectionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOptionConnectionNull()
            Me(Me.tableFTSetupReport.OptionConnectionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOptionName1Null() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.OptionName1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOptionName1Null()
            Me(Me.tableFTSetupReport.OptionName1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOptionName2Null() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.OptionName2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOptionName2Null()
            Me(Me.tableFTSetupReport.OptionName2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOptionName3Null() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.OptionName3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOptionName3Null()
            Me(Me.tableFTSetupReport.OptionName3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOptionName4Null() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.OptionName4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOptionName4Null()
            Me(Me.tableFTSetupReport.OptionName4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOptionName5Null() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.OptionName5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOptionName5Null()
            Me(Me.tableFTSetupReport.OptionName5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOptionName6Null() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.OptionName6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOptionName6Null()
            Me(Me.tableFTSetupReport.OptionName6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOptionName7Null() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.OptionName7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOptionName7Null()
            Me(Me.tableFTSetupReport.OptionName7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOptionType1Null() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.OptionType1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOptionType1Null()
            Me(Me.tableFTSetupReport.OptionType1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOptionType2Null() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.OptionType2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOptionType2Null()
            Me(Me.tableFTSetupReport.OptionType2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOptionType3Null() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.OptionType3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOptionType3Null()
            Me(Me.tableFTSetupReport.OptionType3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOptionType4Null() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.OptionType4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOptionType4Null()
            Me(Me.tableFTSetupReport.OptionType4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOptionType5Null() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.OptionType5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOptionType5Null()
            Me(Me.tableFTSetupReport.OptionType5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOptionType6Null() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.OptionType6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOptionType6Null()
            Me(Me.tableFTSetupReport.OptionType6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOptionType7Null() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.OptionType7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOptionType7Null()
            Me(Me.tableFTSetupReport.OptionType7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOptionSetting1Null() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.OptionSetting1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOptionSetting1Null()
            Me(Me.tableFTSetupReport.OptionSetting1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOptionSetting2Null() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.OptionSetting2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOptionSetting2Null()
            Me(Me.tableFTSetupReport.OptionSetting2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOptionSetting3Null() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.OptionSetting3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOptionSetting3Null()
            Me(Me.tableFTSetupReport.OptionSetting3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOptionSetting4Null() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.OptionSetting4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOptionSetting4Null()
            Me(Me.tableFTSetupReport.OptionSetting4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOptionSetting5Null() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.OptionSetting5Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOptionSetting5Null()
            Me(Me.tableFTSetupReport.OptionSetting5Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOptionSetting6Null() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.OptionSetting6Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOptionSetting6Null()
            Me(Me.tableFTSetupReport.OptionSetting6Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOptionSetting7Null() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.OptionSetting7Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOptionSetting7Null()
            Me(Me.tableFTSetupReport.OptionSetting7Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQfpVacuumPadNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.QfpVacuumPadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQfpVacuumPadNull()
            Me(Me.tableFTSetupReport.QfpVacuumPadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQfpSocketSetupNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.QfpSocketSetupColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQfpSocketSetupNull()
            Me(Me.tableFTSetupReport.QfpSocketSetupColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQfpSocketDecisionNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.QfpSocketDecisionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQfpSocketDecisionNull()
            Me(Me.tableFTSetupReport.QfpSocketDecisionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQfpDecisionLeadPressNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.QfpDecisionLeadPressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQfpDecisionLeadPressNull()
            Me(Me.tableFTSetupReport.QfpDecisionLeadPressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQfpTrayNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.QfpTrayColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQfpTrayNull()
            Me(Me.tableFTSetupReport.QfpTrayColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSopStopperNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.SopStopperColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSopStopperNull()
            Me(Me.tableFTSetupReport.SopStopperColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSopSocketDecisionNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.SopSocketDecisionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSopSocketDecisionNull()
            Me(Me.tableFTSetupReport.SopSocketDecisionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSopDecisionLeadPressNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.SopDecisionLeadPressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSopDecisionLeadPressNull()
            Me(Me.tableFTSetupReport.SopDecisionLeadPressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsManualCheckTestNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.ManualCheckTestColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetManualCheckTestNull()
            Me(Me.tableFTSetupReport.ManualCheckTestColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsManualCheckTENull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.ManualCheckTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetManualCheckTENull()
            Me(Me.tableFTSetupReport.ManualCheckTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsManualCheckRequestTENull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.ManualCheckRequestTEColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetManualCheckRequestTENull()
            Me(Me.tableFTSetupReport.ManualCheckRequestTEColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsManualCheckRequestTEConfirmNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.ManualCheckRequestTEConfirmColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetManualCheckRequestTEConfirmNull()
            Me(Me.tableFTSetupReport.ManualCheckRequestTEConfirmColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPkgGoodNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.PkgGoodColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPkgGoodNull()
            Me(Me.tableFTSetupReport.PkgGoodColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPkgNGNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.PkgNGColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPkgNGNull()
            Me(Me.tableFTSetupReport.PkgNGColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPkgGoodJudgementNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.PkgGoodJudgementColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPkgGoodJudgementNull()
            Me(Me.tableFTSetupReport.PkgGoodJudgementColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPkgNGJudgementNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.PkgNGJudgementColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPkgNGJudgementNull()
            Me(Me.tableFTSetupReport.PkgNGJudgementColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPkgNishikiCamaraNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.PkgNishikiCamaraColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPkgNishikiCamaraNull()
            Me(Me.tableFTSetupReport.PkgNishikiCamaraColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPkgNishikiCamaraJudgementNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.PkgNishikiCamaraJudgementColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPkgNishikiCamaraJudgementNull()
            Me(Me.tableFTSetupReport.PkgNishikiCamaraJudgementColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPkqBantLeadNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.PkqBantLeadColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPkqBantLeadNull()
            Me(Me.tableFTSetupReport.PkqBantLeadColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPkqKakeHigeNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.PkqKakeHigeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPkqKakeHigeNull()
            Me(Me.tableFTSetupReport.PkqKakeHigeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBgaSmallBallNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.BgaSmallBallColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBgaSmallBallNull()
            Me(Me.tableFTSetupReport.BgaSmallBallColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBgaBentTapeNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.BgaBentTapeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBgaBentTapeNull()
            Me(Me.tableFTSetupReport.BgaBentTapeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBge5SNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.Bge5SColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBge5SNull()
            Me(Me.tableFTSetupReport.Bge5SColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSetupStatusNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.SetupStatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSetupStatusNull()
            Me(Me.tableFTSetupReport.SetupStatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSetupConfirmDateNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.SetupConfirmDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSetupConfirmDateNull()
            Me(Me.tableFTSetupReport.SetupConfirmDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQRCodesocketChannel4Null() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.QRCodesocketChannel4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQRCodesocketChannel4Null()
            Me(Me.tableFTSetupReport.QRCodesocketChannel4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTesterNoAQRcodeNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.TesterNoAQRcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTesterNoAQRcodeNull()
            Me(Me.tableFTSetupReport.TesterNoAQRcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTesterNoBQRcodeNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.TesterNoBQRcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTesterNoBQRcodeNull()
            Me(Me.tableFTSetupReport.TesterNoBQRcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsChannelAFTBQRcodeNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.ChannelAFTBQRcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetChannelAFTBQRcodeNull()
            Me(Me.tableFTSetupReport.ChannelAFTBQRcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsChannelBFTBQRcodeNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.ChannelBFTBQRcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetChannelBFTBQRcodeNull()
            Me(Me.tableFTSetupReport.ChannelBFTBQRcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTestBoxAQRcodeNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.TestBoxAQRcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTestBoxAQRcodeNull()
            Me(Me.tableFTSetupReport.TestBoxAQRcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTestBoxBQRcodeNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.TestBoxBQRcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTestBoxBQRcodeNull()
            Me(Me.tableFTSetupReport.TestBoxBQRcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdaptorAQRcodeNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.AdaptorAQRcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdaptorAQRcodeNull()
            Me(Me.tableFTSetupReport.AdaptorAQRcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdaptorBQRcodeNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.AdaptorBQRcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdaptorBQRcodeNull()
            Me(Me.tableFTSetupReport.AdaptorBQRcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDutcardAQRcodeNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.DutcardAQRcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDutcardAQRcodeNull()
            Me(Me.tableFTSetupReport.DutcardAQRcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDutcardBQRcodeNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.DutcardBQRcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDutcardBQRcodeNull()
            Me(Me.tableFTSetupReport.DutcardBQRcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBridgecableAQRcodeNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.BridgecableAQRcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBridgecableAQRcodeNull()
            Me(Me.tableFTSetupReport.BridgecableAQRcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBridgecableBQRcodeNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.BridgecableBQRcodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBridgecableBQRcodeNull()
            Me(Me.tableFTSetupReport.BridgecableBQRcodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQRCodesocket1Null() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.QRCodesocket1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQRCodesocket1Null()
            Me(Me.tableFTSetupReport.QRCodesocket1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQRCodesocket2Null() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.QRCodesocket2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQRCodesocket2Null()
            Me(Me.tableFTSetupReport.QRCodesocket2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQRCodesocket3Null() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.QRCodesocket3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQRCodesocket3Null()
            Me(Me.tableFTSetupReport.QRCodesocket3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQRCodesocket4Null() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.QRCodesocket4Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQRCodesocket4Null()
            Me(Me.tableFTSetupReport.QRCodesocket4Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQRCodesocketChannel1Null() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.QRCodesocketChannel1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQRCodesocketChannel1Null()
            Me(Me.tableFTSetupReport.QRCodesocketChannel1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQRCodesocketChannel2Null() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.QRCodesocketChannel2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQRCodesocketChannel2Null()
            Me(Me.tableFTSetupReport.QRCodesocketChannel2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQRCodesocketChannel3Null() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.QRCodesocketChannel3Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQRCodesocketChannel3Null()
            Me(Me.tableFTSetupReport.QRCodesocketChannel3Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConfirmedCheckSheetOpNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.ConfirmedCheckSheetOpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConfirmedCheckSheetOpNull()
            Me(Me.tableFTSetupReport.ConfirmedCheckSheetOpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConfirmedCheckSheetSectionNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.ConfirmedCheckSheetSectionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConfirmedCheckSheetSectionNull()
            Me(Me.tableFTSetupReport.ConfirmedCheckSheetSectionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConfirmedShonoSectionNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.ConfirmedShonoSectionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConfirmedShonoSectionNull()
            Me(Me.tableFTSetupReport.ConfirmedShonoSectionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConfirmedCheckSheetGLNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.ConfirmedCheckSheetGLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConfirmedCheckSheetGLNull()
            Me(Me.tableFTSetupReport.ConfirmedCheckSheetGLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConfirmedShonoGLNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.ConfirmedShonoGLColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConfirmedShonoGLNull()
            Me(Me.tableFTSetupReport.ConfirmedShonoGLColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConfirmedShonoOpNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.ConfirmedShonoOpColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConfirmedShonoOpNull()
            Me(Me.tableFTSetupReport.ConfirmedShonoOpColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusShonoOPNull() As Boolean
            Return Me.IsNull(Me.tableFTSetupReport.StatusShonoOPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusShonoOPNull()
            Me(Me.tableFTSetupReport.StatusShonoOPColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FTBomRow
        Inherits Global.System.Data.DataRow
        
        Private tableFTBom As FTBomDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFTBom = CType(Me.Table,FTBomDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableFTBom.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableFTBom.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PackageID() As Integer
            Get
                Return CType(Me(Me.tableFTBom.PackageIDColumn),Integer)
            End Get
            Set
                Me(Me.tableFTBom.PackageIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FTDeviceID() As Integer
            Get
                Return CType(Me(Me.tableFTBom.FTDeviceIDColumn),Integer)
            End Get
            Set
                Me(Me.tableFTBom.FTDeviceIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TesterTypeID() As Integer
            Get
                Return CType(Me(Me.tableFTBom.TesterTypeIDColumn),Integer)
            End Get
            Set
                Me(Me.tableFTBom.TesterTypeIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BomTesterTypeID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFTBom.BomTesterTypeIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BomTesterTypeID' in table 'FTBom' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTBom.BomTesterTypeIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TestChannel() As Integer
            Get
                Return CType(Me(Me.tableFTBom.TestChannelColumn),Integer)
            End Get
            Set
                Me(Me.tableFTBom.TestChannelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TestFlowID() As Integer
            Get
                Return CType(Me(Me.tableFTBom.TestFlowIDColumn),Integer)
            End Get
            Set
                Me(Me.tableFTBom.TestFlowIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BomTestFlowID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFTBom.BomTestFlowIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BomTestFlowID' in table 'FTBom' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTBom.BomTestFlowIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PCMachineTypeID() As Integer
            Get
                Return CType(Me(Me.tableFTBom.PCMachineTypeIDColumn),Integer)
            End Get
            Set
                Me(Me.tableFTBom.PCMachineTypeIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TempOfProduct() As Single
            Get
                Return CType(Me(Me.tableFTBom.TempOfProductColumn),Single)
            End Get
            Set
                Me(Me.tableFTBom.TempOfProductColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TempOfMachine() As Single
            Get
                Return CType(Me(Me.tableFTBom.TempOfMachineColumn),Single)
            End Get
            Set
                Me(Me.tableFTBom.TempOfMachineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DSStartDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTBom.DSStartDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DSStartDate' in table 'FTBom' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTBom.DSStartDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ESStartDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTBom.ESStartDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ESStartDate' in table 'FTBom' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTBom.ESStartDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CSSTartDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTBom.CSSTartDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CSSTartDate' in table 'FTBom' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTBom.CSSTartDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PLStartDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTBom.PLStartDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PLStartDate' in table 'FTBom' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTBom.PLStartDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MPStartDate() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTBom.MPStartDateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MPStartDate' in table 'FTBom' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTBom.MPStartDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SocketTypeID() As Integer
            Get
                Return CType(Me(Me.tableFTBom.SocketTypeIDColumn),Integer)
            End Get
            Set
                Me(Me.tableFTBom.SocketTypeIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TestProgram() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTBom.TestProgramColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TestProgram' in table 'FTBom' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTBom.TestProgramColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TestTime() As Single
            Get
                Try 
                    Return CType(Me(Me.tableFTBom.TestTimeColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TestTime' in table 'FTBom' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTBom.TestTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SpecialRank() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTBom.SpecialRankColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SpecialRank' in table 'FTBom' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTBom.SpecialRankColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InspectionCondition() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTBom.InspectionConditionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'InspectionCondition' in table 'FTBom' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTBom.InspectionConditionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RPM() As Single
            Get
                Try 
                    Return CType(Me(Me.tableFTBom.RPMColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RPM' in table 'FTBom' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTBom.RPMColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BoxCapa() As Single
            Get
                Try 
                    Return CType(Me(Me.tableFTBom.BoxCapaColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'BoxCapa' in table 'FTBom' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTBom.BoxCapaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalBoxCapa() As Single
            Get
                Try 
                    Return CType(Me(Me.tableFTBom.TotalBoxCapaColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TotalBoxCapa' in table 'FTBom' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTBom.TotalBoxCapaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LeadTimeOfLot() As Single
            Get
                Try 
                    Return CType(Me(Me.tableFTBom.LeadTimeOfLotColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LeadTimeOfLot' in table 'FTBom' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTBom.LeadTimeOfLotColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProductionLine() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTBom.ProductionLineColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ProductionLine' in table 'FTBom' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTBom.ProductionLineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TubeTray() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTBom.TubeTrayColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TubeTray' in table 'FTBom' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTBom.TubeTrayColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Emboss() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTBom.EmbossColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Emboss' in table 'FTBom' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTBom.EmbossColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Reel() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTBom.ReelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Reel' in table 'FTBom' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTBom.ReelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property HandlerLeadTime() As Single
            Get
                Try 
                    Return CType(Me(Me.tableFTBom.HandlerLeadTimeColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'HandlerLeadTime' in table 'FTBom' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTBom.HandlerLeadTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TesterLoadTime() As Single
            Get
                Try 
                    Return CType(Me(Me.tableFTBom.TesterLoadTimeColumn),Single)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TesterLoadTime' in table 'FTBom' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTBom.TesterLoadTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TesterTypeRow() As TesterTypeRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_FTBom_TesterType")),TesterTypeRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_FTBom_TesterType"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FTPCTypeRow() As FTPCTypeRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_FTBom_FTPCType")),FTPCTypeRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_FTBom_FTPCType"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBomTesterTypeIDNull() As Boolean
            Return Me.IsNull(Me.tableFTBom.BomTesterTypeIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBomTesterTypeIDNull()
            Me(Me.tableFTBom.BomTesterTypeIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBomTestFlowIDNull() As Boolean
            Return Me.IsNull(Me.tableFTBom.BomTestFlowIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBomTestFlowIDNull()
            Me(Me.tableFTBom.BomTestFlowIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDSStartDateNull() As Boolean
            Return Me.IsNull(Me.tableFTBom.DSStartDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDSStartDateNull()
            Me(Me.tableFTBom.DSStartDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsESStartDateNull() As Boolean
            Return Me.IsNull(Me.tableFTBom.ESStartDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetESStartDateNull()
            Me(Me.tableFTBom.ESStartDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCSSTartDateNull() As Boolean
            Return Me.IsNull(Me.tableFTBom.CSSTartDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCSSTartDateNull()
            Me(Me.tableFTBom.CSSTartDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPLStartDateNull() As Boolean
            Return Me.IsNull(Me.tableFTBom.PLStartDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPLStartDateNull()
            Me(Me.tableFTBom.PLStartDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMPStartDateNull() As Boolean
            Return Me.IsNull(Me.tableFTBom.MPStartDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMPStartDateNull()
            Me(Me.tableFTBom.MPStartDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTestProgramNull() As Boolean
            Return Me.IsNull(Me.tableFTBom.TestProgramColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTestProgramNull()
            Me(Me.tableFTBom.TestProgramColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTestTimeNull() As Boolean
            Return Me.IsNull(Me.tableFTBom.TestTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTestTimeNull()
            Me(Me.tableFTBom.TestTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSpecialRankNull() As Boolean
            Return Me.IsNull(Me.tableFTBom.SpecialRankColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSpecialRankNull()
            Me(Me.tableFTBom.SpecialRankColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInspectionConditionNull() As Boolean
            Return Me.IsNull(Me.tableFTBom.InspectionConditionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInspectionConditionNull()
            Me(Me.tableFTBom.InspectionConditionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRPMNull() As Boolean
            Return Me.IsNull(Me.tableFTBom.RPMColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRPMNull()
            Me(Me.tableFTBom.RPMColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBoxCapaNull() As Boolean
            Return Me.IsNull(Me.tableFTBom.BoxCapaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBoxCapaNull()
            Me(Me.tableFTBom.BoxCapaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalBoxCapaNull() As Boolean
            Return Me.IsNull(Me.tableFTBom.TotalBoxCapaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalBoxCapaNull()
            Me(Me.tableFTBom.TotalBoxCapaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLeadTimeOfLotNull() As Boolean
            Return Me.IsNull(Me.tableFTBom.LeadTimeOfLotColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLeadTimeOfLotNull()
            Me(Me.tableFTBom.LeadTimeOfLotColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProductionLineNull() As Boolean
            Return Me.IsNull(Me.tableFTBom.ProductionLineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProductionLineNull()
            Me(Me.tableFTBom.ProductionLineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTubeTrayNull() As Boolean
            Return Me.IsNull(Me.tableFTBom.TubeTrayColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTubeTrayNull()
            Me(Me.tableFTBom.TubeTrayColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmbossNull() As Boolean
            Return Me.IsNull(Me.tableFTBom.EmbossColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmbossNull()
            Me(Me.tableFTBom.EmbossColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReelNull() As Boolean
            Return Me.IsNull(Me.tableFTBom.ReelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReelNull()
            Me(Me.tableFTBom.ReelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHandlerLeadTimeNull() As Boolean
            Return Me.IsNull(Me.tableFTBom.HandlerLeadTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHandlerLeadTimeNull()
            Me(Me.tableFTBom.HandlerLeadTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTesterLoadTimeNull() As Boolean
            Return Me.IsNull(Me.tableFTBom.TesterLoadTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTesterLoadTimeNull()
            Me(Me.tableFTBom.TesterLoadTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetFTBomOptionRows() As FTBomOptionRow()
            If (Me.Table.ChildRelations("FK_FTBomOption_FTBom") Is Nothing) Then
                Return New FTBomOptionRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_FTBomOption_FTBom")),FTBomOptionRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetFTBomTestEquipmentRows() As FTBomTestEquipmentRow()
            If (Me.Table.ChildRelations("FK_FTBomTestEquipment_FTBom") Is Nothing) Then
                Return New FTBomTestEquipmentRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_FTBomTestEquipment_FTBom")),FTBomTestEquipmentRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FTBomOptionRow
        Inherits Global.System.Data.DataRow
        
        Private tableFTBomOption As FTBomOptionDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFTBomOption = CType(Me.Table,FTBomOptionDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FTBomID() As Integer
            Get
                Return CType(Me(Me.tableFTBomOption.FTBomIDColumn),Integer)
            End Get
            Set
                Me(Me.tableFTBomOption.FTBomIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OptionTypeID() As Integer
            Get
                Return CType(Me(Me.tableFTBomOption.OptionTypeIDColumn),Integer)
            End Get
            Set
                Me(Me.tableFTBomOption.OptionTypeIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Quantity() As Integer
            Get
                Return CType(Me(Me.tableFTBomOption.QuantityColumn),Integer)
            End Get
            Set
                Me(Me.tableFTBomOption.QuantityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Setting() As String
            Get
                Try 
                    Return CType(Me(Me.tableFTBomOption.SettingColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Setting' in table 'FTBomOption' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFTBomOption.SettingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FTBomRow() As FTBomRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_FTBomOption_FTBom")),FTBomRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_FTBomOption_FTBom"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSettingNull() As Boolean
            Return Me.IsNull(Me.tableFTBomOption.SettingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSettingNull()
            Me(Me.tableFTBomOption.SettingColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FTBomTestEquipmentRow
        Inherits Global.System.Data.DataRow
        
        Private tableFTBomTestEquipment As FTBomTestEquipmentDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFTBomTestEquipment = CType(Me.Table,FTBomTestEquipmentDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FTBomID() As Integer
            Get
                Return CType(Me(Me.tableFTBomTestEquipment.FTBomIDColumn),Integer)
            End Get
            Set
                Me(Me.tableFTBomTestEquipment.FTBomIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TestEquipmentID() As Integer
            Get
                Return CType(Me(Me.tableFTBomTestEquipment.TestEquipmentIDColumn),Integer)
            End Get
            Set
                Me(Me.tableFTBomTestEquipment.TestEquipmentIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FTBomRow() As FTBomRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_FTBomTestEquipment_FTBom")),FTBomRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_FTBomTestEquipment_FTBom"))
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TempDataRow
        Inherits Global.System.Data.DataRow
        
        Private tableTempData As TempDataDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTempData = CType(Me.Table,TempDataDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableTempData.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableTempData.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QRCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableTempData.QRCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QRCode' in table 'TempData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTempData.QRCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QRCodeByUser() As String
            Get
                Try 
                    Return CType(Me(Me.tableTempData.QRCodeByUserColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'QRCodeByUser' in table 'TempData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTempData.QRCodeByUserColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubTypeID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTempData.SubTypeIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SubTypeID' in table 'TempData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTempData.SubTypeIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RegistrationDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableTempData.RegistrationDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RegistrationDate' in table 'TempData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTempData.RegistrationDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As String
            Get
                Try 
                    Return CType(Me(Me.tableTempData.StatusColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'TempData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTempData.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StorageID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTempData.StorageIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StorageID' in table 'TempData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTempData.StorageIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PeriodCheckTime() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTempData.PeriodCheckTimeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'PeriodCheckTime' in table 'TempData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTempData.PeriodCheckTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LifeTime() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTempData.LifeTimeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LifeTime' in table 'TempData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTempData.LifeTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SmallCode() As String
            Get
                Try 
                    Return CType(Me(Me.tableTempData.SmallCodeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SmallCode' in table 'TempData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTempData.SmallCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MCNo() As String
            Get
                Try 
                    Return CType(Me(Me.tableTempData.MCNoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MCNo' in table 'TempData' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTempData.MCNoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQRCodeNull() As Boolean
            Return Me.IsNull(Me.tableTempData.QRCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQRCodeNull()
            Me(Me.tableTempData.QRCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQRCodeByUserNull() As Boolean
            Return Me.IsNull(Me.tableTempData.QRCodeByUserColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQRCodeByUserNull()
            Me(Me.tableTempData.QRCodeByUserColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubTypeIDNull() As Boolean
            Return Me.IsNull(Me.tableTempData.SubTypeIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubTypeIDNull()
            Me(Me.tableTempData.SubTypeIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRegistrationDateNull() As Boolean
            Return Me.IsNull(Me.tableTempData.RegistrationDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRegistrationDateNull()
            Me(Me.tableTempData.RegistrationDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tableTempData.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me.tableTempData.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStorageIDNull() As Boolean
            Return Me.IsNull(Me.tableTempData.StorageIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStorageIDNull()
            Me(Me.tableTempData.StorageIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPeriodCheckTimeNull() As Boolean
            Return Me.IsNull(Me.tableTempData.PeriodCheckTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPeriodCheckTimeNull()
            Me(Me.tableTempData.PeriodCheckTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLifeTimeNull() As Boolean
            Return Me.IsNull(Me.tableTempData.LifeTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLifeTimeNull()
            Me(Me.tableTempData.LifeTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSmallCodeNull() As Boolean
            Return Me.IsNull(Me.tableTempData.SmallCodeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSmallCodeNull()
            Me(Me.tableTempData.SmallCodeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMCNoNull() As Boolean
            Return Me.IsNull(Me.tableTempData.MCNoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMCNoNull()
            Me(Me.tableTempData.MCNoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FTPCTypeRow
        Inherits Global.System.Data.DataRow
        
        Private tableFTPCType As FTPCTypeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFTPCType = CType(Me.Table,FTPCTypeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As Integer
            Get
                Return CType(Me(Me.tableFTPCType.IDColumn),Integer)
            End Get
            Set
                Me(Me.tableFTPCType.IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PCType() As String
            Get
                Return CType(Me(Me.tableFTPCType.PCTypeColumn),String)
            End Get
            Set
                Me(Me.tableFTPCType.PCTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PCMain() As String
            Get
                Return CType(Me(Me.tableFTPCType.PCMainColumn),String)
            End Get
            Set
                Me(Me.tableFTPCType.PCMainColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetFTBomRows() As FTBomRow()
            If (Me.Table.ChildRelations("FK_FTBom_FTPCType") Is Nothing) Then
                Return New FTBomRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_FTBom_FTPCType")),FTBomRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class UkebaraiDataRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As UkebaraiDataRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As UkebaraiDataRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As UkebaraiDataRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FTAlarmInfoRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FTAlarmInfoRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FTAlarmInfoRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FTAlarmInfoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FTAlarmTableRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FTAlarmTableRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FTAlarmTableRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FTAlarmTableRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FTDataRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FTDataRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FTDataRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FTDataRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FTMachineSettingRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FTMachineSettingRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FTMachineSettingRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FTMachineSettingRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MyUserRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MyUserRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MyUserRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MyUserRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class UserGroupsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As UserGroupsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As UserGroupsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As UserGroupsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TransactionDataRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TransactionDataRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TransactionDataRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TransactionDataRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FixedLCLRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FixedLCLRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FixedLCLRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FixedLCLRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TesterTypeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TesterTypeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TesterTypeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TesterTypeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class EquipmentLocationRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As EquipmentLocationRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As EquipmentLocationRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As EquipmentLocationRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DataRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As DataRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DataRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DataRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FTSetupReportRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FTSetupReportRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FTSetupReportRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FTSetupReportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FTBomRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FTBomRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FTBomRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FTBomRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FTBomOptionRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FTBomOptionRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FTBomOptionRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FTBomOptionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FTBomTestEquipmentRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FTBomTestEquipmentRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FTBomTestEquipmentRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FTBomTestEquipmentRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TempDataRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As TempDataRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TempDataRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TempDataRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FTPCTypeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As FTPCTypeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FTPCTypeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FTPCTypeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace DBxDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class UkebaraiDataTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "UkebaraiData"
            tableMapping.ColumnMappings.Add("DBxProcessID", "DBxProcessID")
            tableMapping.ColumnMappings.Add("DBxLotNo", "DBxLotNo")
            tableMapping.ColumnMappings.Add("DBxMCNo", "DBxMCNo")
            tableMapping.ColumnMappings.Add("DBxLotStartTime", "DBxLotStartTime")
            tableMapping.ColumnMappings.Add("DBxLotEndTime", "DBxLotEndTime")
            tableMapping.ColumnMappings.Add("LotNo", "LotNo")
            tableMapping.ColumnMappings.Add("Process_No", "Process_No")
            tableMapping.ColumnMappings.Add("Date", "Date")
            tableMapping.ColumnMappings.Add("Time", "Time")
            tableMapping.ColumnMappings.Add("Good_Qty", "Good_Qty")
            tableMapping.ColumnMappings.Add("NG_Qty", "NG_Qty")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [UkebaraiData] WHERE (([DBxProcessID] = @Original_DBxProcessID) AND ("& _ 
                "[DBxLotNo] = @Original_DBxLotNo) AND ([DBxMCNo] = @Original_DBxMCNo) AND ([DBxLo"& _ 
                "tStartTime] = @Original_DBxLotStartTime))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DBxProcessID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DBxProcessID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DBxLotNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DBxLotNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DBxMCNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DBxMCNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DBxLotStartTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DBxLotStartTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [UkebaraiData] ([DBxProcessID], [DBxLotNo], [DBxMCNo], [DBxLotStartTi"& _ 
                "me], [DBxLotEndTime], [LotNo], [Process_No], [Date], [Time], [Good_Qty], [NG_Qty"& _ 
                "]) VALUES (@DBxProcessID, @DBxLotNo, @DBxMCNo, @DBxLotStartTime, @DBxLotEndTime,"& _ 
                " @LotNo, @Process_No, @Date, @Time, @Good_Qty, @NG_Qty);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT DBxProcessID, D"& _ 
                "BxLotNo, DBxMCNo, DBxLotStartTime, DBxLotEndTime, LotNo, Process_No, Date, Time,"& _ 
                " Good_Qty, NG_Qty FROM UkebaraiData WHERE (DBxLotNo = @DBxLotNo) AND (DBxLotStar"& _ 
                "tTime = @DBxLotStartTime) AND (DBxMCNo = @DBxMCNo) AND (DBxProcessID = @DBxProce"& _ 
                "ssID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DBxProcessID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DBxProcessID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DBxLotNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DBxLotNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DBxMCNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DBxMCNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DBxLotStartTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DBxLotStartTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DBxLotEndTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DBxLotEndTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotNo", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Process_No", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Process_No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Date", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Time", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Time", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Good_Qty", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Good_Qty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NG_Qty", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NG_Qty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [UkebaraiData] SET [DBxProcessID] = @DBxProcessID, [DBxLotNo] = @DBxLotNo,"& _ 
                " [DBxMCNo] = @DBxMCNo, [DBxLotStartTime] = @DBxLotStartTime, [DBxLotEndTime] = @"& _ 
                "DBxLotEndTime, [LotNo] = @LotNo, [Process_No] = @Process_No, [Date] = @Date, [Ti"& _ 
                "me] = @Time, [Good_Qty] = @Good_Qty, [NG_Qty] = @NG_Qty WHERE (([DBxProcessID] ="& _ 
                " @Original_DBxProcessID) AND ([DBxLotNo] = @Original_DBxLotNo) AND ([DBxMCNo] = "& _ 
                "@Original_DBxMCNo) AND ([DBxLotStartTime] = @Original_DBxLotStartTime));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT"& _ 
                " DBxProcessID, DBxLotNo, DBxMCNo, DBxLotStartTime, DBxLotEndTime, LotNo, Process"& _ 
                "_No, Date, Time, Good_Qty, NG_Qty FROM UkebaraiData WHERE (DBxLotNo = @DBxLotNo)"& _ 
                " AND (DBxLotStartTime = @DBxLotStartTime) AND (DBxMCNo = @DBxMCNo) AND (DBxProce"& _ 
                "ssID = @DBxProcessID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DBxProcessID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DBxProcessID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DBxLotNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DBxLotNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DBxMCNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DBxMCNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DBxLotStartTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DBxLotStartTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DBxLotEndTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DBxLotEndTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotNo", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Process_No", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Process_No", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Date", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Date", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Time", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Time", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Good_Qty", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Good_Qty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NG_Qty", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NG_Qty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DBxProcessID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DBxProcessID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DBxLotNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DBxLotNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DBxMCNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DBxMCNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DBxLotStartTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DBxLotStartTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SelfCon.My.MySettings.Default.DBxConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     DBxProcessID, DBxLotNo, DBxMCNo, DBxLotStartTime, DBxLotEndTime, LotNo"& _ 
                ", Process_No, Date, Time, Good_Qty, NG_Qty"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         UkebaraiData"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT        DBxProcessID, DBxLotNo, DBxMCNo, DBxLotStartTime, DBxLotEndTime, Lo"& _ 
                "tNo, Process_No, Date, Time, Good_Qty, NG_Qty"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            UkebaraiData"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHE"& _ 
                "RE        (DBxProcessID = @DBxProcessID) AND (DBxLotNo = @DBxLotNo) AND (DBxMCNo"& _ 
                " = @DBxMCNo) AND (DBxLotStartTime = @DBxLotStartTime)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DBxProcessID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "DBxProcessID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DBxLotNo", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "DBxLotNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DBxMCNo", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "DBxMCNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DBxLotStartTime", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "DBxLotStartTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DBxDataSet.UkebaraiDataDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DBxDataSet.UkebaraiDataDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DBxDataSet.UkebaraiDataDataTable = New DBxDataSet.UkebaraiDataDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByPKs(ByVal DBxProcessID As Integer, ByVal DBxLotNo As String, ByVal DBxMCNo As String, ByVal DBxLotStartTime As Date) As DBxDataSet.UkebaraiDataDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(DBxProcessID,Integer)
            If (DBxLotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DBxLotNo")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(DBxLotNo,String)
            End If
            If (DBxMCNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DBxMCNo")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(DBxMCNo,String)
            End If
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(DBxLotStartTime,Date)
            Dim dataTable As DBxDataSet.UkebaraiDataDataTable = New DBxDataSet.UkebaraiDataDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DBxDataSet.UkebaraiDataDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DBxDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "UkebaraiData")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_DBxProcessID As Integer, ByVal Original_DBxLotNo As String, ByVal Original_DBxMCNo As String, ByVal Original_DBxLotStartTime As Date) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_DBxProcessID,Integer)
            If (Original_DBxLotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DBxLotNo")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_DBxLotNo,String)
            End If
            If (Original_DBxMCNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DBxMCNo")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_DBxMCNo,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_DBxLotStartTime,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal DBxProcessID As Integer, ByVal DBxLotNo As String, ByVal DBxMCNo As String, ByVal DBxLotStartTime As Date, ByVal DBxLotEndTime As Global.System.Nullable(Of Date), ByVal LotNo As String, ByVal Process_No As String, ByVal _Date As String, ByVal Time As String, ByVal Good_Qty As String, ByVal NG_Qty As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(DBxProcessID,Integer)
            If (DBxLotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DBxLotNo")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(DBxLotNo,String)
            End If
            If (DBxMCNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DBxMCNo")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(DBxMCNo,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(DBxLotStartTime,Date)
            If (DBxLotEndTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(DBxLotEndTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (LotNo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(LotNo,String)
            End If
            If (Process_No Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Process_No,String)
            End If
            If (_Date Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(_Date,String)
            End If
            If (Time Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Time,String)
            End If
            If (Good_Qty Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Good_Qty,String)
            End If
            If (NG_Qty Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(NG_Qty,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal DBxProcessID As Integer, ByVal DBxLotNo As String, ByVal DBxMCNo As String, ByVal DBxLotStartTime As Date, ByVal DBxLotEndTime As Global.System.Nullable(Of Date), ByVal LotNo As String, ByVal Process_No As String, ByVal _Date As String, ByVal Time As String, ByVal Good_Qty As String, ByVal NG_Qty As String, ByVal Original_DBxProcessID As Integer, ByVal Original_DBxLotNo As String, ByVal Original_DBxMCNo As String, ByVal Original_DBxLotStartTime As Date) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(DBxProcessID,Integer)
            If (DBxLotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DBxLotNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(DBxLotNo,String)
            End If
            If (DBxMCNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("DBxMCNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(DBxMCNo,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(DBxLotStartTime,Date)
            If (DBxLotEndTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(DBxLotEndTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (LotNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(LotNo,String)
            End If
            If (Process_No Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Process_No,String)
            End If
            If (_Date Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(_Date,String)
            End If
            If (Time Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Time,String)
            End If
            If (Good_Qty Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Good_Qty,String)
            End If
            If (NG_Qty Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(NG_Qty,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_DBxProcessID,Integer)
            If (Original_DBxLotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DBxLotNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_DBxLotNo,String)
            End If
            If (Original_DBxMCNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_DBxMCNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_DBxMCNo,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_DBxLotStartTime,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal DBxLotEndTime As Global.System.Nullable(Of Date), ByVal LotNo As String, ByVal Process_No As String, ByVal _Date As String, ByVal Time As String, ByVal Good_Qty As String, ByVal NG_Qty As String, ByVal Original_DBxProcessID As Integer, ByVal Original_DBxLotNo As String, ByVal Original_DBxMCNo As String, ByVal Original_DBxLotStartTime As Date) As Integer
            Return Me.Update(Original_DBxProcessID, Original_DBxLotNo, Original_DBxMCNo, Original_DBxLotStartTime, DBxLotEndTime, LotNo, Process_No, _Date, Time, Good_Qty, NG_Qty, Original_DBxProcessID, Original_DBxLotNo, Original_DBxMCNo, Original_DBxLotStartTime)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FTAlarmInfoTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FTAlarmInfo"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("RecordTime", "RecordTime")
            tableMapping.ColumnMappings.Add("AlarmID", "AlarmID")
            tableMapping.ColumnMappings.Add("LotNo", "LotNo")
            tableMapping.ColumnMappings.Add("MCNo", "MCNo")
            tableMapping.ColumnMappings.Add("ClearTime", "ClearTime")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[FTAlarmInfo] WHERE (([ID] = @Original_ID) AND ([RecordTime] = "& _ 
                "@Original_RecordTime) AND ([AlarmID] = @Original_AlarmID) AND ([LotNo] = @Origin"& _ 
                "al_LotNo) AND ([MCNo] = @Original_MCNo) AND ((@IsNull_ClearTime = 1 AND [ClearTi"& _ 
                "me] IS NULL) OR ([ClearTime] = @Original_ClearTime)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AlarmID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlarmID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LotNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MCNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MCNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ClearTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClearTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ClearTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClearTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[FTAlarmInfo] ([RecordTime], [AlarmID], [LotNo], [MCNo], [Clear"& _ 
                "Time]) VALUES (@RecordTime, @AlarmID, @LotNo, @MCNo, @ClearTime);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID, Re"& _ 
                "cordTime, AlarmID, LotNo, MCNo, ClearTime FROM FTAlarmInfo WHERE (ID = SCOPE_IDE"& _ 
                "NTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AlarmID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlarmID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MCNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MCNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClearTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClearTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[FTAlarmInfo] SET [RecordTime] = @RecordTime, [AlarmID] = @AlarmID, "& _ 
                "[LotNo] = @LotNo, [MCNo] = @MCNo, [ClearTime] = @ClearTime WHERE (([ID] = @Origi"& _ 
                "nal_ID) AND ([RecordTime] = @Original_RecordTime) AND ([AlarmID] = @Original_Ala"& _ 
                "rmID) AND ([LotNo] = @Original_LotNo) AND ([MCNo] = @Original_MCNo) AND ((@IsNul"& _ 
                "l_ClearTime = 1 AND [ClearTime] IS NULL) OR ([ClearTime] = @Original_ClearTime))"& _ 
                ");"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID, RecordTime, AlarmID, LotNo, MCNo, ClearTime FROM FTAlarmInfo WHER"& _ 
                "E (ID = @ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RecordTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AlarmID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlarmID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MCNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MCNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClearTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClearTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RecordTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RecordTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AlarmID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlarmID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LotNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MCNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MCNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ClearTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClearTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ClearTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClearTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SelfCon.My.MySettings.Default.DBxConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, RecordTime, AlarmID, LotNo, MCNo, ClearTime FROM dbo.FTAlarmInfo"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DBxDataSet.FTAlarmInfoDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DBxDataSet.FTAlarmInfoDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DBxDataSet.FTAlarmInfoDataTable = New DBxDataSet.FTAlarmInfoDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DBxDataSet.FTAlarmInfoDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DBxDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "FTAlarmInfo")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer, ByVal Original_RecordTime As Date, ByVal Original_AlarmID As Integer, ByVal Original_LotNo As String, ByVal Original_MCNo As String, ByVal Original_ClearTime As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_RecordTime,Date)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_AlarmID,Integer)
            If (Original_LotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LotNo")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_LotNo,String)
            End If
            If (Original_MCNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MCNo")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_MCNo,String)
            End If
            If (Original_ClearTime.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_ClearTime.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal RecordTime As Date, ByVal AlarmID As Integer, ByVal LotNo As String, ByVal MCNo As String, ByVal ClearTime As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(RecordTime,Date)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(AlarmID,Integer)
            If (LotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LotNo")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(LotNo,String)
            End If
            If (MCNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MCNo")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(MCNo,String)
            End If
            If (ClearTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ClearTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal RecordTime As Date, ByVal AlarmID As Integer, ByVal LotNo As String, ByVal MCNo As String, ByVal ClearTime As Global.System.Nullable(Of Date), ByVal Original_ID As Integer, ByVal Original_RecordTime As Date, ByVal Original_AlarmID As Integer, ByVal Original_LotNo As String, ByVal Original_MCNo As String, ByVal Original_ClearTime As Global.System.Nullable(Of Date), ByVal ID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(RecordTime,Date)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(AlarmID,Integer)
            If (LotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LotNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(LotNo,String)
            End If
            If (MCNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MCNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(MCNo,String)
            End If
            If (ClearTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ClearTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_RecordTime,Date)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_AlarmID,Integer)
            If (Original_LotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LotNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_LotNo,String)
            End If
            If (Original_MCNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MCNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_MCNo,String)
            End If
            If (Original_ClearTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_ClearTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal RecordTime As Date, ByVal AlarmID As Integer, ByVal LotNo As String, ByVal MCNo As String, ByVal ClearTime As Global.System.Nullable(Of Date), ByVal Original_ID As Integer, ByVal Original_RecordTime As Date, ByVal Original_AlarmID As Integer, ByVal Original_LotNo As String, ByVal Original_MCNo As String, ByVal Original_ClearTime As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(RecordTime, AlarmID, LotNo, MCNo, ClearTime, Original_ID, Original_RecordTime, Original_AlarmID, Original_LotNo, Original_MCNo, Original_ClearTime, Original_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FTAlarmTableTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FTAlarmTable"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("AlarmNo", "AlarmNo")
            tableMapping.ColumnMappings.Add("MachineType", "MachineType")
            tableMapping.ColumnMappings.Add("AlarmType", "AlarmType")
            tableMapping.ColumnMappings.Add("AlarmMessage", "AlarmMessage")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[FTAlarmTable] WHERE (([ID] = @Original_ID) AND ([AlarmNo] = @O"& _ 
                "riginal_AlarmNo) AND ([MachineType] = @Original_MachineType) AND ([AlarmType] = "& _ 
                "@Original_AlarmType) AND ([AlarmMessage] = @Original_AlarmMessage))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AlarmNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlarmNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MachineType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MachineType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AlarmType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlarmType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AlarmMessage", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlarmMessage", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[FTAlarmTable] ([AlarmNo], [MachineType], [AlarmType], [AlarmMe"& _ 
                "ssage]) VALUES (@AlarmNo, @MachineType, @AlarmType, @AlarmMessage);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID, "& _ 
                "AlarmNo, MachineType, AlarmType, AlarmMessage FROM FTAlarmTable WHERE (ID = SCOP"& _ 
                "E_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AlarmNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlarmNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MachineType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MachineType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AlarmType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlarmType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AlarmMessage", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlarmMessage", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[FTAlarmTable] SET [AlarmNo] = @AlarmNo, [MachineType] = @MachineTyp"& _ 
                "e, [AlarmType] = @AlarmType, [AlarmMessage] = @AlarmMessage WHERE (([ID] = @Orig"& _ 
                "inal_ID) AND ([AlarmNo] = @Original_AlarmNo) AND ([MachineType] = @Original_Mach"& _ 
                "ineType) AND ([AlarmType] = @Original_AlarmType) AND ([AlarmMessage] = @Original"& _ 
                "_AlarmMessage));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID, AlarmNo, MachineType, AlarmType, AlarmMessage FROM "& _ 
                "FTAlarmTable WHERE (ID = @ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AlarmNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlarmNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MachineType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MachineType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AlarmType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlarmType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AlarmMessage", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlarmMessage", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AlarmNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlarmNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MachineType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MachineType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AlarmType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlarmType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AlarmMessage", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlarmMessage", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SelfCon.My.MySettings.Default.DBxConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, AlarmNo, MachineType, AlarmType, AlarmMessage FROM dbo.FTAlarmTable"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DBxDataSet.FTAlarmTableDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DBxDataSet.FTAlarmTableDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DBxDataSet.FTAlarmTableDataTable = New DBxDataSet.FTAlarmTableDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DBxDataSet.FTAlarmTableDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DBxDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "FTAlarmTable")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer, ByVal Original_AlarmNo As String, ByVal Original_MachineType As String, ByVal Original_AlarmType As String, ByVal Original_AlarmMessage As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            If (Original_AlarmNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_AlarmNo")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_AlarmNo,String)
            End If
            If (Original_MachineType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MachineType")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_MachineType,String)
            End If
            If (Original_AlarmType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_AlarmType")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_AlarmType,String)
            End If
            If (Original_AlarmMessage Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_AlarmMessage")
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_AlarmMessage,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal AlarmNo As String, ByVal MachineType As String, ByVal AlarmType As String, ByVal AlarmMessage As String) As Integer
            If (AlarmNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AlarmNo")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(AlarmNo,String)
            End If
            If (MachineType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MachineType")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MachineType,String)
            End If
            If (AlarmType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AlarmType")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(AlarmType,String)
            End If
            If (AlarmMessage Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AlarmMessage")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(AlarmMessage,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal AlarmNo As String, ByVal MachineType As String, ByVal AlarmType As String, ByVal AlarmMessage As String, ByVal Original_ID As Integer, ByVal Original_AlarmNo As String, ByVal Original_MachineType As String, ByVal Original_AlarmType As String, ByVal Original_AlarmMessage As String, ByVal ID As Integer) As Integer
            If (AlarmNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AlarmNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(AlarmNo,String)
            End If
            If (MachineType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MachineType")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(MachineType,String)
            End If
            If (AlarmType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AlarmType")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(AlarmType,String)
            End If
            If (AlarmMessage Is Nothing) Then
                Throw New Global.System.ArgumentNullException("AlarmMessage")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(AlarmMessage,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_ID,Integer)
            If (Original_AlarmNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_AlarmNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_AlarmNo,String)
            End If
            If (Original_MachineType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MachineType")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_MachineType,String)
            End If
            If (Original_AlarmType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_AlarmType")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_AlarmType,String)
            End If
            If (Original_AlarmMessage Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_AlarmMessage")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_AlarmMessage,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal AlarmNo As String, ByVal MachineType As String, ByVal AlarmType As String, ByVal AlarmMessage As String, ByVal Original_ID As Integer, ByVal Original_AlarmNo As String, ByVal Original_MachineType As String, ByVal Original_AlarmType As String, ByVal Original_AlarmMessage As String) As Integer
            Return Me.Update(AlarmNo, MachineType, AlarmType, AlarmMessage, Original_ID, Original_AlarmNo, Original_MachineType, Original_AlarmType, Original_AlarmMessage, Original_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FTDataTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FTData"
            tableMapping.ColumnMappings.Add("MCNo", "MCNo")
            tableMapping.ColumnMappings.Add("LotNo", "LotNo")
            tableMapping.ColumnMappings.Add("LotStartTime", "LotStartTime")
            tableMapping.ColumnMappings.Add("MCType", "MCType")
            tableMapping.ColumnMappings.Add("OPNo", "OPNo")
            tableMapping.ColumnMappings.Add("OPRate", "OPRate")
            tableMapping.ColumnMappings.Add("MaximumRPM", "MaximumRPM")
            tableMapping.ColumnMappings.Add("AverageRPM", "AverageRPM")
            tableMapping.ColumnMappings.Add("MTBF", "MTBF")
            tableMapping.ColumnMappings.Add("MTTR", "MTTR")
            tableMapping.ColumnMappings.Add("AlarmTotal", "AlarmTotal")
            tableMapping.ColumnMappings.Add("LotEndTime", "LotEndTime")
            tableMapping.ColumnMappings.Add("RunTime", "RunTime")
            tableMapping.ColumnMappings.Add("StopTime", "StopTime")
            tableMapping.ColumnMappings.Add("AlarmTime", "AlarmTime")
            tableMapping.ColumnMappings.Add("EndOPNo", "EndOPNo")
            tableMapping.ColumnMappings.Add("TestTemperature", "TestTemperature")
            tableMapping.ColumnMappings.Add("ProgramName", "ProgramName")
            tableMapping.ColumnMappings.Add("TestFlowName", "TestFlowName")
            tableMapping.ColumnMappings.Add("ChannelATesterNo", "ChannelATesterNo")
            tableMapping.ColumnMappings.Add("ChannelBTesterNo", "ChannelBTesterNo")
            tableMapping.ColumnMappings.Add("BoxName", "BoxName")
            tableMapping.ColumnMappings.Add("ChannelATestBoxNo", "ChannelATestBoxNo")
            tableMapping.ColumnMappings.Add("ChannelBTestBoxNo", "ChannelBTestBoxNo")
            tableMapping.ColumnMappings.Add("SocketCheck", "SocketCheck")
            tableMapping.ColumnMappings.Add("GoodSampleQty", "GoodSampleQty")
            tableMapping.ColumnMappings.Add("NGSampleQty", "NGSampleQty")
            tableMapping.ColumnMappings.Add("LotJudgement", "LotJudgement")
            tableMapping.ColumnMappings.Add("Remark", "Remark")
            tableMapping.ColumnMappings.Add("GLCheck", "GLCheck")
            tableMapping.ColumnMappings.Add("TesterType", "TesterType")
            tableMapping.ColumnMappings.Add("LCL", "LCL")
            tableMapping.ColumnMappings.Add("InitialYield", "InitialYield")
            tableMapping.ColumnMappings.Add("FirstEndYield", "FirstEndYield")
            tableMapping.ColumnMappings.Add("FinalYield", "FinalYield")
            tableMapping.ColumnMappings.Add("MarkingInspection", "MarkingInspection")
            tableMapping.ColumnMappings.Add("LotStartVisualInspectNGQty", "LotStartVisualInspectNGQty")
            tableMapping.ColumnMappings.Add("LotStartVisualInspectTotalQty", "LotStartVisualInspectTotalQty")
            tableMapping.ColumnMappings.Add("LotEndVisualInspectNGQty", "LotEndVisualInspectNGQty")
            tableMapping.ColumnMappings.Add("LotEndVisualInspectTotalQty", "LotEndVisualInspectTotalQty")
            tableMapping.ColumnMappings.Add("DuringProductionCheck", "DuringProductionCheck")
            tableMapping.ColumnMappings.Add("FirstAutoAsiCheck", "FirstAutoAsiCheck")
            tableMapping.ColumnMappings.Add("SecondAutoAsiCheck", "SecondAutoAsiCheck")
            tableMapping.ColumnMappings.Add("SocketChange", "SocketChange")
            tableMapping.ColumnMappings.Add("InputQty", "InputQty")
            tableMapping.ColumnMappings.Add("TotalGood", "TotalGood")
            tableMapping.ColumnMappings.Add("TotalNG", "TotalNG")
            tableMapping.ColumnMappings.Add("FirstMeka1Qty", "FirstMeka1Qty")
            tableMapping.ColumnMappings.Add("FirstMeka2Qty", "FirstMeka2Qty")
            tableMapping.ColumnMappings.Add("FirstNGQty", "FirstNGQty")
            tableMapping.ColumnMappings.Add("FirstUnknowQty", "FirstUnknowQty")
            tableMapping.ColumnMappings.Add("HandlerCounterQty", "HandlerCounterQty")
            tableMapping.ColumnMappings.Add("SecondMeka1Qty", "SecondMeka1Qty")
            tableMapping.ColumnMappings.Add("SecondMeka4Qty", "SecondMeka4Qty")
            tableMapping.ColumnMappings.Add("SecondNGQty", "SecondNGQty")
            tableMapping.ColumnMappings.Add("SecondUnknowQty", "SecondUnknowQty")
            tableMapping.ColumnMappings.Add("TesterACounterQty", "TesterACounterQty")
            tableMapping.ColumnMappings.Add("TesterBCounterQty", "TesterBCounterQty")
            tableMapping.ColumnMappings.Add("TotalMeka1Qty", "TotalMeka1Qty")
            tableMapping.ColumnMappings.Add("TotalMeka2Qty", "TotalMeka2Qty")
            tableMapping.ColumnMappings.Add("TotalMeka4Qty", "TotalMeka4Qty")
            tableMapping.ColumnMappings.Add("TotalUnknowQty", "TotalUnknowQty")
            tableMapping.ColumnMappings.Add("FirstGoodBin1Qty", "FirstGoodBin1Qty")
            tableMapping.ColumnMappings.Add("FirstGoodBin2Qty", "FirstGoodBin2Qty")
            tableMapping.ColumnMappings.Add("SecondGoodBin1Qty", "SecondGoodBin1Qty")
            tableMapping.ColumnMappings.Add("SecondGoodBin2Qty", "SecondGoodBin2Qty")
            tableMapping.ColumnMappings.Add("TotalGoodBin1Qty", "TotalGoodBin1Qty")
            tableMapping.ColumnMappings.Add("TotalGoodBin2Qty", "TotalGoodBin2Qty")
            tableMapping.ColumnMappings.Add("TotalNGQty", "TotalNGQty")
            tableMapping.ColumnMappings.Add("SocketNumCh1", "SocketNumCh1")
            tableMapping.ColumnMappings.Add("SocketNumCh2", "SocketNumCh2")
            tableMapping.ColumnMappings.Add("SocketNumCh3", "SocketNumCh3")
            tableMapping.ColumnMappings.Add("SocketNumCh4", "SocketNumCh4")
            tableMapping.ColumnMappings.Add("ChangedSocketNumCh1", "ChangedSocketNumCh1")
            tableMapping.ColumnMappings.Add("ChangedSocketNumCh2", "ChangedSocketNumCh2")
            tableMapping.ColumnMappings.Add("ChangedSocketNumCh3", "ChangedSocketNumCh3")
            tableMapping.ColumnMappings.Add("ChangedSocketNumCh4", "ChangedSocketNumCh4")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [FTData] WHERE (([MCNo] = @Original_MCNo) AND ([LotNo] = @Original_Lo"& _ 
                "tNo) AND ([LotStartTime] = @Original_LotStartTime) AND ((@IsNull_MCType = 1 AND "& _ 
                "[MCType] IS NULL) OR ([MCType] = @Original_MCType)) AND ((@IsNull_OPNo = 1 AND ["& _ 
                "OPNo] IS NULL) OR ([OPNo] = @Original_OPNo)) AND ((@IsNull_InputQty = 1 AND [Inp"& _ 
                "utQty] IS NULL) OR ([InputQty] = @Original_InputQty)) AND ((@IsNull_TotalGood = "& _ 
                "1 AND [TotalGood] IS NULL) OR ([TotalGood] = @Original_TotalGood)) AND ((@IsNull"& _ 
                "_TotalNG = 1 AND [TotalNG] IS NULL) OR ([TotalNG] = @Original_TotalNG)) AND ((@I"& _ 
                "sNull_OPRate = 1 AND [OPRate] IS NULL) OR ([OPRate] = @Original_OPRate)) AND ((@"& _ 
                "IsNull_MaximumRPM = 1 AND [MaximumRPM] IS NULL) OR ([MaximumRPM] = @Original_Max"& _ 
                "imumRPM)) AND ((@IsNull_AverageRPM = 1 AND [AverageRPM] IS NULL) OR ([AverageRPM"& _ 
                "] = @Original_AverageRPM)) AND ((@IsNull_MTBF = 1 AND [MTBF] IS NULL) OR ([MTBF]"& _ 
                " = @Original_MTBF)) AND ((@IsNull_MTTR = 1 AND [MTTR] IS NULL) OR ([MTTR] = @Ori"& _ 
                "ginal_MTTR)) AND ((@IsNull_AlarmTotal = 1 AND [AlarmTotal] IS NULL) OR ([AlarmTo"& _ 
                "tal] = @Original_AlarmTotal)) AND ((@IsNull_LotEndTime = 1 AND [LotEndTime] IS N"& _ 
                "ULL) OR ([LotEndTime] = @Original_LotEndTime)) AND ((@IsNull_RunTime = 1 AND [Ru"& _ 
                "nTime] IS NULL) OR ([RunTime] = @Original_RunTime)) AND ((@IsNull_StopTime = 1 A"& _ 
                "ND [StopTime] IS NULL) OR ([StopTime] = @Original_StopTime)) AND ((@IsNull_Alarm"& _ 
                "Time = 1 AND [AlarmTime] IS NULL) OR ([AlarmTime] = @Original_AlarmTime)) AND (("& _ 
                "@IsNull_BoxName = 1 AND [BoxName] IS NULL) OR ([BoxName] = @Original_BoxName)) A"& _ 
                "ND ((@IsNull_ChannelATestBoxNo = 1 AND [ChannelATestBoxNo] IS NULL) OR ([Channel"& _ 
                "ATestBoxNo] = @Original_ChannelATestBoxNo)) AND ((@IsNull_ChannelATesterNo = 1 A"& _ 
                "ND [ChannelATesterNo] IS NULL) OR ([ChannelATesterNo] = @Original_ChannelATester"& _ 
                "No)) AND ((@IsNull_ChannelBTestBoxNo = 1 AND [ChannelBTestBoxNo] IS NULL) OR ([C"& _ 
                "hannelBTestBoxNo] = @Original_ChannelBTestBoxNo)) AND ((@IsNull_ChannelBTesterNo"& _ 
                " = 1 AND [ChannelBTesterNo] IS NULL) OR ([ChannelBTesterNo] = @Original_ChannelB"& _ 
                "TesterNo)) AND ((@IsNull_EndOPNo = 1 AND [EndOPNo] IS NULL) OR ([EndOPNo] = @Ori"& _ 
                "ginal_EndOPNo)) AND ((@IsNull_FirstMeka1Qty = 1 AND [FirstMeka1Qty] IS NULL) OR "& _ 
                "([FirstMeka1Qty] = @Original_FirstMeka1Qty)) AND ((@IsNull_FirstMeka2Qty = 1 AND"& _ 
                " [FirstMeka2Qty] IS NULL) OR ([FirstMeka2Qty] = @Original_FirstMeka2Qty)) AND (("& _ 
                "@IsNull_FirstNGQty = 1 AND [FirstNGQty] IS NULL) OR ([FirstNGQty] = @Original_Fi"& _ 
                "rstNGQty)) AND ((@IsNull_FirstUnknowQty = 1 AND [FirstUnknowQty] IS NULL) OR ([F"& _ 
                "irstUnknowQty] = @Original_FirstUnknowQty)) AND ((@IsNull_GLCheck = 1 AND [GLChe"& _ 
                "ck] IS NULL) OR ([GLCheck] = @Original_GLCheck)) AND ((@IsNull_GoodSampleQty = 1"& _ 
                " AND [GoodSampleQty] IS NULL) OR ([GoodSampleQty] = @Original_GoodSampleQty)) AN"& _ 
                "D ((@IsNull_HandlerCounterQty = 1 AND [HandlerCounterQty] IS NULL) OR ([HandlerC"& _ 
                "ounterQty] = @Original_HandlerCounterQty)) AND ((@IsNull_LotJudgement = 1 AND [L"& _ 
                "otJudgement] IS NULL) OR ([LotJudgement] = @Original_LotJudgement)) AND ((@IsNul"& _ 
                "l_NGSampleQty = 1 AND [NGSampleQty] IS NULL) OR ([NGSampleQty] = @Original_NGSam"& _ 
                "pleQty)) AND ((@IsNull_ProgramName = 1 AND [ProgramName] IS NULL) OR ([ProgramNa"& _ 
                "me] = @Original_ProgramName)) AND ((@IsNull_Remark = 1 AND [Remark] IS NULL) OR "& _ 
                "([Remark] = @Original_Remark)) AND ((@IsNull_SecondMeka1Qty = 1 AND [SecondMeka1"& _ 
                "Qty] IS NULL) OR ([SecondMeka1Qty] = @Original_SecondMeka1Qty)) AND ((@IsNull_Se"& _ 
                "condMeka4Qty = 1 AND [SecondMeka4Qty] IS NULL) OR ([SecondMeka4Qty] = @Original_"& _ 
                "SecondMeka4Qty)) AND ((@IsNull_SecondNGQty = 1 AND [SecondNGQty] IS NULL) OR ([S"& _ 
                "econdNGQty] = @Original_SecondNGQty)) AND ((@IsNull_SecondUnknowQty = 1 AND [Sec"& _ 
                "ondUnknowQty] IS NULL) OR ([SecondUnknowQty] = @Original_SecondUnknowQty)) AND ("& _ 
                "(@IsNull_SocketCheck = 1 AND [SocketCheck] IS NULL) OR ([SocketCheck] = @Origina"& _ 
                "l_SocketCheck)) AND ((@IsNull_TestFlowName = 1 AND [TestFlowName] IS NULL) OR (["& _ 
                "TestFlowName] = @Original_TestFlowName)) AND ((@IsNull_TestTemperature = 1 AND ["& _ 
                "TestTemperature] IS NULL) OR ([TestTemperature] = @Original_TestTemperature)) AN"& _ 
                "D ((@IsNull_TesterACounterQty = 1 AND [TesterACounterQty] IS NULL) OR ([TesterAC"& _ 
                "ounterQty] = @Original_TesterACounterQty)) AND ((@IsNull_TesterBCounterQty = 1 A"& _ 
                "ND [TesterBCounterQty] IS NULL) OR ([TesterBCounterQty] = @Original_TesterBCount"& _ 
                "erQty)) AND ((@IsNull_TotalMeka1Qty = 1 AND [TotalMeka1Qty] IS NULL) OR ([TotalM"& _ 
                "eka1Qty] = @Original_TotalMeka1Qty)) AND ((@IsNull_TotalMeka2Qty = 1 AND [TotalM"& _ 
                "eka2Qty] IS NULL) OR ([TotalMeka2Qty] = @Original_TotalMeka2Qty)) AND ((@IsNull_"& _ 
                "TotalMeka4Qty = 1 AND [TotalMeka4Qty] IS NULL) OR ([TotalMeka4Qty] = @Original_T"& _ 
                "otalMeka4Qty)) AND ((@IsNull_TotalUnknowQty = 1 AND [TotalUnknowQty] IS NULL) OR"& _ 
                " ([TotalUnknowQty] = @Original_TotalUnknowQty)) AND ((@IsNull_TesterType = 1 AND"& _ 
                " [TesterType] IS NULL) OR ([TesterType] = @Original_TesterType)) AND ((@IsNull_I"& _ 
                "nitialYield = 1 AND [InitialYield] IS NULL) OR ([InitialYield] = @Original_Initi"& _ 
                "alYield)) AND ((@IsNull_FinalYield = 1 AND [FinalYield] IS NULL) OR ([FinalYield"& _ 
                "] = @Original_FinalYield)) AND ((@IsNull_FirstEndYield = 1 AND [FirstEndYield] I"& _ 
                "S NULL) OR ([FirstEndYield] = @Original_FirstEndYield)) AND ((@IsNull_LCL = 1 AN"& _ 
                "D [LCL] IS NULL) OR ([LCL] = @Original_LCL)) AND ((@IsNull_DuringProductionCheck"& _ 
                " = 1 AND [DuringProductionCheck] IS NULL) OR ([DuringProductionCheck] = @Origina"& _ 
                "l_DuringProductionCheck)) AND ((@IsNull_FirstAutoAsiCheck = 1 AND [FirstAutoAsiC"& _ 
                "heck] IS NULL) OR ([FirstAutoAsiCheck] = @Original_FirstAutoAsiCheck)) AND ((@Is"& _ 
                "Null_LotEndVisualInspectNGQty = 1 AND [LotEndVisualInspectNGQty] IS NULL) OR ([L"& _ 
                "otEndVisualInspectNGQty] = @Original_LotEndVisualInspectNGQty)) AND ((@IsNull_Lo"& _ 
                "tEndVisualInspectTotalQty = 1 AND [LotEndVisualInspectTotalQty] IS NULL) OR ([Lo"& _ 
                "tEndVisualInspectTotalQty] = @Original_LotEndVisualInspectTotalQty)) AND ((@IsNu"& _ 
                "ll_LotStartVisualInspectNGQty = 1 AND [LotStartVisualInspectNGQty] IS NULL) OR ("& _ 
                "[LotStartVisualInspectNGQty] = @Original_LotStartVisualInspectNGQty)) AND ((@IsN"& _ 
                "ull_LotStartVisualInspectTotalQty = 1 AND [LotStartVisualInspectTotalQty] IS NUL"& _ 
                "L) OR ([LotStartVisualInspectTotalQty] = @Original_LotStartVisualInspectTotalQty"& _ 
                ")) AND ((@IsNull_MarkingInspection = 1 AND [MarkingInspection] IS NULL) OR ([Mar"& _ 
                "kingInspection] = @Original_MarkingInspection)) AND ((@IsNull_SecondAutoAsiCheck"& _ 
                " = 1 AND [SecondAutoAsiCheck] IS NULL) OR ([SecondAutoAsiCheck] = @Original_Seco"& _ 
                "ndAutoAsiCheck)) AND ((@IsNull_SocketChange = 1 AND [SocketChange] IS NULL) OR ("& _ 
                "[SocketChange] = @Original_SocketChange)) AND ((@IsNull_FirstGoodBin1Qty = 1 AND"& _ 
                " [FirstGoodBin1Qty] IS NULL) OR ([FirstGoodBin1Qty] = @Original_FirstGoodBin1Qty"& _ 
                ")) AND ((@IsNull_FirstGoodBin2Qty = 1 AND [FirstGoodBin2Qty] IS NULL) OR ([First"& _ 
                "GoodBin2Qty] = @Original_FirstGoodBin2Qty)) AND ((@IsNull_SecondGoodBin1Qty = 1 "& _ 
                "AND [SecondGoodBin1Qty] IS NULL) OR ([SecondGoodBin1Qty] = @Original_SecondGoodB"& _ 
                "in1Qty)) AND ((@IsNull_SecondGoodBin2Qty = 1 AND [SecondGoodBin2Qty] IS NULL) OR"& _ 
                " ([SecondGoodBin2Qty] = @Original_SecondGoodBin2Qty)) AND ((@IsNull_TotalGoodBin"& _ 
                "1Qty = 1 AND [TotalGoodBin1Qty] IS NULL) OR ([TotalGoodBin1Qty] = @Original_Tota"& _ 
                "lGoodBin1Qty)) AND ((@IsNull_TotalGoodBin2Qty = 1 AND [TotalGoodBin2Qty] IS NULL"& _ 
                ") OR ([TotalGoodBin2Qty] = @Original_TotalGoodBin2Qty)) AND ((@IsNull_TotalNGQty"& _ 
                " = 1 AND [TotalNGQty] IS NULL) OR ([TotalNGQty] = @Original_TotalNGQty)) AND ((@"& _ 
                "IsNull_ChangedSocketNumCh1 = 1 AND [ChangedSocketNumCh1] IS NULL) OR ([ChangedSo"& _ 
                "cketNumCh1] = @Original_ChangedSocketNumCh1)) AND ((@IsNull_ChangedSocketNumCh2 "& _ 
                "= 1 AND [ChangedSocketNumCh2] IS NULL) OR ([ChangedSocketNumCh2] = @Original_Cha"& _ 
                "ngedSocketNumCh2)) AND ((@IsNull_ChangedSocketNumCh3 = 1 AND [ChangedSocketNumCh"& _ 
                "3] IS NULL) OR ([ChangedSocketNumCh3] = @Original_ChangedSocketNumCh3)) AND ((@I"& _ 
                "sNull_ChangedSocketNumCh4 = 1 AND [ChangedSocketNumCh4] IS NULL) OR ([ChangedSoc"& _ 
                "ketNumCh4] = @Original_ChangedSocketNumCh4)) AND ((@IsNull_SocketNumCh1 = 1 AND "& _ 
                "[SocketNumCh1] IS NULL) OR ([SocketNumCh1] = @Original_SocketNumCh1)) AND ((@IsN"& _ 
                "ull_SocketNumCh2 = 1 AND [SocketNumCh2] IS NULL) OR ([SocketNumCh2] = @Original_"& _ 
                "SocketNumCh2)) AND ((@IsNull_SocketNumCh3 = 1 AND [SocketNumCh3] IS NULL) OR ([S"& _ 
                "ocketNumCh3] = @Original_SocketNumCh3)) AND ((@IsNull_SocketNumCh4 = 1 AND [Sock"& _ 
                "etNumCh4] IS NULL) OR ([SocketNumCh4] = @Original_SocketNumCh4)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MCNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MCNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LotNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LotStartTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotStartTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MCType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MCType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MCType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MCType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OPNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPNo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_InputQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InputQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_InputQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InputQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TotalGood", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalGood", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TotalGood", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalGood", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TotalNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalNG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TotalNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalNG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OPRate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPRate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPRate", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPRate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MaximumRPM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaximumRPM", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MaximumRPM", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaximumRPM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AverageRPM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AverageRPM", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AverageRPM", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AverageRPM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MTBF", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MTBF", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MTBF", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MTBF", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MTTR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MTTR", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MTTR", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MTTR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AlarmTotal", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlarmTotal", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AlarmTotal", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlarmTotal", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LotEndTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotEndTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LotEndTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotEndTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RunTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RunTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RunTime", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RunTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_StopTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StopTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StopTime", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StopTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AlarmTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlarmTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AlarmTime", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlarmTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BoxName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BoxName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BoxName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BoxName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ChannelATestBoxNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChannelATestBoxNo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ChannelATestBoxNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChannelATestBoxNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ChannelATesterNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChannelATesterNo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ChannelATesterNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChannelATesterNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ChannelBTestBoxNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChannelBTestBoxNo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ChannelBTestBoxNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChannelBTestBoxNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ChannelBTesterNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChannelBTesterNo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ChannelBTesterNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChannelBTesterNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EndOPNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EndOPNo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EndOPNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EndOPNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FirstMeka1Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstMeka1Qty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FirstMeka1Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstMeka1Qty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FirstMeka2Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstMeka2Qty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FirstMeka2Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstMeka2Qty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FirstNGQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstNGQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FirstNGQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstNGQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FirstUnknowQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstUnknowQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FirstUnknowQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstUnknowQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GLCheck", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GLCheck", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GLCheck", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GLCheck", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GoodSampleQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GoodSampleQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GoodSampleQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GoodSampleQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_HandlerCounterQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HandlerCounterQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_HandlerCounterQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HandlerCounterQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LotJudgement", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotJudgement", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LotJudgement", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotJudgement", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NGSampleQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NGSampleQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NGSampleQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NGSampleQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ProgramName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProgramName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ProgramName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProgramName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remark", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remark", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remark", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remark", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SecondMeka1Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondMeka1Qty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SecondMeka1Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondMeka1Qty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SecondMeka4Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondMeka4Qty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SecondMeka4Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondMeka4Qty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SecondNGQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondNGQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SecondNGQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondNGQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SecondUnknowQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondUnknowQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SecondUnknowQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondUnknowQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SocketCheck", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocketCheck", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SocketCheck", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocketCheck", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TestFlowName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TestFlowName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TestFlowName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TestFlowName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TestTemperature", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TestTemperature", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TestTemperature", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TestTemperature", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TesterACounterQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TesterACounterQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TesterACounterQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TesterACounterQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TesterBCounterQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TesterBCounterQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TesterBCounterQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TesterBCounterQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TotalMeka1Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalMeka1Qty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TotalMeka1Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalMeka1Qty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TotalMeka2Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalMeka2Qty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TotalMeka2Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalMeka2Qty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TotalMeka4Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalMeka4Qty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TotalMeka4Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalMeka4Qty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TotalUnknowQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalUnknowQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TotalUnknowQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalUnknowQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TesterType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TesterType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TesterType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TesterType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_InitialYield", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InitialYield", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_InitialYield", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InitialYield", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FinalYield", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FinalYield", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FinalYield", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FinalYield", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FirstEndYield", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstEndYield", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FirstEndYield", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstEndYield", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LCL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LCL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LCL", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LCL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DuringProductionCheck", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DuringProductionCheck", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DuringProductionCheck", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DuringProductionCheck", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FirstAutoAsiCheck", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstAutoAsiCheck", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FirstAutoAsiCheck", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstAutoAsiCheck", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LotEndVisualInspectNGQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotEndVisualInspectNGQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LotEndVisualInspectNGQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotEndVisualInspectNGQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LotEndVisualInspectTotalQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotEndVisualInspectTotalQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LotEndVisualInspectTotalQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotEndVisualInspectTotalQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LotStartVisualInspectNGQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotStartVisualInspectNGQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LotStartVisualInspectNGQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotStartVisualInspectNGQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LotStartVisualInspectTotalQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotStartVisualInspectTotalQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LotStartVisualInspectTotalQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotStartVisualInspectTotalQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MarkingInspection", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarkingInspection", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MarkingInspection", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarkingInspection", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SecondAutoAsiCheck", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondAutoAsiCheck", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SecondAutoAsiCheck", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondAutoAsiCheck", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SocketChange", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocketChange", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SocketChange", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocketChange", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FirstGoodBin1Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstGoodBin1Qty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FirstGoodBin1Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstGoodBin1Qty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FirstGoodBin2Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstGoodBin2Qty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FirstGoodBin2Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstGoodBin2Qty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SecondGoodBin1Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondGoodBin1Qty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SecondGoodBin1Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondGoodBin1Qty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SecondGoodBin2Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondGoodBin2Qty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SecondGoodBin2Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondGoodBin2Qty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TotalGoodBin1Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalGoodBin1Qty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TotalGoodBin1Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalGoodBin1Qty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TotalGoodBin2Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalGoodBin2Qty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TotalGoodBin2Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalGoodBin2Qty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TotalNGQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalNGQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TotalNGQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalNGQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ChangedSocketNumCh1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChangedSocketNumCh1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ChangedSocketNumCh1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChangedSocketNumCh1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ChangedSocketNumCh2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChangedSocketNumCh2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ChangedSocketNumCh2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChangedSocketNumCh2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ChangedSocketNumCh3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChangedSocketNumCh3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ChangedSocketNumCh3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChangedSocketNumCh3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ChangedSocketNumCh4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChangedSocketNumCh4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ChangedSocketNumCh4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChangedSocketNumCh4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SocketNumCh1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocketNumCh1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SocketNumCh1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocketNumCh1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SocketNumCh2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocketNumCh2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SocketNumCh2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocketNumCh2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SocketNumCh3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocketNumCh3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SocketNumCh3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocketNumCh3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SocketNumCh4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocketNumCh4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SocketNumCh4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocketNumCh4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [FTData] ([MCNo], [LotNo], [LotStartTime], [MCType], [OPNo], [InputQt"& _ 
                "y], [TotalGood], [TotalNG], [OPRate], [MaximumRPM], [AverageRPM], [MTBF], [MTTR]"& _ 
                ", [AlarmTotal], [LotEndTime], [RunTime], [StopTime], [AlarmTime], [BoxName], [Ch"& _ 
                "annelATestBoxNo], [ChannelATesterNo], [ChannelBTestBoxNo], [ChannelBTesterNo], ["& _ 
                "EndOPNo], [FirstMeka1Qty], [FirstMeka2Qty], [FirstNGQty], [FirstUnknowQty], [GLC"& _ 
                "heck], [GoodSampleQty], [HandlerCounterQty], [LotJudgement], [NGSampleQty], [Pro"& _ 
                "gramName], [Remark], [SecondMeka1Qty], [SecondMeka4Qty], [SecondNGQty], [SecondU"& _ 
                "nknowQty], [SocketCheck], [TestFlowName], [TestTemperature], [TesterACounterQty]"& _ 
                ", [TesterBCounterQty], [TotalMeka1Qty], [TotalMeka2Qty], [TotalMeka4Qty], [Total"& _ 
                "UnknowQty], [TesterType], [InitialYield], [FinalYield], [FirstEndYield], [LCL], "& _ 
                "[DuringProductionCheck], [FirstAutoAsiCheck], [LotEndVisualInspectNGQty], [LotEn"& _ 
                "dVisualInspectTotalQty], [LotStartVisualInspectNGQty], [LotStartVisualInspectTot"& _ 
                "alQty], [MarkingInspection], [SecondAutoAsiCheck], [SocketChange], [FirstGoodBin"& _ 
                "1Qty], [FirstGoodBin2Qty], [SecondGoodBin1Qty], [SecondGoodBin2Qty], [TotalGoodB"& _ 
                "in1Qty], [TotalGoodBin2Qty], [TotalNGQty], [ChangedSocketNumCh1], [ChangedSocket"& _ 
                "NumCh2], [ChangedSocketNumCh3], [ChangedSocketNumCh4], [SocketNumCh1], [SocketNu"& _ 
                "mCh2], [SocketNumCh3], [SocketNumCh4]) VALUES (@MCNo, @LotNo, @LotStartTime, @MC"& _ 
                "Type, @OPNo, @InputQty, @TotalGood, @TotalNG, @OPRate, @MaximumRPM, @AverageRPM,"& _ 
                " @MTBF, @MTTR, @AlarmTotal, @LotEndTime, @RunTime, @StopTime, @AlarmTime, @BoxNa"& _ 
                "me, @ChannelATestBoxNo, @ChannelATesterNo, @ChannelBTestBoxNo, @ChannelBTesterNo"& _ 
                ", @EndOPNo, @FirstMeka1Qty, @FirstMeka2Qty, @FirstNGQty, @FirstUnknowQty, @GLChe"& _ 
                "ck, @GoodSampleQty, @HandlerCounterQty, @LotJudgement, @NGSampleQty, @ProgramNam"& _ 
                "e, @Remark, @SecondMeka1Qty, @SecondMeka4Qty, @SecondNGQty, @SecondUnknowQty, @S"& _ 
                "ocketCheck, @TestFlowName, @TestTemperature, @TesterACounterQty, @TesterBCounter"& _ 
                "Qty, @TotalMeka1Qty, @TotalMeka2Qty, @TotalMeka4Qty, @TotalUnknowQty, @TesterTyp"& _ 
                "e, @InitialYield, @FinalYield, @FirstEndYield, @LCL, @DuringProductionCheck, @Fi"& _ 
                "rstAutoAsiCheck, @LotEndVisualInspectNGQty, @LotEndVisualInspectTotalQty, @LotSt"& _ 
                "artVisualInspectNGQty, @LotStartVisualInspectTotalQty, @MarkingInspection, @Seco"& _ 
                "ndAutoAsiCheck, @SocketChange, @FirstGoodBin1Qty, @FirstGoodBin2Qty, @SecondGood"& _ 
                "Bin1Qty, @SecondGoodBin2Qty, @TotalGoodBin1Qty, @TotalGoodBin2Qty, @TotalNGQty, "& _ 
                "@ChangedSocketNumCh1, @ChangedSocketNumCh2, @ChangedSocketNumCh3, @ChangedSocket"& _ 
                "NumCh4, @SocketNumCh1, @SocketNumCh2, @SocketNumCh3, @SocketNumCh4);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT MCN"& _ 
                "o, LotNo, LotStartTime, MCType, OPNo, InputQty, TotalGood, TotalNG, OPRate, Maxi"& _ 
                "mumRPM, AverageRPM, MTBF, MTTR, AlarmTotal, LotEndTime, RunTime, StopTime, Alarm"& _ 
                "Time, BoxName, ChannelATestBoxNo, ChannelATesterNo, ChannelBTestBoxNo, ChannelBT"& _ 
                "esterNo, EndOPNo, FirstMeka1Qty, FirstMeka2Qty, FirstNGQty, FirstUnknowQty, GLCh"& _ 
                "eck, GoodSampleQty, HandlerCounterQty, LotJudgement, NGSampleQty, ProgramName, R"& _ 
                "emark, SecondMeka1Qty, SecondMeka4Qty, SecondNGQty, SecondUnknowQty, SocketCheck"& _ 
                ", TestFlowName, TestTemperature, TesterACounterQty, TesterBCounterQty, TotalMeka"& _ 
                "1Qty, TotalMeka2Qty, TotalMeka4Qty, TotalUnknowQty, TesterType, InitialYield, Fi"& _ 
                "nalYield, FirstEndYield, LCL, DuringProductionCheck, FirstAutoAsiCheck, LotEndVi"& _ 
                "sualInspectNGQty, LotEndVisualInspectTotalQty, LotStartVisualInspectNGQty, LotSt"& _ 
                "artVisualInspectTotalQty, MarkingInspection, SecondAutoAsiCheck, SocketChange, F"& _ 
                "irstGoodBin1Qty, FirstGoodBin2Qty, SecondGoodBin1Qty, SecondGoodBin2Qty, TotalGo"& _ 
                "odBin1Qty, TotalGoodBin2Qty, TotalNGQty, ChangedSocketNumCh1, ChangedSocketNumCh"& _ 
                "2, ChangedSocketNumCh3, ChangedSocketNumCh4, SocketNumCh1, SocketNumCh2, SocketN"& _ 
                "umCh3, SocketNumCh4 FROM FTData WHERE (LotNo = @LotNo) AND (LotStartTime = @LotS"& _ 
                "tartTime) AND (MCNo = @MCNo)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MCNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MCNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotStartTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotStartTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MCType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MCType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InputQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InputQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TotalGood", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalGood", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TotalNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPRate", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPRate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaximumRPM", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaximumRPM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AverageRPM", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AverageRPM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MTBF", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MTBF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MTTR", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MTTR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AlarmTotal", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlarmTotal", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotEndTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotEndTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RunTime", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RunTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StopTime", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StopTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AlarmTime", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlarmTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BoxName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BoxName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ChannelATestBoxNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChannelATestBoxNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ChannelATesterNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChannelATesterNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ChannelBTestBoxNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChannelBTestBoxNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ChannelBTesterNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChannelBTesterNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EndOPNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EndOPNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FirstMeka1Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstMeka1Qty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FirstMeka2Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstMeka2Qty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FirstNGQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstNGQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FirstUnknowQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstUnknowQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GLCheck", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GLCheck", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GoodSampleQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GoodSampleQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HandlerCounterQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HandlerCounterQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotJudgement", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotJudgement", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NGSampleQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NGSampleQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProgramName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProgramName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remark", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remark", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SecondMeka1Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondMeka1Qty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SecondMeka4Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondMeka4Qty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SecondNGQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondNGQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SecondUnknowQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondUnknowQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SocketCheck", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocketCheck", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TestFlowName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TestFlowName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TestTemperature", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TestTemperature", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TesterACounterQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TesterACounterQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TesterBCounterQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TesterBCounterQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TotalMeka1Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalMeka1Qty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TotalMeka2Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalMeka2Qty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TotalMeka4Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalMeka4Qty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TotalUnknowQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalUnknowQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TesterType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TesterType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InitialYield", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InitialYield", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FinalYield", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FinalYield", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FirstEndYield", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstEndYield", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LCL", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LCL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DuringProductionCheck", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DuringProductionCheck", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FirstAutoAsiCheck", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstAutoAsiCheck", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotEndVisualInspectNGQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotEndVisualInspectNGQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotEndVisualInspectTotalQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotEndVisualInspectTotalQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotStartVisualInspectNGQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotStartVisualInspectNGQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotStartVisualInspectTotalQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotStartVisualInspectTotalQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MarkingInspection", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarkingInspection", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SecondAutoAsiCheck", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondAutoAsiCheck", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SocketChange", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocketChange", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FirstGoodBin1Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstGoodBin1Qty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FirstGoodBin2Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstGoodBin2Qty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SecondGoodBin1Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondGoodBin1Qty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SecondGoodBin2Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondGoodBin2Qty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TotalGoodBin1Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalGoodBin1Qty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TotalGoodBin2Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalGoodBin2Qty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TotalNGQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalNGQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ChangedSocketNumCh1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChangedSocketNumCh1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ChangedSocketNumCh2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChangedSocketNumCh2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ChangedSocketNumCh3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChangedSocketNumCh3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ChangedSocketNumCh4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChangedSocketNumCh4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SocketNumCh1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocketNumCh1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SocketNumCh2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocketNumCh2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SocketNumCh3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocketNumCh3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SocketNumCh4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocketNumCh4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [FTData] SET [MCNo] = @MCNo, [LotNo] = @LotNo, [LotStartTime] = @LotStartT"& _ 
                "ime, [MCType] = @MCType, [OPNo] = @OPNo, [InputQty] = @InputQty, [TotalGood] = @"& _ 
                "TotalGood, [TotalNG] = @TotalNG, [OPRate] = @OPRate, [MaximumRPM] = @MaximumRPM,"& _ 
                " [AverageRPM] = @AverageRPM, [MTBF] = @MTBF, [MTTR] = @MTTR, [AlarmTotal] = @Ala"& _ 
                "rmTotal, [LotEndTime] = @LotEndTime, [RunTime] = @RunTime, [StopTime] = @StopTim"& _ 
                "e, [AlarmTime] = @AlarmTime, [BoxName] = @BoxName, [ChannelATestBoxNo] = @Channe"& _ 
                "lATestBoxNo, [ChannelATesterNo] = @ChannelATesterNo, [ChannelBTestBoxNo] = @Chan"& _ 
                "nelBTestBoxNo, [ChannelBTesterNo] = @ChannelBTesterNo, [EndOPNo] = @EndOPNo, [Fi"& _ 
                "rstMeka1Qty] = @FirstMeka1Qty, [FirstMeka2Qty] = @FirstMeka2Qty, [FirstNGQty] = "& _ 
                "@FirstNGQty, [FirstUnknowQty] = @FirstUnknowQty, [GLCheck] = @GLCheck, [GoodSamp"& _ 
                "leQty] = @GoodSampleQty, [HandlerCounterQty] = @HandlerCounterQty, [LotJudgement"& _ 
                "] = @LotJudgement, [NGSampleQty] = @NGSampleQty, [ProgramName] = @ProgramName, ["& _ 
                "Remark] = @Remark, [SecondMeka1Qty] = @SecondMeka1Qty, [SecondMeka4Qty] = @Secon"& _ 
                "dMeka4Qty, [SecondNGQty] = @SecondNGQty, [SecondUnknowQty] = @SecondUnknowQty, ["& _ 
                "SocketCheck] = @SocketCheck, [TestFlowName] = @TestFlowName, [TestTemperature] ="& _ 
                " @TestTemperature, [TesterACounterQty] = @TesterACounterQty, [TesterBCounterQty]"& _ 
                " = @TesterBCounterQty, [TotalMeka1Qty] = @TotalMeka1Qty, [TotalMeka2Qty] = @Tota"& _ 
                "lMeka2Qty, [TotalMeka4Qty] = @TotalMeka4Qty, [TotalUnknowQty] = @TotalUnknowQty,"& _ 
                " [TesterType] = @TesterType, [InitialYield] = @InitialYield, [FinalYield] = @Fin"& _ 
                "alYield, [FirstEndYield] = @FirstEndYield, [LCL] = @LCL, [DuringProductionCheck]"& _ 
                " = @DuringProductionCheck, [FirstAutoAsiCheck] = @FirstAutoAsiCheck, [LotEndVisu"& _ 
                "alInspectNGQty] = @LotEndVisualInspectNGQty, [LotEndVisualInspectTotalQty] = @Lo"& _ 
                "tEndVisualInspectTotalQty, [LotStartVisualInspectNGQty] = @LotStartVisualInspect"& _ 
                "NGQty, [LotStartVisualInspectTotalQty] = @LotStartVisualInspectTotalQty, [Markin"& _ 
                "gInspection] = @MarkingInspection, [SecondAutoAsiCheck] = @SecondAutoAsiCheck, ["& _ 
                "SocketChange] = @SocketChange, [FirstGoodBin1Qty] = @FirstGoodBin1Qty, [FirstGoo"& _ 
                "dBin2Qty] = @FirstGoodBin2Qty, [SecondGoodBin1Qty] = @SecondGoodBin1Qty, [Second"& _ 
                "GoodBin2Qty] = @SecondGoodBin2Qty, [TotalGoodBin1Qty] = @TotalGoodBin1Qty, [Tota"& _ 
                "lGoodBin2Qty] = @TotalGoodBin2Qty, [TotalNGQty] = @TotalNGQty, [ChangedSocketNum"& _ 
                "Ch1] = @ChangedSocketNumCh1, [ChangedSocketNumCh2] = @ChangedSocketNumCh2, [Chan"& _ 
                "gedSocketNumCh3] = @ChangedSocketNumCh3, [ChangedSocketNumCh4] = @ChangedSocketN"& _ 
                "umCh4, [SocketNumCh1] = @SocketNumCh1, [SocketNumCh2] = @SocketNumCh2, [SocketNu"& _ 
                "mCh3] = @SocketNumCh3, [SocketNumCh4] = @SocketNumCh4 WHERE (([MCNo] = @Original"& _ 
                "_MCNo) AND ([LotNo] = @Original_LotNo) AND ([LotStartTime] = @Original_LotStartT"& _ 
                "ime) AND ((@IsNull_MCType = 1 AND [MCType] IS NULL) OR ([MCType] = @Original_MCT"& _ 
                "ype)) AND ((@IsNull_OPNo = 1 AND [OPNo] IS NULL) OR ([OPNo] = @Original_OPNo)) A"& _ 
                "ND ((@IsNull_InputQty = 1 AND [InputQty] IS NULL) OR ([InputQty] = @Original_Inp"& _ 
                "utQty)) AND ((@IsNull_TotalGood = 1 AND [TotalGood] IS NULL) OR ([TotalGood] = @"& _ 
                "Original_TotalGood)) AND ((@IsNull_TotalNG = 1 AND [TotalNG] IS NULL) OR ([Total"& _ 
                "NG] = @Original_TotalNG)) AND ((@IsNull_OPRate = 1 AND [OPRate] IS NULL) OR ([OP"& _ 
                "Rate] = @Original_OPRate)) AND ((@IsNull_MaximumRPM = 1 AND [MaximumRPM] IS NULL"& _ 
                ") OR ([MaximumRPM] = @Original_MaximumRPM)) AND ((@IsNull_AverageRPM = 1 AND [Av"& _ 
                "erageRPM] IS NULL) OR ([AverageRPM] = @Original_AverageRPM)) AND ((@IsNull_MTBF "& _ 
                "= 1 AND [MTBF] IS NULL) OR ([MTBF] = @Original_MTBF)) AND ((@IsNull_MTTR = 1 AND"& _ 
                " [MTTR] IS NULL) OR ([MTTR] = @Original_MTTR)) AND ((@IsNull_AlarmTotal = 1 AND "& _ 
                "[AlarmTotal] IS NULL) OR ([AlarmTotal] = @Original_AlarmTotal)) AND ((@IsNull_Lo"& _ 
                "tEndTime = 1 AND [LotEndTime] IS NULL) OR ([LotEndTime] = @Original_LotEndTime))"& _ 
                " AND ((@IsNull_RunTime = 1 AND [RunTime] IS NULL) OR ([RunTime] = @Original_RunT"& _ 
                "ime)) AND ((@IsNull_StopTime = 1 AND [StopTime] IS NULL) OR ([StopTime] = @Origi"& _ 
                "nal_StopTime)) AND ((@IsNull_AlarmTime = 1 AND [AlarmTime] IS NULL) OR ([AlarmTi"& _ 
                "me] = @Original_AlarmTime)) AND ((@IsNull_BoxName = 1 AND [BoxName] IS NULL) OR "& _ 
                "([BoxName] = @Original_BoxName)) AND ((@IsNull_ChannelATestBoxNo = 1 AND [Channe"& _ 
                "lATestBoxNo] IS NULL) OR ([ChannelATestBoxNo] = @Original_ChannelATestBoxNo)) AN"& _ 
                "D ((@IsNull_ChannelATesterNo = 1 AND [ChannelATesterNo] IS NULL) OR ([ChannelATe"& _ 
                "sterNo] = @Original_ChannelATesterNo)) AND ((@IsNull_ChannelBTestBoxNo = 1 AND ["& _ 
                "ChannelBTestBoxNo] IS NULL) OR ([ChannelBTestBoxNo] = @Original_ChannelBTestBoxN"& _ 
                "o)) AND ((@IsNull_ChannelBTesterNo = 1 AND [ChannelBTesterNo] IS NULL) OR ([Chan"& _ 
                "nelBTesterNo] = @Original_ChannelBTesterNo)) AND ((@IsNull_EndOPNo = 1 AND [EndO"& _ 
                "PNo] IS NULL) OR ([EndOPNo] = @Original_EndOPNo)) AND ((@IsNull_FirstMeka1Qty = "& _ 
                "1 AND [FirstMeka1Qty] IS NULL) OR ([FirstMeka1Qty] = @Original_FirstMeka1Qty)) A"& _ 
                "ND ((@IsNull_FirstMeka2Qty = 1 AND [FirstMeka2Qty] IS NULL) OR ([FirstMeka2Qty] "& _ 
                "= @Original_FirstMeka2Qty)) AND ((@IsNull_FirstNGQty = 1 AND [FirstNGQty] IS NUL"& _ 
                "L) OR ([FirstNGQty] = @Original_FirstNGQty)) AND ((@IsNull_FirstUnknowQty = 1 AN"& _ 
                "D [FirstUnknowQty] IS NULL) OR ([FirstUnknowQty] = @Original_FirstUnknowQty)) AN"& _ 
                "D ((@IsNull_GLCheck = 1 AND [GLCheck] IS NULL) OR ([GLCheck] = @Original_GLCheck"& _ 
                ")) AND ((@IsNull_GoodSampleQty = 1 AND [GoodSampleQty] IS NULL) OR ([GoodSampleQ"& _ 
                "ty] = @Original_GoodSampleQty)) AND ((@IsNull_HandlerCounterQty = 1 AND [Handler"& _ 
                "CounterQty] IS NULL) OR ([HandlerCounterQty] = @Original_HandlerCounterQty)) AND"& _ 
                " ((@IsNull_LotJudgement = 1 AND [LotJudgement] IS NULL) OR ([LotJudgement] = @Or"& _ 
                "iginal_LotJudgement)) AND ((@IsNull_NGSampleQty = 1 AND [NGSampleQty] IS NULL) O"& _ 
                "R ([NGSampleQty] = @Original_NGSampleQty)) AND ((@IsNull_ProgramName = 1 AND [Pr"& _ 
                "ogramName] IS NULL) OR ([ProgramName] = @Original_ProgramName)) AND ((@IsNull_Re"& _ 
                "mark = 1 AND [Remark] IS NULL) OR ([Remark] = @Original_Remark)) AND ((@IsNull_S"& _ 
                "econdMeka1Qty = 1 AND [SecondMeka1Qty] IS NULL) OR ([SecondMeka1Qty] = @Original"& _ 
                "_SecondMeka1Qty)) AND ((@IsNull_SecondMeka4Qty = 1 AND [SecondMeka4Qty] IS NULL)"& _ 
                " OR ([SecondMeka4Qty] = @Original_SecondMeka4Qty)) AND ((@IsNull_SecondNGQty = 1"& _ 
                " AND [SecondNGQty] IS NULL) OR ([SecondNGQty] = @Original_SecondNGQty)) AND ((@I"& _ 
                "sNull_SecondUnknowQty = 1 AND [SecondUnknowQty] IS NULL) OR ([SecondUnknowQty] ="& _ 
                " @Original_SecondUnknowQty)) AND ((@IsNull_SocketCheck = 1 AND [SocketCheck] IS "& _ 
                "NULL) OR ([SocketCheck] = @Original_SocketCheck)) AND ((@IsNull_TestFlowName = 1"& _ 
                " AND [TestFlowName] IS NULL) OR ([TestFlowName] = @Original_TestFlowName)) AND ("& _ 
                "(@IsNull_TestTemperature = 1 AND [TestTemperature] IS NULL) OR ([TestTemperature"& _ 
                "] = @Original_TestTemperature)) AND ((@IsNull_TesterACounterQty = 1 AND [TesterA"& _ 
                "CounterQty] IS NULL) OR ([TesterACounterQty] = @Original_TesterACounterQty)) AND"& _ 
                " ((@IsNull_TesterBCounterQty = 1 AND [TesterBCounterQty] IS NULL) OR ([TesterBCo"& _ 
                "unterQty] = @Original_TesterBCounterQty)) AND ((@IsNull_TotalMeka1Qty = 1 AND [T"& _ 
                "otalMeka1Qty] IS NULL) OR ([TotalMeka1Qty] = @Original_TotalMeka1Qty)) AND ((@Is"& _ 
                "Null_TotalMeka2Qty = 1 AND [TotalMeka2Qty] IS NULL) OR ([TotalMeka2Qty] = @Origi"& _ 
                "nal_TotalMeka2Qty)) AND ((@IsNull_TotalMeka4Qty = 1 AND [TotalMeka4Qty] IS NULL)"& _ 
                " OR ([TotalMeka4Qty] = @Original_TotalMeka4Qty)) AND ((@IsNull_TotalUnknowQty = "& _ 
                "1 AND [TotalUnknowQty] IS NULL) OR ([TotalUnknowQty] = @Original_TotalUnknowQty)"& _ 
                ") AND ((@IsNull_TesterType = 1 AND [TesterType] IS NULL) OR ([TesterType] = @Ori"& _ 
                "ginal_TesterType)) AND ((@IsNull_InitialYield = 1 AND [InitialYield] IS NULL) OR"& _ 
                " ([InitialYield] = @Original_InitialYield)) AND ((@IsNull_FinalYield = 1 AND [Fi"& _ 
                "nalYield] IS NULL) OR ([FinalYield] = @Original_FinalYield)) AND ((@IsNull_First"& _ 
                "EndYield = 1 AND [FirstEndYield] IS NULL) OR ([FirstEndYield] = @Original_FirstE"& _ 
                "ndYield)) AND ((@IsNull_LCL = 1 AND [LCL] IS NULL) OR ([LCL] = @Original_LCL)) A"& _ 
                "ND ((@IsNull_DuringProductionCheck = 1 AND [DuringProductionCheck] IS NULL) OR ("& _ 
                "[DuringProductionCheck] = @Original_DuringProductionCheck)) AND ((@IsNull_FirstA"& _ 
                "utoAsiCheck = 1 AND [FirstAutoAsiCheck] IS NULL) OR ([FirstAutoAsiCheck] = @Orig"& _ 
                "inal_FirstAutoAsiCheck)) AND ((@IsNull_LotEndVisualInspectNGQty = 1 AND [LotEndV"& _ 
                "isualInspectNGQty] IS NULL) OR ([LotEndVisualInspectNGQty] = @Original_LotEndVis"& _ 
                "ualInspectNGQty)) AND ((@IsNull_LotEndVisualInspectTotalQty = 1 AND [LotEndVisua"& _ 
                "lInspectTotalQty] IS NULL) OR ([LotEndVisualInspectTotalQty] = @Original_LotEndV"& _ 
                "isualInspectTotalQty)) AND ((@IsNull_LotStartVisualInspectNGQty = 1 AND [LotStar"& _ 
                "tVisualInspectNGQty] IS NULL) OR ([LotStartVisualInspectNGQty] = @Original_LotSt"& _ 
                "artVisualInspectNGQty)) AND ((@IsNull_LotStartVisualInspectTotalQty = 1 AND [Lot"& _ 
                "StartVisualInspectTotalQty] IS NULL) OR ([LotStartVisualInspectTotalQty] = @Orig"& _ 
                "inal_LotStartVisualInspectTotalQty)) AND ((@IsNull_MarkingInspection = 1 AND [Ma"& _ 
                "rkingInspection] IS NULL) OR ([MarkingInspection] = @Original_MarkingInspection)"& _ 
                ") AND ((@IsNull_SecondAutoAsiCheck = 1 AND [SecondAutoAsiCheck] IS NULL) OR ([Se"& _ 
                "condAutoAsiCheck] = @Original_SecondAutoAsiCheck)) AND ((@IsNull_SocketChange = "& _ 
                "1 AND [SocketChange] IS NULL) OR ([SocketChange] = @Original_SocketChange)) AND "& _ 
                "((@IsNull_FirstGoodBin1Qty = 1 AND [FirstGoodBin1Qty] IS NULL) OR ([FirstGoodBin"& _ 
                "1Qty] = @Original_FirstGoodBin1Qty)) AND ((@IsNull_FirstGoodBin2Qty = 1 AND [Fir"& _ 
                "stGoodBin2Qty] IS NULL) OR ([FirstGoodBin2Qty] = @Original_FirstGoodBin2Qty)) AN"& _ 
                "D ((@IsNull_SecondGoodBin1Qty = 1 AND [SecondGoodBin1Qty] IS NULL) OR ([SecondGo"& _ 
                "odBin1Qty] = @Original_SecondGoodBin1Qty)) AND ((@IsNull_SecondGoodBin2Qty = 1 A"& _ 
                "ND [SecondGoodBin2Qty] IS NULL) OR ([SecondGoodBin2Qty] = @Original_SecondGoodBi"& _ 
                "n2Qty)) AND ((@IsNull_TotalGoodBin1Qty = 1 AND [TotalGoodBin1Qty] IS NULL) OR (["& _ 
                "TotalGoodBin1Qty] = @Original_TotalGoodBin1Qty)) AND ((@IsNull_TotalGoodBin2Qty "& _ 
                "= 1 AND [TotalGoodBin2Qty] IS NULL) OR ([TotalGoodBin2Qty] = @Original_TotalGood"& _ 
                "Bin2Qty)) AND ((@IsNull_TotalNGQty = 1 AND [TotalNGQty] IS NULL) OR ([TotalNGQty"& _ 
                "] = @Original_TotalNGQty)) AND ((@IsNull_ChangedSocketNumCh1 = 1 AND [ChangedSoc"& _ 
                "ketNumCh1] IS NULL) OR ([ChangedSocketNumCh1] = @Original_ChangedSocketNumCh1)) "& _ 
                "AND ((@IsNull_ChangedSocketNumCh2 = 1 AND [ChangedSocketNumCh2] IS NULL) OR ([Ch"& _ 
                "angedSocketNumCh2] = @Original_ChangedSocketNumCh2)) AND ((@IsNull_ChangedSocket"& _ 
                "NumCh3 = 1 AND [ChangedSocketNumCh3] IS NULL) OR ([ChangedSocketNumCh3] = @Origi"& _ 
                "nal_ChangedSocketNumCh3)) AND ((@IsNull_ChangedSocketNumCh4 = 1 AND [ChangedSock"& _ 
                "etNumCh4] IS NULL) OR ([ChangedSocketNumCh4] = @Original_ChangedSocketNumCh4)) A"& _ 
                "ND ((@IsNull_SocketNumCh1 = 1 AND [SocketNumCh1] IS NULL) OR ([SocketNumCh1] = @"& _ 
                "Original_SocketNumCh1)) AND ((@IsNull_SocketNumCh2 = 1 AND [SocketNumCh2] IS NUL"& _ 
                "L) OR ([SocketNumCh2] = @Original_SocketNumCh2)) AND ((@IsNull_SocketNumCh3 = 1 "& _ 
                "AND [SocketNumCh3] IS NULL) OR ([SocketNumCh3] = @Original_SocketNumCh3)) AND (("& _ 
                "@IsNull_SocketNumCh4 = 1 AND [SocketNumCh4] IS NULL) OR ([SocketNumCh4] = @Origi"& _ 
                "nal_SocketNumCh4)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT MCNo, LotNo, LotStartTime, MCType, OPNo, InputQty, "& _ 
                "TotalGood, TotalNG, OPRate, MaximumRPM, AverageRPM, MTBF, MTTR, AlarmTotal, LotE"& _ 
                "ndTime, RunTime, StopTime, AlarmTime, BoxName, ChannelATestBoxNo, ChannelATester"& _ 
                "No, ChannelBTestBoxNo, ChannelBTesterNo, EndOPNo, FirstMeka1Qty, FirstMeka2Qty, "& _ 
                "FirstNGQty, FirstUnknowQty, GLCheck, GoodSampleQty, HandlerCounterQty, LotJudgem"& _ 
                "ent, NGSampleQty, ProgramName, Remark, SecondMeka1Qty, SecondMeka4Qty, SecondNGQ"& _ 
                "ty, SecondUnknowQty, SocketCheck, TestFlowName, TestTemperature, TesterACounterQ"& _ 
                "ty, TesterBCounterQty, TotalMeka1Qty, TotalMeka2Qty, TotalMeka4Qty, TotalUnknowQ"& _ 
                "ty, TesterType, InitialYield, FinalYield, FirstEndYield, LCL, DuringProductionCh"& _ 
                "eck, FirstAutoAsiCheck, LotEndVisualInspectNGQty, LotEndVisualInspectTotalQty, L"& _ 
                "otStartVisualInspectNGQty, LotStartVisualInspectTotalQty, MarkingInspection, Sec"& _ 
                "ondAutoAsiCheck, SocketChange, FirstGoodBin1Qty, FirstGoodBin2Qty, SecondGoodBin"& _ 
                "1Qty, SecondGoodBin2Qty, TotalGoodBin1Qty, TotalGoodBin2Qty, TotalNGQty, Changed"& _ 
                "SocketNumCh1, ChangedSocketNumCh2, ChangedSocketNumCh3, ChangedSocketNumCh4, Soc"& _ 
                "ketNumCh1, SocketNumCh2, SocketNumCh3, SocketNumCh4 FROM FTData WHERE (LotNo = @"& _ 
                "LotNo) AND (LotStartTime = @LotStartTime) AND (MCNo = @MCNo)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MCNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MCNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotStartTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotStartTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MCType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MCType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InputQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InputQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TotalGood", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalGood", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TotalNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPRate", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPRate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaximumRPM", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaximumRPM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AverageRPM", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AverageRPM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MTBF", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MTBF", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MTTR", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MTTR", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AlarmTotal", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlarmTotal", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotEndTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotEndTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RunTime", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RunTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StopTime", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StopTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AlarmTime", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlarmTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BoxName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BoxName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ChannelATestBoxNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChannelATestBoxNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ChannelATesterNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChannelATesterNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ChannelBTestBoxNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChannelBTestBoxNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ChannelBTesterNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChannelBTesterNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EndOPNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EndOPNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FirstMeka1Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstMeka1Qty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FirstMeka2Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstMeka2Qty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FirstNGQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstNGQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FirstUnknowQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstUnknowQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GLCheck", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GLCheck", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@GoodSampleQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GoodSampleQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HandlerCounterQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HandlerCounterQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotJudgement", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotJudgement", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NGSampleQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NGSampleQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProgramName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProgramName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Remark", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remark", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SecondMeka1Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondMeka1Qty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SecondMeka4Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondMeka4Qty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SecondNGQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondNGQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SecondUnknowQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondUnknowQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SocketCheck", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocketCheck", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TestFlowName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TestFlowName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TestTemperature", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TestTemperature", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TesterACounterQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TesterACounterQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TesterBCounterQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TesterBCounterQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TotalMeka1Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalMeka1Qty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TotalMeka2Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalMeka2Qty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TotalMeka4Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalMeka4Qty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TotalUnknowQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalUnknowQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TesterType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TesterType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InitialYield", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InitialYield", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FinalYield", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FinalYield", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FirstEndYield", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstEndYield", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LCL", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LCL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DuringProductionCheck", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DuringProductionCheck", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FirstAutoAsiCheck", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstAutoAsiCheck", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotEndVisualInspectNGQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotEndVisualInspectNGQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotEndVisualInspectTotalQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotEndVisualInspectTotalQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotStartVisualInspectNGQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotStartVisualInspectNGQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotStartVisualInspectTotalQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotStartVisualInspectTotalQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MarkingInspection", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarkingInspection", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SecondAutoAsiCheck", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondAutoAsiCheck", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SocketChange", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocketChange", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FirstGoodBin1Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstGoodBin1Qty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FirstGoodBin2Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstGoodBin2Qty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SecondGoodBin1Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondGoodBin1Qty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SecondGoodBin2Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondGoodBin2Qty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TotalGoodBin1Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalGoodBin1Qty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TotalGoodBin2Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalGoodBin2Qty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TotalNGQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalNGQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ChangedSocketNumCh1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChangedSocketNumCh1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ChangedSocketNumCh2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChangedSocketNumCh2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ChangedSocketNumCh3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChangedSocketNumCh3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ChangedSocketNumCh4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChangedSocketNumCh4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SocketNumCh1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocketNumCh1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SocketNumCh2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocketNumCh2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SocketNumCh3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocketNumCh3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SocketNumCh4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocketNumCh4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MCNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MCNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LotNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LotStartTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotStartTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MCType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MCType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MCType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MCType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OPNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPNo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_InputQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InputQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_InputQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InputQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TotalGood", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalGood", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TotalGood", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalGood", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TotalNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalNG", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TotalNG", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalNG", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_OPRate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPRate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OPRate", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPRate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MaximumRPM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaximumRPM", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MaximumRPM", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaximumRPM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AverageRPM", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AverageRPM", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AverageRPM", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AverageRPM", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MTBF", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MTBF", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MTBF", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MTBF", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MTTR", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MTTR", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MTTR", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MTTR", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AlarmTotal", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlarmTotal", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AlarmTotal", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlarmTotal", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LotEndTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotEndTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LotEndTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotEndTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RunTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RunTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RunTime", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RunTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_StopTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StopTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StopTime", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StopTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_AlarmTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlarmTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_AlarmTime", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AlarmTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_BoxName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BoxName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_BoxName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BoxName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ChannelATestBoxNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChannelATestBoxNo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ChannelATestBoxNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChannelATestBoxNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ChannelATesterNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChannelATesterNo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ChannelATesterNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChannelATesterNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ChannelBTestBoxNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChannelBTestBoxNo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ChannelBTestBoxNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChannelBTestBoxNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ChannelBTesterNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChannelBTesterNo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ChannelBTesterNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChannelBTesterNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_EndOPNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EndOPNo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_EndOPNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EndOPNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FirstMeka1Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstMeka1Qty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FirstMeka1Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstMeka1Qty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FirstMeka2Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstMeka2Qty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FirstMeka2Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstMeka2Qty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FirstNGQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstNGQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FirstNGQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstNGQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FirstUnknowQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstUnknowQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FirstUnknowQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstUnknowQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GLCheck", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GLCheck", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GLCheck", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GLCheck", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_GoodSampleQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GoodSampleQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_GoodSampleQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "GoodSampleQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_HandlerCounterQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HandlerCounterQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_HandlerCounterQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HandlerCounterQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LotJudgement", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotJudgement", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LotJudgement", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotJudgement", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_NGSampleQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NGSampleQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_NGSampleQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NGSampleQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ProgramName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProgramName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ProgramName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProgramName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Remark", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remark", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Remark", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Remark", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SecondMeka1Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondMeka1Qty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SecondMeka1Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondMeka1Qty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SecondMeka4Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondMeka4Qty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SecondMeka4Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondMeka4Qty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SecondNGQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondNGQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SecondNGQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondNGQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SecondUnknowQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondUnknowQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SecondUnknowQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondUnknowQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SocketCheck", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocketCheck", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SocketCheck", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocketCheck", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TestFlowName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TestFlowName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TestFlowName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TestFlowName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TestTemperature", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TestTemperature", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TestTemperature", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TestTemperature", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TesterACounterQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TesterACounterQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TesterACounterQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TesterACounterQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TesterBCounterQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TesterBCounterQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TesterBCounterQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TesterBCounterQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TotalMeka1Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalMeka1Qty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TotalMeka1Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalMeka1Qty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TotalMeka2Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalMeka2Qty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TotalMeka2Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalMeka2Qty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TotalMeka4Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalMeka4Qty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TotalMeka4Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalMeka4Qty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TotalUnknowQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalUnknowQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TotalUnknowQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalUnknowQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TesterType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TesterType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TesterType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TesterType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_InitialYield", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InitialYield", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_InitialYield", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InitialYield", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FinalYield", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FinalYield", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FinalYield", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FinalYield", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FirstEndYield", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstEndYield", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FirstEndYield", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstEndYield", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LCL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LCL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LCL", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LCL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_DuringProductionCheck", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DuringProductionCheck", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_DuringProductionCheck", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DuringProductionCheck", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FirstAutoAsiCheck", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstAutoAsiCheck", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FirstAutoAsiCheck", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstAutoAsiCheck", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LotEndVisualInspectNGQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotEndVisualInspectNGQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LotEndVisualInspectNGQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotEndVisualInspectNGQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LotEndVisualInspectTotalQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotEndVisualInspectTotalQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LotEndVisualInspectTotalQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotEndVisualInspectTotalQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LotStartVisualInspectNGQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotStartVisualInspectNGQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LotStartVisualInspectNGQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotStartVisualInspectNGQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LotStartVisualInspectTotalQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotStartVisualInspectTotalQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LotStartVisualInspectTotalQty", Global.System.Data.SqlDbType.SmallInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotStartVisualInspectTotalQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MarkingInspection", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarkingInspection", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MarkingInspection", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarkingInspection", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SecondAutoAsiCheck", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondAutoAsiCheck", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SecondAutoAsiCheck", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondAutoAsiCheck", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SocketChange", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocketChange", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SocketChange", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocketChange", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FirstGoodBin1Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstGoodBin1Qty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FirstGoodBin1Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstGoodBin1Qty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FirstGoodBin2Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstGoodBin2Qty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FirstGoodBin2Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstGoodBin2Qty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SecondGoodBin1Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondGoodBin1Qty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SecondGoodBin1Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondGoodBin1Qty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SecondGoodBin2Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondGoodBin2Qty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SecondGoodBin2Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SecondGoodBin2Qty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TotalGoodBin1Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalGoodBin1Qty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TotalGoodBin1Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalGoodBin1Qty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TotalGoodBin2Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalGoodBin2Qty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TotalGoodBin2Qty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalGoodBin2Qty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_TotalNGQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalNGQty", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TotalNGQty", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalNGQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ChangedSocketNumCh1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChangedSocketNumCh1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ChangedSocketNumCh1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChangedSocketNumCh1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ChangedSocketNumCh2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChangedSocketNumCh2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ChangedSocketNumCh2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChangedSocketNumCh2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ChangedSocketNumCh3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChangedSocketNumCh3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ChangedSocketNumCh3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChangedSocketNumCh3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ChangedSocketNumCh4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChangedSocketNumCh4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ChangedSocketNumCh4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChangedSocketNumCh4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SocketNumCh1", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocketNumCh1", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SocketNumCh1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocketNumCh1", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SocketNumCh2", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocketNumCh2", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SocketNumCh2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocketNumCh2", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SocketNumCh3", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocketNumCh3", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SocketNumCh3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocketNumCh3", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SocketNumCh4", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocketNumCh4", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SocketNumCh4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocketNumCh4", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SelfCon.My.MySettings.Default.DBxConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT MCNo, LotNo, LotStartTime, MCType, OPNo, InputQty, TotalGood, TotalNG, OPR"& _ 
                "ate, MaximumRPM, AverageRPM, MTBF, MTTR, AlarmTotal, LotEndTime, RunTime, StopTi"& _ 
                "me, AlarmTime, BoxName, ChannelATestBoxNo, ChannelATesterNo, ChannelBTestBoxNo, "& _ 
                "ChannelBTesterNo, EndOPNo, FirstMeka1Qty, FirstMeka2Qty, FirstNGQty, FirstUnknow"& _ 
                "Qty, GLCheck, GoodSampleQty, HandlerCounterQty, LotJudgement, NGSampleQty, Progr"& _ 
                "amName, Remark, SecondMeka1Qty, SecondMeka4Qty, SecondNGQty, SecondUnknowQty, So"& _ 
                "cketCheck, TestFlowName, TestTemperature, TesterACounterQty, TesterBCounterQty, "& _ 
                "TotalMeka1Qty, TotalMeka2Qty, TotalMeka4Qty, TotalUnknowQty, TesterType, Initial"& _ 
                "Yield, FinalYield, FirstEndYield, LCL, DuringProductionCheck, FirstAutoAsiCheck,"& _ 
                " LotEndVisualInspectNGQty, LotEndVisualInspectTotalQty, LotStartVisualInspectNGQ"& _ 
                "ty, LotStartVisualInspectTotalQty, MarkingInspection, SecondAutoAsiCheck, Socket"& _ 
                "Change, FirstGoodBin1Qty, FirstGoodBin2Qty, SecondGoodBin1Qty, SecondGoodBin2Qty"& _ 
                ", TotalGoodBin1Qty, TotalGoodBin2Qty, TotalNGQty, ChangedSocketNumCh1, ChangedSo"& _ 
                "cketNumCh2, ChangedSocketNumCh3, ChangedSocketNumCh4, SocketNumCh1, SocketNumCh2"& _ 
                ", SocketNumCh3, SocketNumCh4 FROM FTData"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT AlarmTime, AlarmTotal, AverageRPM, BoxName, ChannelATestBoxNo, ChannelATes"& _ 
                "terNo, ChannelBTestBoxNo, ChannelBTesterNo, DuringProductionCheck, EndOPNo, Fina"& _ 
                "lYield, FirstAutoAsiCheck, FirstEndYield, FirstGoodBin1Qty, FirstGoodBin2Qty, Fi"& _ 
                "rstMeka1Qty, FirstMeka2Qty, FirstNGQty, FirstUnknowQty, GLCheck, GoodSampleQty, "& _ 
                "HandlerCounterQty, InitialYield, InputQty, LCL, LotEndTime, LotEndVisualInspectN"& _ 
                "GQty, LotEndVisualInspectTotalQty, LotJudgement, LotNo, LotStartTime, LotStartVi"& _ 
                "sualInspectNGQty, LotStartVisualInspectTotalQty, MCNo, MCType, MTBF, MTTR, Marki"& _ 
                "ngInspection, MaximumRPM, NGSampleQty, OPNo, OPRate, ProgramName, Remark, RunTim"& _ 
                "e, SecondAutoAsiCheck, SecondGoodBin1Qty, SecondGoodBin2Qty, SecondMeka1Qty, Sec"& _ 
                "ondMeka4Qty, SecondNGQty, SecondUnknowQty, SocketChange, SocketCheck, StopTime, "& _ 
                "TestFlowName, TestTemperature, TesterACounterQty, TesterBCounterQty, TesterType,"& _ 
                " TotalGood, TotalGoodBin1Qty, TotalGoodBin2Qty, TotalMeka1Qty, TotalMeka2Qty, To"& _ 
                "talMeka4Qty, TotalNG, TotalNGQty, TotalUnknowQty, ChangedSocketNumCh1, ChangedSo"& _ 
                "cketNumCh2, ChangedSocketNumCh3, ChangedSocketNumCh4, SocketNumCh1, SocketNumCh2"& _ 
                ", SocketNumCh3, SocketNumCh4 FROM FTData WHERE (MCNo = @MCNo) AND (LotNo = @LotN"& _ 
                "o) AND (LotStartTime = @LotStartTime)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MCNo", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "MCNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotNo", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "LotNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotStartTime", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "LotStartTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DBxDataSet.FTDataDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DBxDataSet.FTDataDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DBxDataSet.FTDataDataTable = New DBxDataSet.FTDataDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByPKs(ByVal dataTable As DBxDataSet.FTDataDataTable, ByVal MCNo As String, ByVal LotNo As String, ByVal LotStartTime As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (MCNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MCNo")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(MCNo,String)
            End If
            If (LotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LotNo")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(LotNo,String)
            End If
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(LotStartTime,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByPKs(ByVal MCNo As String, ByVal LotNo As String, ByVal LotStartTime As Date) As DBxDataSet.FTDataDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (MCNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MCNo")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(MCNo,String)
            End If
            If (LotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LotNo")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(LotNo,String)
            End If
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(LotStartTime,Date)
            Dim dataTable As DBxDataSet.FTDataDataTable = New DBxDataSet.FTDataDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DBxDataSet.FTDataDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DBxDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "FTData")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_MCNo As String,  _
                    ByVal Original_LotNo As String,  _
                    ByVal Original_LotStartTime As Date,  _
                    ByVal Original_MCType As String,  _
                    ByVal Original_OPNo As String,  _
                    ByVal Original_InputQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TotalGood As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TotalNG As Global.System.Nullable(Of Integer),  _
                    ByVal Original_OPRate As Global.System.Nullable(Of Single),  _
                    ByVal Original_MaximumRPM As Global.System.Nullable(Of Single),  _
                    ByVal Original_AverageRPM As Global.System.Nullable(Of Single),  _
                    ByVal Original_MTBF As Global.System.Nullable(Of Single),  _
                    ByVal Original_MTTR As Global.System.Nullable(Of Single),  _
                    ByVal Original_AlarmTotal As Global.System.Nullable(Of Short),  _
                    ByVal Original_LotEndTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_RunTime As Global.System.Nullable(Of Single),  _
                    ByVal Original_StopTime As Global.System.Nullable(Of Single),  _
                    ByVal Original_AlarmTime As Global.System.Nullable(Of Single),  _
                    ByVal Original_BoxName As String,  _
                    ByVal Original_ChannelATestBoxNo As String,  _
                    ByVal Original_ChannelATesterNo As String,  _
                    ByVal Original_ChannelBTestBoxNo As String,  _
                    ByVal Original_ChannelBTesterNo As String,  _
                    ByVal Original_EndOPNo As String,  _
                    ByVal Original_FirstMeka1Qty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_FirstMeka2Qty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_FirstNGQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_FirstUnknowQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_GLCheck As String,  _
                    ByVal Original_GoodSampleQty As Global.System.Nullable(Of Short),  _
                    ByVal Original_HandlerCounterQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_LotJudgement As String,  _
                    ByVal Original_NGSampleQty As Global.System.Nullable(Of Short),  _
                    ByVal Original_ProgramName As String,  _
                    ByVal Original_Remark As String,  _
                    ByVal Original_SecondMeka1Qty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SecondMeka4Qty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SecondNGQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SecondUnknowQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SocketCheck As String,  _
                    ByVal Original_TestFlowName As String,  _
                    ByVal Original_TestTemperature As String,  _
                    ByVal Original_TesterACounterQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TesterBCounterQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TotalMeka1Qty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TotalMeka2Qty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TotalMeka4Qty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TotalUnknowQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TesterType As String,  _
                    ByVal Original_InitialYield As Global.System.Nullable(Of Single),  _
                    ByVal Original_FinalYield As Global.System.Nullable(Of Single),  _
                    ByVal Original_FirstEndYield As Global.System.Nullable(Of Single),  _
                    ByVal Original_LCL As Global.System.Nullable(Of Single),  _
                    ByVal Original_DuringProductionCheck As String,  _
                    ByVal Original_FirstAutoAsiCheck As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_LotEndVisualInspectNGQty As Global.System.Nullable(Of Short),  _
                    ByVal Original_LotEndVisualInspectTotalQty As Global.System.Nullable(Of Short),  _
                    ByVal Original_LotStartVisualInspectNGQty As Global.System.Nullable(Of Short),  _
                    ByVal Original_LotStartVisualInspectTotalQty As Global.System.Nullable(Of Short),  _
                    ByVal Original_MarkingInspection As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_SecondAutoAsiCheck As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_SocketChange As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_FirstGoodBin1Qty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_FirstGoodBin2Qty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SecondGoodBin1Qty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SecondGoodBin2Qty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TotalGoodBin1Qty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TotalGoodBin2Qty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TotalNGQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ChangedSocketNumCh1 As String,  _
                    ByVal Original_ChangedSocketNumCh2 As String,  _
                    ByVal Original_ChangedSocketNumCh3 As String,  _
                    ByVal Original_ChangedSocketNumCh4 As String,  _
                    ByVal Original_SocketNumCh1 As String,  _
                    ByVal Original_SocketNumCh2 As String,  _
                    ByVal Original_SocketNumCh3 As String,  _
                    ByVal Original_SocketNumCh4 As String) As Integer
            If (Original_MCNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MCNo")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_MCNo,String)
            End If
            If (Original_LotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LotNo")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_LotNo,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_LotStartTime,Date)
            If (Original_MCType Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_MCType,String)
            End If
            If (Original_OPNo Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_OPNo,String)
            End If
            If (Original_InputQty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_InputQty.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_TotalGood.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_TotalGood.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Original_TotalNG.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_TotalNG.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_OPRate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_OPRate.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_MaximumRPM.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_MaximumRPM.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_AverageRPM.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_AverageRPM.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_MTBF.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_MTBF.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_MTTR.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_MTTR.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_AlarmTotal.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_AlarmTotal.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_LotEndTime.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_LotEndTime.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_RunTime.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_RunTime.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_StopTime.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_StopTime.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_AlarmTime.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_AlarmTime.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_BoxName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_BoxName,String)
            End If
            If (Original_ChannelATestBoxNo Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_ChannelATestBoxNo,String)
            End If
            If (Original_ChannelATesterNo Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_ChannelATesterNo,String)
            End If
            If (Original_ChannelBTestBoxNo Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_ChannelBTestBoxNo,String)
            End If
            If (Original_ChannelBTesterNo Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_ChannelBTesterNo,String)
            End If
            If (Original_EndOPNo Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original_EndOPNo,String)
            End If
            If (Original_FirstMeka1Qty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(Original_FirstMeka1Qty.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (Original_FirstMeka2Qty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(Original_FirstMeka2Qty.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (Original_FirstNGQty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(Original_FirstNGQty.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (Original_FirstUnknowQty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(52).Value = CType(Original_FirstUnknowQty.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (Original_GLCheck Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = CType(Original_GLCheck,String)
            End If
            If (Original_GoodSampleQty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(Original_GoodSampleQty.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(56).Value = Global.System.DBNull.Value
            End If
            If (Original_HandlerCounterQty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(58).Value = CType(Original_HandlerCounterQty.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            If (Original_LotJudgement Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(59).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(60).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(59).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(60).Value = CType(Original_LotJudgement,String)
            End If
            If (Original_NGSampleQty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(62).Value = CType(Original_NGSampleQty.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(62).Value = Global.System.DBNull.Value
            End If
            If (Original_ProgramName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(63).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(64).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(63).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(64).Value = CType(Original_ProgramName,String)
            End If
            If (Original_Remark Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(65).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(66).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(65).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(66).Value = CType(Original_Remark,String)
            End If
            If (Original_SecondMeka1Qty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(67).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(68).Value = CType(Original_SecondMeka1Qty.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(67).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(68).Value = Global.System.DBNull.Value
            End If
            If (Original_SecondMeka4Qty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(69).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(70).Value = CType(Original_SecondMeka4Qty.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(69).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(70).Value = Global.System.DBNull.Value
            End If
            If (Original_SecondNGQty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(71).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(72).Value = CType(Original_SecondNGQty.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(71).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(72).Value = Global.System.DBNull.Value
            End If
            If (Original_SecondUnknowQty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(73).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(74).Value = CType(Original_SecondUnknowQty.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(73).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(74).Value = Global.System.DBNull.Value
            End If
            If (Original_SocketCheck Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(75).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(76).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(75).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(76).Value = CType(Original_SocketCheck,String)
            End If
            If (Original_TestFlowName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(77).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(78).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(77).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(78).Value = CType(Original_TestFlowName,String)
            End If
            If (Original_TestTemperature Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(79).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(80).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(79).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(80).Value = CType(Original_TestTemperature,String)
            End If
            If (Original_TesterACounterQty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(81).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(82).Value = CType(Original_TesterACounterQty.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(81).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(82).Value = Global.System.DBNull.Value
            End If
            If (Original_TesterBCounterQty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(83).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(84).Value = CType(Original_TesterBCounterQty.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(83).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(84).Value = Global.System.DBNull.Value
            End If
            If (Original_TotalMeka1Qty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(85).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(86).Value = CType(Original_TotalMeka1Qty.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(85).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(86).Value = Global.System.DBNull.Value
            End If
            If (Original_TotalMeka2Qty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(87).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(88).Value = CType(Original_TotalMeka2Qty.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(87).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(88).Value = Global.System.DBNull.Value
            End If
            If (Original_TotalMeka4Qty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(89).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(90).Value = CType(Original_TotalMeka4Qty.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(89).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(90).Value = Global.System.DBNull.Value
            End If
            If (Original_TotalUnknowQty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(91).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(92).Value = CType(Original_TotalUnknowQty.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(91).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(92).Value = Global.System.DBNull.Value
            End If
            If (Original_TesterType Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(93).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(94).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(93).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(94).Value = CType(Original_TesterType,String)
            End If
            If (Original_InitialYield.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(95).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(96).Value = CType(Original_InitialYield.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(95).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(96).Value = Global.System.DBNull.Value
            End If
            If (Original_FinalYield.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(97).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(98).Value = CType(Original_FinalYield.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(97).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(98).Value = Global.System.DBNull.Value
            End If
            If (Original_FirstEndYield.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(99).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(100).Value = CType(Original_FirstEndYield.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(99).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(100).Value = Global.System.DBNull.Value
            End If
            If (Original_LCL.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(101).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(102).Value = CType(Original_LCL.Value,Single)
            Else
                Me.Adapter.DeleteCommand.Parameters(101).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(102).Value = Global.System.DBNull.Value
            End If
            If (Original_DuringProductionCheck Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(103).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(104).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(103).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(104).Value = CType(Original_DuringProductionCheck,String)
            End If
            If (Original_FirstAutoAsiCheck.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(105).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(106).Value = CType(Original_FirstAutoAsiCheck.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(105).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(106).Value = Global.System.DBNull.Value
            End If
            If (Original_LotEndVisualInspectNGQty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(107).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(108).Value = CType(Original_LotEndVisualInspectNGQty.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(107).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(108).Value = Global.System.DBNull.Value
            End If
            If (Original_LotEndVisualInspectTotalQty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(109).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(110).Value = CType(Original_LotEndVisualInspectTotalQty.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(109).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(110).Value = Global.System.DBNull.Value
            End If
            If (Original_LotStartVisualInspectNGQty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(111).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(112).Value = CType(Original_LotStartVisualInspectNGQty.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(111).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(112).Value = Global.System.DBNull.Value
            End If
            If (Original_LotStartVisualInspectTotalQty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(113).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(114).Value = CType(Original_LotStartVisualInspectTotalQty.Value,Short)
            Else
                Me.Adapter.DeleteCommand.Parameters(113).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(114).Value = Global.System.DBNull.Value
            End If
            If (Original_MarkingInspection.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(115).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(116).Value = CType(Original_MarkingInspection.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(115).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(116).Value = Global.System.DBNull.Value
            End If
            If (Original_SecondAutoAsiCheck.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(117).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(118).Value = CType(Original_SecondAutoAsiCheck.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(117).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(118).Value = Global.System.DBNull.Value
            End If
            If (Original_SocketChange.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(119).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(120).Value = CType(Original_SocketChange.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(119).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(120).Value = Global.System.DBNull.Value
            End If
            If (Original_FirstGoodBin1Qty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(121).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(122).Value = CType(Original_FirstGoodBin1Qty.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(121).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(122).Value = Global.System.DBNull.Value
            End If
            If (Original_FirstGoodBin2Qty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(123).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(124).Value = CType(Original_FirstGoodBin2Qty.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(123).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(124).Value = Global.System.DBNull.Value
            End If
            If (Original_SecondGoodBin1Qty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(125).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(126).Value = CType(Original_SecondGoodBin1Qty.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(125).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(126).Value = Global.System.DBNull.Value
            End If
            If (Original_SecondGoodBin2Qty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(127).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(128).Value = CType(Original_SecondGoodBin2Qty.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(127).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(128).Value = Global.System.DBNull.Value
            End If
            If (Original_TotalGoodBin1Qty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(129).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(130).Value = CType(Original_TotalGoodBin1Qty.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(129).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(130).Value = Global.System.DBNull.Value
            End If
            If (Original_TotalGoodBin2Qty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(131).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(132).Value = CType(Original_TotalGoodBin2Qty.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(131).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(132).Value = Global.System.DBNull.Value
            End If
            If (Original_TotalNGQty.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(133).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(134).Value = CType(Original_TotalNGQty.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(133).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(134).Value = Global.System.DBNull.Value
            End If
            If (Original_ChangedSocketNumCh1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(135).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(136).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(135).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(136).Value = CType(Original_ChangedSocketNumCh1,String)
            End If
            If (Original_ChangedSocketNumCh2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(137).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(138).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(137).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(138).Value = CType(Original_ChangedSocketNumCh2,String)
            End If
            If (Original_ChangedSocketNumCh3 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(139).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(140).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(139).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(140).Value = CType(Original_ChangedSocketNumCh3,String)
            End If
            If (Original_ChangedSocketNumCh4 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(141).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(142).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(141).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(142).Value = CType(Original_ChangedSocketNumCh4,String)
            End If
            If (Original_SocketNumCh1 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(143).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(144).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(143).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(144).Value = CType(Original_SocketNumCh1,String)
            End If
            If (Original_SocketNumCh2 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(145).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(146).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(145).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(146).Value = CType(Original_SocketNumCh2,String)
            End If
            If (Original_SocketNumCh3 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(147).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(148).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(147).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(148).Value = CType(Original_SocketNumCh3,String)
            End If
            If (Original_SocketNumCh4 Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(149).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(150).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(149).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(150).Value = CType(Original_SocketNumCh4,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal MCNo As String,  _
                    ByVal LotNo As String,  _
                    ByVal LotStartTime As Date,  _
                    ByVal MCType As String,  _
                    ByVal OPNo As String,  _
                    ByVal InputQty As Global.System.Nullable(Of Integer),  _
                    ByVal TotalGood As Global.System.Nullable(Of Integer),  _
                    ByVal TotalNG As Global.System.Nullable(Of Integer),  _
                    ByVal OPRate As Global.System.Nullable(Of Single),  _
                    ByVal MaximumRPM As Global.System.Nullable(Of Single),  _
                    ByVal AverageRPM As Global.System.Nullable(Of Single),  _
                    ByVal MTBF As Global.System.Nullable(Of Single),  _
                    ByVal MTTR As Global.System.Nullable(Of Single),  _
                    ByVal AlarmTotal As Global.System.Nullable(Of Short),  _
                    ByVal LotEndTime As Global.System.Nullable(Of Date),  _
                    ByVal RunTime As Global.System.Nullable(Of Single),  _
                    ByVal StopTime As Global.System.Nullable(Of Single),  _
                    ByVal AlarmTime As Global.System.Nullable(Of Single),  _
                    ByVal BoxName As String,  _
                    ByVal ChannelATestBoxNo As String,  _
                    ByVal ChannelATesterNo As String,  _
                    ByVal ChannelBTestBoxNo As String,  _
                    ByVal ChannelBTesterNo As String,  _
                    ByVal EndOPNo As String,  _
                    ByVal FirstMeka1Qty As Global.System.Nullable(Of Integer),  _
                    ByVal FirstMeka2Qty As Global.System.Nullable(Of Integer),  _
                    ByVal FirstNGQty As Global.System.Nullable(Of Integer),  _
                    ByVal FirstUnknowQty As Global.System.Nullable(Of Integer),  _
                    ByVal GLCheck As String,  _
                    ByVal GoodSampleQty As Global.System.Nullable(Of Short),  _
                    ByVal HandlerCounterQty As Global.System.Nullable(Of Integer),  _
                    ByVal LotJudgement As String,  _
                    ByVal NGSampleQty As Global.System.Nullable(Of Short),  _
                    ByVal ProgramName As String,  _
                    ByVal Remark As String,  _
                    ByVal SecondMeka1Qty As Global.System.Nullable(Of Integer),  _
                    ByVal SecondMeka4Qty As Global.System.Nullable(Of Integer),  _
                    ByVal SecondNGQty As Global.System.Nullable(Of Integer),  _
                    ByVal SecondUnknowQty As Global.System.Nullable(Of Integer),  _
                    ByVal SocketCheck As String,  _
                    ByVal TestFlowName As String,  _
                    ByVal TestTemperature As String,  _
                    ByVal TesterACounterQty As Global.System.Nullable(Of Integer),  _
                    ByVal TesterBCounterQty As Global.System.Nullable(Of Integer),  _
                    ByVal TotalMeka1Qty As Global.System.Nullable(Of Integer),  _
                    ByVal TotalMeka2Qty As Global.System.Nullable(Of Integer),  _
                    ByVal TotalMeka4Qty As Global.System.Nullable(Of Integer),  _
                    ByVal TotalUnknowQty As Global.System.Nullable(Of Integer),  _
                    ByVal TesterType As String,  _
                    ByVal InitialYield As Global.System.Nullable(Of Single),  _
                    ByVal FinalYield As Global.System.Nullable(Of Single),  _
                    ByVal FirstEndYield As Global.System.Nullable(Of Single),  _
                    ByVal LCL As Global.System.Nullable(Of Single),  _
                    ByVal DuringProductionCheck As String,  _
                    ByVal FirstAutoAsiCheck As Global.System.Nullable(Of Boolean),  _
                    ByVal LotEndVisualInspectNGQty As Global.System.Nullable(Of Short),  _
                    ByVal LotEndVisualInspectTotalQty As Global.System.Nullable(Of Short),  _
                    ByVal LotStartVisualInspectNGQty As Global.System.Nullable(Of Short),  _
                    ByVal LotStartVisualInspectTotalQty As Global.System.Nullable(Of Short),  _
                    ByVal MarkingInspection As Global.System.Nullable(Of Boolean),  _
                    ByVal SecondAutoAsiCheck As Global.System.Nullable(Of Boolean),  _
                    ByVal SocketChange As Global.System.Nullable(Of Boolean),  _
                    ByVal FirstGoodBin1Qty As Global.System.Nullable(Of Integer),  _
                    ByVal FirstGoodBin2Qty As Global.System.Nullable(Of Integer),  _
                    ByVal SecondGoodBin1Qty As Global.System.Nullable(Of Integer),  _
                    ByVal SecondGoodBin2Qty As Global.System.Nullable(Of Integer),  _
                    ByVal TotalGoodBin1Qty As Global.System.Nullable(Of Integer),  _
                    ByVal TotalGoodBin2Qty As Global.System.Nullable(Of Integer),  _
                    ByVal TotalNGQty As Global.System.Nullable(Of Integer),  _
                    ByVal ChangedSocketNumCh1 As String,  _
                    ByVal ChangedSocketNumCh2 As String,  _
                    ByVal ChangedSocketNumCh3 As String,  _
                    ByVal ChangedSocketNumCh4 As String,  _
                    ByVal SocketNumCh1 As String,  _
                    ByVal SocketNumCh2 As String,  _
                    ByVal SocketNumCh3 As String,  _
                    ByVal SocketNumCh4 As String) As Integer
            If (MCNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MCNo")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(MCNo,String)
            End If
            If (LotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LotNo")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(LotNo,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(LotStartTime,Date)
            If (MCType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(MCType,String)
            End If
            If (OPNo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(OPNo,String)
            End If
            If (InputQty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(InputQty.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (TotalGood.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(TotalGood.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (TotalNG.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(TotalNG.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (OPRate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(OPRate.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (MaximumRPM.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(MaximumRPM.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (AverageRPM.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(AverageRPM.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (MTBF.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(MTBF.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (MTTR.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(MTTR.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (AlarmTotal.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(AlarmTotal.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (LotEndTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(LotEndTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (RunTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(RunTime.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (StopTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(StopTime.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (AlarmTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(AlarmTime.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (BoxName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(BoxName,String)
            End If
            If (ChannelATestBoxNo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(ChannelATestBoxNo,String)
            End If
            If (ChannelATesterNo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(ChannelATesterNo,String)
            End If
            If (ChannelBTestBoxNo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(ChannelBTestBoxNo,String)
            End If
            If (ChannelBTesterNo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(ChannelBTesterNo,String)
            End If
            If (EndOPNo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(EndOPNo,String)
            End If
            If (FirstMeka1Qty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(FirstMeka1Qty.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (FirstMeka2Qty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(FirstMeka2Qty.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (FirstNGQty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(FirstNGQty.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (FirstUnknowQty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(FirstUnknowQty.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (GLCheck Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(GLCheck,String)
            End If
            If (GoodSampleQty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(GoodSampleQty.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (HandlerCounterQty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(HandlerCounterQty.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (LotJudgement Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(LotJudgement,String)
            End If
            If (NGSampleQty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(NGSampleQty.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (ProgramName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(33).Value = CType(ProgramName,String)
            End If
            If (Remark Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(34).Value = CType(Remark,String)
            End If
            If (SecondMeka1Qty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(35).Value = CType(SecondMeka1Qty.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (SecondMeka4Qty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(36).Value = CType(SecondMeka4Qty.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (SecondNGQty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(37).Value = CType(SecondNGQty.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (SecondUnknowQty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(38).Value = CType(SecondUnknowQty.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (SocketCheck Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(39).Value = CType(SocketCheck,String)
            End If
            If (TestFlowName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(40).Value = CType(TestFlowName,String)
            End If
            If (TestTemperature Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(41).Value = CType(TestTemperature,String)
            End If
            If (TesterACounterQty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(42).Value = CType(TesterACounterQty.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (TesterBCounterQty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(43).Value = CType(TesterBCounterQty.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (TotalMeka1Qty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(44).Value = CType(TotalMeka1Qty.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (TotalMeka2Qty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(45).Value = CType(TotalMeka2Qty.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (TotalMeka4Qty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(46).Value = CType(TotalMeka4Qty.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (TotalUnknowQty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(47).Value = CType(TotalUnknowQty.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (TesterType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(48).Value = CType(TesterType,String)
            End If
            If (InitialYield.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(49).Value = CType(InitialYield.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (FinalYield.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(50).Value = CType(FinalYield.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (FirstEndYield.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(51).Value = CType(FirstEndYield.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (LCL.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(52).Value = CType(LCL.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (DuringProductionCheck Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(53).Value = CType(DuringProductionCheck,String)
            End If
            If (FirstAutoAsiCheck.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(54).Value = CType(FirstAutoAsiCheck.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (LotEndVisualInspectNGQty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(55).Value = CType(LotEndVisualInspectNGQty.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (LotEndVisualInspectTotalQty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(56).Value = CType(LotEndVisualInspectTotalQty.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(56).Value = Global.System.DBNull.Value
            End If
            If (LotStartVisualInspectNGQty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(57).Value = CType(LotStartVisualInspectNGQty.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (LotStartVisualInspectTotalQty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(58).Value = CType(LotStartVisualInspectTotalQty.Value,Short)
            Else
                Me.Adapter.InsertCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            If (MarkingInspection.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(59).Value = CType(MarkingInspection.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (SecondAutoAsiCheck.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(60).Value = CType(SecondAutoAsiCheck.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(60).Value = Global.System.DBNull.Value
            End If
            If (SocketChange.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(61).Value = CType(SocketChange.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(61).Value = Global.System.DBNull.Value
            End If
            If (FirstGoodBin1Qty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(62).Value = CType(FirstGoodBin1Qty.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(62).Value = Global.System.DBNull.Value
            End If
            If (FirstGoodBin2Qty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(63).Value = CType(FirstGoodBin2Qty.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(63).Value = Global.System.DBNull.Value
            End If
            If (SecondGoodBin1Qty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(64).Value = CType(SecondGoodBin1Qty.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(64).Value = Global.System.DBNull.Value
            End If
            If (SecondGoodBin2Qty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(65).Value = CType(SecondGoodBin2Qty.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            If (TotalGoodBin1Qty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(66).Value = CType(TotalGoodBin1Qty.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(66).Value = Global.System.DBNull.Value
            End If
            If (TotalGoodBin2Qty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(67).Value = CType(TotalGoodBin2Qty.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(67).Value = Global.System.DBNull.Value
            End If
            If (TotalNGQty.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(68).Value = CType(TotalNGQty.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(68).Value = Global.System.DBNull.Value
            End If
            If (ChangedSocketNumCh1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(69).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(69).Value = CType(ChangedSocketNumCh1,String)
            End If
            If (ChangedSocketNumCh2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(70).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(70).Value = CType(ChangedSocketNumCh2,String)
            End If
            If (ChangedSocketNumCh3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(71).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(71).Value = CType(ChangedSocketNumCh3,String)
            End If
            If (ChangedSocketNumCh4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(72).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(72).Value = CType(ChangedSocketNumCh4,String)
            End If
            If (SocketNumCh1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(73).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(73).Value = CType(SocketNumCh1,String)
            End If
            If (SocketNumCh2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(74).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(74).Value = CType(SocketNumCh2,String)
            End If
            If (SocketNumCh3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(75).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(75).Value = CType(SocketNumCh3,String)
            End If
            If (SocketNumCh4 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(76).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(76).Value = CType(SocketNumCh4,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal MCNo As String,  _
                    ByVal LotNo As String,  _
                    ByVal LotStartTime As Date,  _
                    ByVal MCType As String,  _
                    ByVal OPNo As String,  _
                    ByVal InputQty As Global.System.Nullable(Of Integer),  _
                    ByVal TotalGood As Global.System.Nullable(Of Integer),  _
                    ByVal TotalNG As Global.System.Nullable(Of Integer),  _
                    ByVal OPRate As Global.System.Nullable(Of Single),  _
                    ByVal MaximumRPM As Global.System.Nullable(Of Single),  _
                    ByVal AverageRPM As Global.System.Nullable(Of Single),  _
                    ByVal MTBF As Global.System.Nullable(Of Single),  _
                    ByVal MTTR As Global.System.Nullable(Of Single),  _
                    ByVal AlarmTotal As Global.System.Nullable(Of Short),  _
                    ByVal LotEndTime As Global.System.Nullable(Of Date),  _
                    ByVal RunTime As Global.System.Nullable(Of Single),  _
                    ByVal StopTime As Global.System.Nullable(Of Single),  _
                    ByVal AlarmTime As Global.System.Nullable(Of Single),  _
                    ByVal BoxName As String,  _
                    ByVal ChannelATestBoxNo As String,  _
                    ByVal ChannelATesterNo As String,  _
                    ByVal ChannelBTestBoxNo As String,  _
                    ByVal ChannelBTesterNo As String,  _
                    ByVal EndOPNo As String,  _
                    ByVal FirstMeka1Qty As Global.System.Nullable(Of Integer),  _
                    ByVal FirstMeka2Qty As Global.System.Nullable(Of Integer),  _
                    ByVal FirstNGQty As Global.System.Nullable(Of Integer),  _
                    ByVal FirstUnknowQty As Global.System.Nullable(Of Integer),  _
                    ByVal GLCheck As String,  _
                    ByVal GoodSampleQty As Global.System.Nullable(Of Short),  _
                    ByVal HandlerCounterQty As Global.System.Nullable(Of Integer),  _
                    ByVal LotJudgement As String,  _
                    ByVal NGSampleQty As Global.System.Nullable(Of Short),  _
                    ByVal ProgramName As String,  _
                    ByVal Remark As String,  _
                    ByVal SecondMeka1Qty As Global.System.Nullable(Of Integer),  _
                    ByVal SecondMeka4Qty As Global.System.Nullable(Of Integer),  _
                    ByVal SecondNGQty As Global.System.Nullable(Of Integer),  _
                    ByVal SecondUnknowQty As Global.System.Nullable(Of Integer),  _
                    ByVal SocketCheck As String,  _
                    ByVal TestFlowName As String,  _
                    ByVal TestTemperature As String,  _
                    ByVal TesterACounterQty As Global.System.Nullable(Of Integer),  _
                    ByVal TesterBCounterQty As Global.System.Nullable(Of Integer),  _
                    ByVal TotalMeka1Qty As Global.System.Nullable(Of Integer),  _
                    ByVal TotalMeka2Qty As Global.System.Nullable(Of Integer),  _
                    ByVal TotalMeka4Qty As Global.System.Nullable(Of Integer),  _
                    ByVal TotalUnknowQty As Global.System.Nullable(Of Integer),  _
                    ByVal TesterType As String,  _
                    ByVal InitialYield As Global.System.Nullable(Of Single),  _
                    ByVal FinalYield As Global.System.Nullable(Of Single),  _
                    ByVal FirstEndYield As Global.System.Nullable(Of Single),  _
                    ByVal LCL As Global.System.Nullable(Of Single),  _
                    ByVal DuringProductionCheck As String,  _
                    ByVal FirstAutoAsiCheck As Global.System.Nullable(Of Boolean),  _
                    ByVal LotEndVisualInspectNGQty As Global.System.Nullable(Of Short),  _
                    ByVal LotEndVisualInspectTotalQty As Global.System.Nullable(Of Short),  _
                    ByVal LotStartVisualInspectNGQty As Global.System.Nullable(Of Short),  _
                    ByVal LotStartVisualInspectTotalQty As Global.System.Nullable(Of Short),  _
                    ByVal MarkingInspection As Global.System.Nullable(Of Boolean),  _
                    ByVal SecondAutoAsiCheck As Global.System.Nullable(Of Boolean),  _
                    ByVal SocketChange As Global.System.Nullable(Of Boolean),  _
                    ByVal FirstGoodBin1Qty As Global.System.Nullable(Of Integer),  _
                    ByVal FirstGoodBin2Qty As Global.System.Nullable(Of Integer),  _
                    ByVal SecondGoodBin1Qty As Global.System.Nullable(Of Integer),  _
                    ByVal SecondGoodBin2Qty As Global.System.Nullable(Of Integer),  _
                    ByVal TotalGoodBin1Qty As Global.System.Nullable(Of Integer),  _
                    ByVal TotalGoodBin2Qty As Global.System.Nullable(Of Integer),  _
                    ByVal TotalNGQty As Global.System.Nullable(Of Integer),  _
                    ByVal ChangedSocketNumCh1 As String,  _
                    ByVal ChangedSocketNumCh2 As String,  _
                    ByVal ChangedSocketNumCh3 As String,  _
                    ByVal ChangedSocketNumCh4 As String,  _
                    ByVal SocketNumCh1 As String,  _
                    ByVal SocketNumCh2 As String,  _
                    ByVal SocketNumCh3 As String,  _
                    ByVal SocketNumCh4 As String,  _
                    ByVal Original_MCNo As String,  _
                    ByVal Original_LotNo As String,  _
                    ByVal Original_LotStartTime As Date,  _
                    ByVal Original_MCType As String,  _
                    ByVal Original_OPNo As String,  _
                    ByVal Original_InputQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TotalGood As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TotalNG As Global.System.Nullable(Of Integer),  _
                    ByVal Original_OPRate As Global.System.Nullable(Of Single),  _
                    ByVal Original_MaximumRPM As Global.System.Nullable(Of Single),  _
                    ByVal Original_AverageRPM As Global.System.Nullable(Of Single),  _
                    ByVal Original_MTBF As Global.System.Nullable(Of Single),  _
                    ByVal Original_MTTR As Global.System.Nullable(Of Single),  _
                    ByVal Original_AlarmTotal As Global.System.Nullable(Of Short),  _
                    ByVal Original_LotEndTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_RunTime As Global.System.Nullable(Of Single),  _
                    ByVal Original_StopTime As Global.System.Nullable(Of Single),  _
                    ByVal Original_AlarmTime As Global.System.Nullable(Of Single),  _
                    ByVal Original_BoxName As String,  _
                    ByVal Original_ChannelATestBoxNo As String,  _
                    ByVal Original_ChannelATesterNo As String,  _
                    ByVal Original_ChannelBTestBoxNo As String,  _
                    ByVal Original_ChannelBTesterNo As String,  _
                    ByVal Original_EndOPNo As String,  _
                    ByVal Original_FirstMeka1Qty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_FirstMeka2Qty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_FirstNGQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_FirstUnknowQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_GLCheck As String,  _
                    ByVal Original_GoodSampleQty As Global.System.Nullable(Of Short),  _
                    ByVal Original_HandlerCounterQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_LotJudgement As String,  _
                    ByVal Original_NGSampleQty As Global.System.Nullable(Of Short),  _
                    ByVal Original_ProgramName As String,  _
                    ByVal Original_Remark As String,  _
                    ByVal Original_SecondMeka1Qty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SecondMeka4Qty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SecondNGQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SecondUnknowQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SocketCheck As String,  _
                    ByVal Original_TestFlowName As String,  _
                    ByVal Original_TestTemperature As String,  _
                    ByVal Original_TesterACounterQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TesterBCounterQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TotalMeka1Qty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TotalMeka2Qty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TotalMeka4Qty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TotalUnknowQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TesterType As String,  _
                    ByVal Original_InitialYield As Global.System.Nullable(Of Single),  _
                    ByVal Original_FinalYield As Global.System.Nullable(Of Single),  _
                    ByVal Original_FirstEndYield As Global.System.Nullable(Of Single),  _
                    ByVal Original_LCL As Global.System.Nullable(Of Single),  _
                    ByVal Original_DuringProductionCheck As String,  _
                    ByVal Original_FirstAutoAsiCheck As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_LotEndVisualInspectNGQty As Global.System.Nullable(Of Short),  _
                    ByVal Original_LotEndVisualInspectTotalQty As Global.System.Nullable(Of Short),  _
                    ByVal Original_LotStartVisualInspectNGQty As Global.System.Nullable(Of Short),  _
                    ByVal Original_LotStartVisualInspectTotalQty As Global.System.Nullable(Of Short),  _
                    ByVal Original_MarkingInspection As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_SecondAutoAsiCheck As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_SocketChange As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_FirstGoodBin1Qty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_FirstGoodBin2Qty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SecondGoodBin1Qty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SecondGoodBin2Qty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TotalGoodBin1Qty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TotalGoodBin2Qty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TotalNGQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ChangedSocketNumCh1 As String,  _
                    ByVal Original_ChangedSocketNumCh2 As String,  _
                    ByVal Original_ChangedSocketNumCh3 As String,  _
                    ByVal Original_ChangedSocketNumCh4 As String,  _
                    ByVal Original_SocketNumCh1 As String,  _
                    ByVal Original_SocketNumCh2 As String,  _
                    ByVal Original_SocketNumCh3 As String,  _
                    ByVal Original_SocketNumCh4 As String) As Integer
            If (MCNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MCNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(MCNo,String)
            End If
            If (LotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LotNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(LotNo,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(LotStartTime,Date)
            If (MCType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(MCType,String)
            End If
            If (OPNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(OPNo,String)
            End If
            If (InputQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(InputQty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (TotalGood.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(TotalGood.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (TotalNG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(TotalNG.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (OPRate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(OPRate.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (MaximumRPM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(MaximumRPM.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (AverageRPM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(AverageRPM.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (MTBF.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(MTBF.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (MTTR.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(MTTR.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (AlarmTotal.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(AlarmTotal.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (LotEndTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(LotEndTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (RunTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(RunTime.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (StopTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(StopTime.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (AlarmTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(AlarmTime.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (BoxName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(BoxName,String)
            End If
            If (ChannelATestBoxNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(ChannelATestBoxNo,String)
            End If
            If (ChannelATesterNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(ChannelATesterNo,String)
            End If
            If (ChannelBTestBoxNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(ChannelBTestBoxNo,String)
            End If
            If (ChannelBTesterNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(ChannelBTesterNo,String)
            End If
            If (EndOPNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(EndOPNo,String)
            End If
            If (FirstMeka1Qty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(FirstMeka1Qty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (FirstMeka2Qty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(FirstMeka2Qty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (FirstNGQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(FirstNGQty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (FirstUnknowQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(FirstUnknowQty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (GLCheck Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(GLCheck,String)
            End If
            If (GoodSampleQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(GoodSampleQty.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (HandlerCounterQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(HandlerCounterQty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (LotJudgement Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(LotJudgement,String)
            End If
            If (NGSampleQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(NGSampleQty.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (ProgramName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(ProgramName,String)
            End If
            If (Remark Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Remark,String)
            End If
            If (SecondMeka1Qty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(SecondMeka1Qty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (SecondMeka4Qty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(SecondMeka4Qty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (SecondNGQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(SecondNGQty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (SecondUnknowQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(SecondUnknowQty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (SocketCheck Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(SocketCheck,String)
            End If
            If (TestFlowName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(TestFlowName,String)
            End If
            If (TestTemperature Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(TestTemperature,String)
            End If
            If (TesterACounterQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(TesterACounterQty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (TesterBCounterQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(TesterBCounterQty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            End If
            If (TotalMeka1Qty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(TotalMeka1Qty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (TotalMeka2Qty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(TotalMeka2Qty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            End If
            If (TotalMeka4Qty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(TotalMeka4Qty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (TotalUnknowQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(TotalUnknowQty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (TesterType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(TesterType,String)
            End If
            If (InitialYield.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(InitialYield.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (FinalYield.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(FinalYield.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (FirstEndYield.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(FirstEndYield.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (LCL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(LCL.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (DuringProductionCheck Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(DuringProductionCheck,String)
            End If
            If (FirstAutoAsiCheck.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(FirstAutoAsiCheck.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (LotEndVisualInspectNGQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(LotEndVisualInspectNGQty.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (LotEndVisualInspectTotalQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(LotEndVisualInspectTotalQty.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = Global.System.DBNull.Value
            End If
            If (LotStartVisualInspectNGQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(LotStartVisualInspectNGQty.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (LotStartVisualInspectTotalQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(LotStartVisualInspectTotalQty.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            If (MarkingInspection.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(MarkingInspection.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (SecondAutoAsiCheck.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(SecondAutoAsiCheck.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = Global.System.DBNull.Value
            End If
            If (SocketChange.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(SocketChange.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(61).Value = Global.System.DBNull.Value
            End If
            If (FirstGoodBin1Qty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(FirstGoodBin1Qty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = Global.System.DBNull.Value
            End If
            If (FirstGoodBin2Qty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(FirstGoodBin2Qty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(63).Value = Global.System.DBNull.Value
            End If
            If (SecondGoodBin1Qty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(SecondGoodBin1Qty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = Global.System.DBNull.Value
            End If
            If (SecondGoodBin2Qty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(SecondGoodBin2Qty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            If (TotalGoodBin1Qty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(TotalGoodBin1Qty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = Global.System.DBNull.Value
            End If
            If (TotalGoodBin2Qty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(TotalGoodBin2Qty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(67).Value = Global.System.DBNull.Value
            End If
            If (TotalNGQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(TotalNGQty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = Global.System.DBNull.Value
            End If
            If (ChangedSocketNumCh1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(69).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(ChangedSocketNumCh1,String)
            End If
            If (ChangedSocketNumCh2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(70).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(ChangedSocketNumCh2,String)
            End If
            If (ChangedSocketNumCh3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(71).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(ChangedSocketNumCh3,String)
            End If
            If (ChangedSocketNumCh4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(72).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(ChangedSocketNumCh4,String)
            End If
            If (SocketNumCh1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(73).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(SocketNumCh1,String)
            End If
            If (SocketNumCh2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(74).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(SocketNumCh2,String)
            End If
            If (SocketNumCh3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(75).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(SocketNumCh3,String)
            End If
            If (SocketNumCh4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(76).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(SocketNumCh4,String)
            End If
            If (Original_MCNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MCNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(Original_MCNo,String)
            End If
            If (Original_LotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LotNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(Original_LotNo,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(79).Value = CType(Original_LotStartTime,Date)
            If (Original_MCType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(81).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(Original_MCType,String)
            End If
            If (Original_OPNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(83).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(Original_OPNo,String)
            End If
            If (Original_InputQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(Original_InputQty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(85).Value = Global.System.DBNull.Value
            End If
            If (Original_TotalGood.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(Original_TotalGood.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(87).Value = Global.System.DBNull.Value
            End If
            If (Original_TotalNG.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(Original_TotalNG.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(89).Value = Global.System.DBNull.Value
            End If
            If (Original_OPRate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(Original_OPRate.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(91).Value = Global.System.DBNull.Value
            End If
            If (Original_MaximumRPM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(Original_MaximumRPM.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(93).Value = Global.System.DBNull.Value
            End If
            If (Original_AverageRPM.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(Original_AverageRPM.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(95).Value = Global.System.DBNull.Value
            End If
            If (Original_MTBF.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(96).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(97).Value = CType(Original_MTBF.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(96).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(97).Value = Global.System.DBNull.Value
            End If
            If (Original_MTTR.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(98).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(99).Value = CType(Original_MTTR.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(98).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(99).Value = Global.System.DBNull.Value
            End If
            If (Original_AlarmTotal.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(100).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(101).Value = CType(Original_AlarmTotal.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(100).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(101).Value = Global.System.DBNull.Value
            End If
            If (Original_LotEndTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(102).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(103).Value = CType(Original_LotEndTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(102).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(103).Value = Global.System.DBNull.Value
            End If
            If (Original_RunTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(104).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(105).Value = CType(Original_RunTime.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(104).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(105).Value = Global.System.DBNull.Value
            End If
            If (Original_StopTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(106).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(107).Value = CType(Original_StopTime.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(106).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(107).Value = Global.System.DBNull.Value
            End If
            If (Original_AlarmTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(108).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(109).Value = CType(Original_AlarmTime.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(108).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(109).Value = Global.System.DBNull.Value
            End If
            If (Original_BoxName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(110).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(111).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(110).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(111).Value = CType(Original_BoxName,String)
            End If
            If (Original_ChannelATestBoxNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(112).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(113).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(112).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(113).Value = CType(Original_ChannelATestBoxNo,String)
            End If
            If (Original_ChannelATesterNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(114).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(115).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(114).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(115).Value = CType(Original_ChannelATesterNo,String)
            End If
            If (Original_ChannelBTestBoxNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(116).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(117).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(116).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(117).Value = CType(Original_ChannelBTestBoxNo,String)
            End If
            If (Original_ChannelBTesterNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(118).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(119).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(118).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(119).Value = CType(Original_ChannelBTesterNo,String)
            End If
            If (Original_EndOPNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(120).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(121).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(120).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(121).Value = CType(Original_EndOPNo,String)
            End If
            If (Original_FirstMeka1Qty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(122).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(123).Value = CType(Original_FirstMeka1Qty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(122).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(123).Value = Global.System.DBNull.Value
            End If
            If (Original_FirstMeka2Qty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(124).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(125).Value = CType(Original_FirstMeka2Qty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(124).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(125).Value = Global.System.DBNull.Value
            End If
            If (Original_FirstNGQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(126).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(127).Value = CType(Original_FirstNGQty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(126).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(127).Value = Global.System.DBNull.Value
            End If
            If (Original_FirstUnknowQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(128).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(129).Value = CType(Original_FirstUnknowQty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(128).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(129).Value = Global.System.DBNull.Value
            End If
            If (Original_GLCheck Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(130).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(131).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(130).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(131).Value = CType(Original_GLCheck,String)
            End If
            If (Original_GoodSampleQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(132).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(133).Value = CType(Original_GoodSampleQty.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(132).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(133).Value = Global.System.DBNull.Value
            End If
            If (Original_HandlerCounterQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(134).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(135).Value = CType(Original_HandlerCounterQty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(134).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(135).Value = Global.System.DBNull.Value
            End If
            If (Original_LotJudgement Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(136).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(137).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(136).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(137).Value = CType(Original_LotJudgement,String)
            End If
            If (Original_NGSampleQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(138).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(139).Value = CType(Original_NGSampleQty.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(138).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(139).Value = Global.System.DBNull.Value
            End If
            If (Original_ProgramName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(140).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(141).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(140).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(141).Value = CType(Original_ProgramName,String)
            End If
            If (Original_Remark Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(142).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(143).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(142).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(143).Value = CType(Original_Remark,String)
            End If
            If (Original_SecondMeka1Qty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(144).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(145).Value = CType(Original_SecondMeka1Qty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(144).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(145).Value = Global.System.DBNull.Value
            End If
            If (Original_SecondMeka4Qty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(146).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(147).Value = CType(Original_SecondMeka4Qty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(146).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(147).Value = Global.System.DBNull.Value
            End If
            If (Original_SecondNGQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(148).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(149).Value = CType(Original_SecondNGQty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(148).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(149).Value = Global.System.DBNull.Value
            End If
            If (Original_SecondUnknowQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(150).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(151).Value = CType(Original_SecondUnknowQty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(150).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(151).Value = Global.System.DBNull.Value
            End If
            If (Original_SocketCheck Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(152).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(153).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(152).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(153).Value = CType(Original_SocketCheck,String)
            End If
            If (Original_TestFlowName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(154).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(155).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(154).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(155).Value = CType(Original_TestFlowName,String)
            End If
            If (Original_TestTemperature Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(156).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(157).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(156).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(157).Value = CType(Original_TestTemperature,String)
            End If
            If (Original_TesterACounterQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(158).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(159).Value = CType(Original_TesterACounterQty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(158).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(159).Value = Global.System.DBNull.Value
            End If
            If (Original_TesterBCounterQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(160).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(161).Value = CType(Original_TesterBCounterQty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(160).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(161).Value = Global.System.DBNull.Value
            End If
            If (Original_TotalMeka1Qty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(162).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(163).Value = CType(Original_TotalMeka1Qty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(162).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(163).Value = Global.System.DBNull.Value
            End If
            If (Original_TotalMeka2Qty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(164).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(165).Value = CType(Original_TotalMeka2Qty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(164).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(165).Value = Global.System.DBNull.Value
            End If
            If (Original_TotalMeka4Qty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(166).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(167).Value = CType(Original_TotalMeka4Qty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(166).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(167).Value = Global.System.DBNull.Value
            End If
            If (Original_TotalUnknowQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(168).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(169).Value = CType(Original_TotalUnknowQty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(168).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(169).Value = Global.System.DBNull.Value
            End If
            If (Original_TesterType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(170).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(171).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(170).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(171).Value = CType(Original_TesterType,String)
            End If
            If (Original_InitialYield.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(172).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(173).Value = CType(Original_InitialYield.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(172).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(173).Value = Global.System.DBNull.Value
            End If
            If (Original_FinalYield.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(174).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(175).Value = CType(Original_FinalYield.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(174).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(175).Value = Global.System.DBNull.Value
            End If
            If (Original_FirstEndYield.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(176).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(177).Value = CType(Original_FirstEndYield.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(176).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(177).Value = Global.System.DBNull.Value
            End If
            If (Original_LCL.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(178).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(179).Value = CType(Original_LCL.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(178).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(179).Value = Global.System.DBNull.Value
            End If
            If (Original_DuringProductionCheck Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(180).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(181).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(180).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(181).Value = CType(Original_DuringProductionCheck,String)
            End If
            If (Original_FirstAutoAsiCheck.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(182).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(183).Value = CType(Original_FirstAutoAsiCheck.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(182).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(183).Value = Global.System.DBNull.Value
            End If
            If (Original_LotEndVisualInspectNGQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(184).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(185).Value = CType(Original_LotEndVisualInspectNGQty.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(184).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(185).Value = Global.System.DBNull.Value
            End If
            If (Original_LotEndVisualInspectTotalQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(186).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(187).Value = CType(Original_LotEndVisualInspectTotalQty.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(186).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(187).Value = Global.System.DBNull.Value
            End If
            If (Original_LotStartVisualInspectNGQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(188).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(189).Value = CType(Original_LotStartVisualInspectNGQty.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(188).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(189).Value = Global.System.DBNull.Value
            End If
            If (Original_LotStartVisualInspectTotalQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(190).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(191).Value = CType(Original_LotStartVisualInspectTotalQty.Value,Short)
            Else
                Me.Adapter.UpdateCommand.Parameters(190).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(191).Value = Global.System.DBNull.Value
            End If
            If (Original_MarkingInspection.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(192).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(193).Value = CType(Original_MarkingInspection.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(192).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(193).Value = Global.System.DBNull.Value
            End If
            If (Original_SecondAutoAsiCheck.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(194).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(195).Value = CType(Original_SecondAutoAsiCheck.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(194).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(195).Value = Global.System.DBNull.Value
            End If
            If (Original_SocketChange.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(196).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(197).Value = CType(Original_SocketChange.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(196).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(197).Value = Global.System.DBNull.Value
            End If
            If (Original_FirstGoodBin1Qty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(198).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(199).Value = CType(Original_FirstGoodBin1Qty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(198).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(199).Value = Global.System.DBNull.Value
            End If
            If (Original_FirstGoodBin2Qty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(200).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(201).Value = CType(Original_FirstGoodBin2Qty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(200).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(201).Value = Global.System.DBNull.Value
            End If
            If (Original_SecondGoodBin1Qty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(202).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(203).Value = CType(Original_SecondGoodBin1Qty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(202).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(203).Value = Global.System.DBNull.Value
            End If
            If (Original_SecondGoodBin2Qty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(204).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(205).Value = CType(Original_SecondGoodBin2Qty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(204).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(205).Value = Global.System.DBNull.Value
            End If
            If (Original_TotalGoodBin1Qty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(206).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(207).Value = CType(Original_TotalGoodBin1Qty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(206).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(207).Value = Global.System.DBNull.Value
            End If
            If (Original_TotalGoodBin2Qty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(208).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(209).Value = CType(Original_TotalGoodBin2Qty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(208).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(209).Value = Global.System.DBNull.Value
            End If
            If (Original_TotalNGQty.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(210).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(211).Value = CType(Original_TotalNGQty.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(210).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(211).Value = Global.System.DBNull.Value
            End If
            If (Original_ChangedSocketNumCh1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(212).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(213).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(212).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(213).Value = CType(Original_ChangedSocketNumCh1,String)
            End If
            If (Original_ChangedSocketNumCh2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(214).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(215).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(214).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(215).Value = CType(Original_ChangedSocketNumCh2,String)
            End If
            If (Original_ChangedSocketNumCh3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(216).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(217).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(216).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(217).Value = CType(Original_ChangedSocketNumCh3,String)
            End If
            If (Original_ChangedSocketNumCh4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(218).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(219).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(218).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(219).Value = CType(Original_ChangedSocketNumCh4,String)
            End If
            If (Original_SocketNumCh1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(220).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(221).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(220).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(221).Value = CType(Original_SocketNumCh1,String)
            End If
            If (Original_SocketNumCh2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(222).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(223).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(222).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(223).Value = CType(Original_SocketNumCh2,String)
            End If
            If (Original_SocketNumCh3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(224).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(225).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(224).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(225).Value = CType(Original_SocketNumCh3,String)
            End If
            If (Original_SocketNumCh4 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(226).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(227).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(226).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(227).Value = CType(Original_SocketNumCh4,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal MCType As String,  _
                    ByVal OPNo As String,  _
                    ByVal InputQty As Global.System.Nullable(Of Integer),  _
                    ByVal TotalGood As Global.System.Nullable(Of Integer),  _
                    ByVal TotalNG As Global.System.Nullable(Of Integer),  _
                    ByVal OPRate As Global.System.Nullable(Of Single),  _
                    ByVal MaximumRPM As Global.System.Nullable(Of Single),  _
                    ByVal AverageRPM As Global.System.Nullable(Of Single),  _
                    ByVal MTBF As Global.System.Nullable(Of Single),  _
                    ByVal MTTR As Global.System.Nullable(Of Single),  _
                    ByVal AlarmTotal As Global.System.Nullable(Of Short),  _
                    ByVal LotEndTime As Global.System.Nullable(Of Date),  _
                    ByVal RunTime As Global.System.Nullable(Of Single),  _
                    ByVal StopTime As Global.System.Nullable(Of Single),  _
                    ByVal AlarmTime As Global.System.Nullable(Of Single),  _
                    ByVal BoxName As String,  _
                    ByVal ChannelATestBoxNo As String,  _
                    ByVal ChannelATesterNo As String,  _
                    ByVal ChannelBTestBoxNo As String,  _
                    ByVal ChannelBTesterNo As String,  _
                    ByVal EndOPNo As String,  _
                    ByVal FirstMeka1Qty As Global.System.Nullable(Of Integer),  _
                    ByVal FirstMeka2Qty As Global.System.Nullable(Of Integer),  _
                    ByVal FirstNGQty As Global.System.Nullable(Of Integer),  _
                    ByVal FirstUnknowQty As Global.System.Nullable(Of Integer),  _
                    ByVal GLCheck As String,  _
                    ByVal GoodSampleQty As Global.System.Nullable(Of Short),  _
                    ByVal HandlerCounterQty As Global.System.Nullable(Of Integer),  _
                    ByVal LotJudgement As String,  _
                    ByVal NGSampleQty As Global.System.Nullable(Of Short),  _
                    ByVal ProgramName As String,  _
                    ByVal Remark As String,  _
                    ByVal SecondMeka1Qty As Global.System.Nullable(Of Integer),  _
                    ByVal SecondMeka4Qty As Global.System.Nullable(Of Integer),  _
                    ByVal SecondNGQty As Global.System.Nullable(Of Integer),  _
                    ByVal SecondUnknowQty As Global.System.Nullable(Of Integer),  _
                    ByVal SocketCheck As String,  _
                    ByVal TestFlowName As String,  _
                    ByVal TestTemperature As String,  _
                    ByVal TesterACounterQty As Global.System.Nullable(Of Integer),  _
                    ByVal TesterBCounterQty As Global.System.Nullable(Of Integer),  _
                    ByVal TotalMeka1Qty As Global.System.Nullable(Of Integer),  _
                    ByVal TotalMeka2Qty As Global.System.Nullable(Of Integer),  _
                    ByVal TotalMeka4Qty As Global.System.Nullable(Of Integer),  _
                    ByVal TotalUnknowQty As Global.System.Nullable(Of Integer),  _
                    ByVal TesterType As String,  _
                    ByVal InitialYield As Global.System.Nullable(Of Single),  _
                    ByVal FinalYield As Global.System.Nullable(Of Single),  _
                    ByVal FirstEndYield As Global.System.Nullable(Of Single),  _
                    ByVal LCL As Global.System.Nullable(Of Single),  _
                    ByVal DuringProductionCheck As String,  _
                    ByVal FirstAutoAsiCheck As Global.System.Nullable(Of Boolean),  _
                    ByVal LotEndVisualInspectNGQty As Global.System.Nullable(Of Short),  _
                    ByVal LotEndVisualInspectTotalQty As Global.System.Nullable(Of Short),  _
                    ByVal LotStartVisualInspectNGQty As Global.System.Nullable(Of Short),  _
                    ByVal LotStartVisualInspectTotalQty As Global.System.Nullable(Of Short),  _
                    ByVal MarkingInspection As Global.System.Nullable(Of Boolean),  _
                    ByVal SecondAutoAsiCheck As Global.System.Nullable(Of Boolean),  _
                    ByVal SocketChange As Global.System.Nullable(Of Boolean),  _
                    ByVal FirstGoodBin1Qty As Global.System.Nullable(Of Integer),  _
                    ByVal FirstGoodBin2Qty As Global.System.Nullable(Of Integer),  _
                    ByVal SecondGoodBin1Qty As Global.System.Nullable(Of Integer),  _
                    ByVal SecondGoodBin2Qty As Global.System.Nullable(Of Integer),  _
                    ByVal TotalGoodBin1Qty As Global.System.Nullable(Of Integer),  _
                    ByVal TotalGoodBin2Qty As Global.System.Nullable(Of Integer),  _
                    ByVal TotalNGQty As Global.System.Nullable(Of Integer),  _
                    ByVal ChangedSocketNumCh1 As String,  _
                    ByVal ChangedSocketNumCh2 As String,  _
                    ByVal ChangedSocketNumCh3 As String,  _
                    ByVal ChangedSocketNumCh4 As String,  _
                    ByVal SocketNumCh1 As String,  _
                    ByVal SocketNumCh2 As String,  _
                    ByVal SocketNumCh3 As String,  _
                    ByVal SocketNumCh4 As String,  _
                    ByVal Original_MCNo As String,  _
                    ByVal Original_LotNo As String,  _
                    ByVal Original_LotStartTime As Date,  _
                    ByVal Original_MCType As String,  _
                    ByVal Original_OPNo As String,  _
                    ByVal Original_InputQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TotalGood As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TotalNG As Global.System.Nullable(Of Integer),  _
                    ByVal Original_OPRate As Global.System.Nullable(Of Single),  _
                    ByVal Original_MaximumRPM As Global.System.Nullable(Of Single),  _
                    ByVal Original_AverageRPM As Global.System.Nullable(Of Single),  _
                    ByVal Original_MTBF As Global.System.Nullable(Of Single),  _
                    ByVal Original_MTTR As Global.System.Nullable(Of Single),  _
                    ByVal Original_AlarmTotal As Global.System.Nullable(Of Short),  _
                    ByVal Original_LotEndTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_RunTime As Global.System.Nullable(Of Single),  _
                    ByVal Original_StopTime As Global.System.Nullable(Of Single),  _
                    ByVal Original_AlarmTime As Global.System.Nullable(Of Single),  _
                    ByVal Original_BoxName As String,  _
                    ByVal Original_ChannelATestBoxNo As String,  _
                    ByVal Original_ChannelATesterNo As String,  _
                    ByVal Original_ChannelBTestBoxNo As String,  _
                    ByVal Original_ChannelBTesterNo As String,  _
                    ByVal Original_EndOPNo As String,  _
                    ByVal Original_FirstMeka1Qty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_FirstMeka2Qty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_FirstNGQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_FirstUnknowQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_GLCheck As String,  _
                    ByVal Original_GoodSampleQty As Global.System.Nullable(Of Short),  _
                    ByVal Original_HandlerCounterQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_LotJudgement As String,  _
                    ByVal Original_NGSampleQty As Global.System.Nullable(Of Short),  _
                    ByVal Original_ProgramName As String,  _
                    ByVal Original_Remark As String,  _
                    ByVal Original_SecondMeka1Qty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SecondMeka4Qty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SecondNGQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SecondUnknowQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SocketCheck As String,  _
                    ByVal Original_TestFlowName As String,  _
                    ByVal Original_TestTemperature As String,  _
                    ByVal Original_TesterACounterQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TesterBCounterQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TotalMeka1Qty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TotalMeka2Qty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TotalMeka4Qty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TotalUnknowQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TesterType As String,  _
                    ByVal Original_InitialYield As Global.System.Nullable(Of Single),  _
                    ByVal Original_FinalYield As Global.System.Nullable(Of Single),  _
                    ByVal Original_FirstEndYield As Global.System.Nullable(Of Single),  _
                    ByVal Original_LCL As Global.System.Nullable(Of Single),  _
                    ByVal Original_DuringProductionCheck As String,  _
                    ByVal Original_FirstAutoAsiCheck As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_LotEndVisualInspectNGQty As Global.System.Nullable(Of Short),  _
                    ByVal Original_LotEndVisualInspectTotalQty As Global.System.Nullable(Of Short),  _
                    ByVal Original_LotStartVisualInspectNGQty As Global.System.Nullable(Of Short),  _
                    ByVal Original_LotStartVisualInspectTotalQty As Global.System.Nullable(Of Short),  _
                    ByVal Original_MarkingInspection As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_SecondAutoAsiCheck As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_SocketChange As Global.System.Nullable(Of Boolean),  _
                    ByVal Original_FirstGoodBin1Qty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_FirstGoodBin2Qty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SecondGoodBin1Qty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_SecondGoodBin2Qty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TotalGoodBin1Qty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TotalGoodBin2Qty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_TotalNGQty As Global.System.Nullable(Of Integer),  _
                    ByVal Original_ChangedSocketNumCh1 As String,  _
                    ByVal Original_ChangedSocketNumCh2 As String,  _
                    ByVal Original_ChangedSocketNumCh3 As String,  _
                    ByVal Original_ChangedSocketNumCh4 As String,  _
                    ByVal Original_SocketNumCh1 As String,  _
                    ByVal Original_SocketNumCh2 As String,  _
                    ByVal Original_SocketNumCh3 As String,  _
                    ByVal Original_SocketNumCh4 As String) As Integer
            Return Me.Update(Original_MCNo, Original_LotNo, Original_LotStartTime, MCType, OPNo, InputQty, TotalGood, TotalNG, OPRate, MaximumRPM, AverageRPM, MTBF, MTTR, AlarmTotal, LotEndTime, RunTime, StopTime, AlarmTime, BoxName, ChannelATestBoxNo, ChannelATesterNo, ChannelBTestBoxNo, ChannelBTesterNo, EndOPNo, FirstMeka1Qty, FirstMeka2Qty, FirstNGQty, FirstUnknowQty, GLCheck, GoodSampleQty, HandlerCounterQty, LotJudgement, NGSampleQty, ProgramName, Remark, SecondMeka1Qty, SecondMeka4Qty, SecondNGQty, SecondUnknowQty, SocketCheck, TestFlowName, TestTemperature, TesterACounterQty, TesterBCounterQty, TotalMeka1Qty, TotalMeka2Qty, TotalMeka4Qty, TotalUnknowQty, TesterType, InitialYield, FinalYield, FirstEndYield, LCL, DuringProductionCheck, FirstAutoAsiCheck, LotEndVisualInspectNGQty, LotEndVisualInspectTotalQty, LotStartVisualInspectNGQty, LotStartVisualInspectTotalQty, MarkingInspection, SecondAutoAsiCheck, SocketChange, FirstGoodBin1Qty, FirstGoodBin2Qty, SecondGoodBin1Qty, SecondGoodBin2Qty, TotalGoodBin1Qty, TotalGoodBin2Qty, TotalNGQty, ChangedSocketNumCh1, ChangedSocketNumCh2, ChangedSocketNumCh3, ChangedSocketNumCh4, SocketNumCh1, SocketNumCh2, SocketNumCh3, SocketNumCh4, Original_MCNo, Original_LotNo, Original_LotStartTime, Original_MCType, Original_OPNo, Original_InputQty, Original_TotalGood, Original_TotalNG, Original_OPRate, Original_MaximumRPM, Original_AverageRPM, Original_MTBF, Original_MTTR, Original_AlarmTotal, Original_LotEndTime, Original_RunTime, Original_StopTime, Original_AlarmTime, Original_BoxName, Original_ChannelATestBoxNo, Original_ChannelATesterNo, Original_ChannelBTestBoxNo, Original_ChannelBTesterNo, Original_EndOPNo, Original_FirstMeka1Qty, Original_FirstMeka2Qty, Original_FirstNGQty, Original_FirstUnknowQty, Original_GLCheck, Original_GoodSampleQty, Original_HandlerCounterQty, Original_LotJudgement, Original_NGSampleQty, Original_ProgramName, Original_Remark, Original_SecondMeka1Qty, Original_SecondMeka4Qty, Original_SecondNGQty, Original_SecondUnknowQty, Original_SocketCheck, Original_TestFlowName, Original_TestTemperature, Original_TesterACounterQty, Original_TesterBCounterQty, Original_TotalMeka1Qty, Original_TotalMeka2Qty, Original_TotalMeka4Qty, Original_TotalUnknowQty, Original_TesterType, Original_InitialYield, Original_FinalYield, Original_FirstEndYield, Original_LCL, Original_DuringProductionCheck, Original_FirstAutoAsiCheck, Original_LotEndVisualInspectNGQty, Original_LotEndVisualInspectTotalQty, Original_LotStartVisualInspectNGQty, Original_LotStartVisualInspectTotalQty, Original_MarkingInspection, Original_SecondAutoAsiCheck, Original_SocketChange, Original_FirstGoodBin1Qty, Original_FirstGoodBin2Qty, Original_SecondGoodBin1Qty, Original_SecondGoodBin2Qty, Original_TotalGoodBin1Qty, Original_TotalGoodBin2Qty, Original_TotalNGQty, Original_ChangedSocketNumCh1, Original_ChangedSocketNumCh2, Original_ChangedSocketNumCh3, Original_ChangedSocketNumCh4, Original_SocketNumCh1, Original_SocketNumCh2, Original_SocketNumCh3, Original_SocketNumCh4)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FTMachineSettingTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FTMachineSetting"
            tableMapping.ColumnMappings.Add("MCNo", "MCNo")
            tableMapping.ColumnMappings.Add("MachineType", "MachineType")
            tableMapping.ColumnMappings.Add("PDMachineType", "PDMachineType")
            tableMapping.ColumnMappings.Add("RPMSetting", "RPMSetting")
            tableMapping.ColumnMappings.Add("OPRateSetting", "OPRateSetting")
            tableMapping.ColumnMappings.Add("MTTRSetting", "MTTRSetting")
            tableMapping.ColumnMappings.Add("MTBFSetting", "MTBFSetting")
            tableMapping.ColumnMappings.Add("MoxaIP", "MoxaIP")
            tableMapping.ColumnMappings.Add("SelfConIP", "SelfConIP")
            tableMapping.ColumnMappings.Add("PositionX", "PositionX")
            tableMapping.ColumnMappings.Add("PositionY", "PositionY")
            tableMapping.ColumnMappings.Add("UseAutoMode", "UseAutoMode")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [FTMachineSetting] WHERE (([MCNo] = @Original_MCNo))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MCNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MCNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [FTMachineSetting] ([MCNo], [MachineType], [PDMachineType], [RPMSetti"& _ 
                "ng], [OPRateSetting], [MTTRSetting], [MTBFSetting], [MoxaIP], [SelfConIP], [Posi"& _ 
                "tionX], [PositionY], [UseAutoMode]) VALUES (@MCNo, @MachineType, @PDMachineType,"& _ 
                " @RPMSetting, @OPRateSetting, @MTTRSetting, @MTBFSetting, @MoxaIP, @SelfConIP, @"& _ 
                "PositionX, @PositionY, @UseAutoMode);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT MCNo, MachineType, PDMachineType, "& _ 
                "RPMSetting, OPRateSetting, MTTRSetting, MTBFSetting, MoxaIP, SelfConIP, Position"& _ 
                "X, PositionY, UseAutoMode FROM FTMachineSetting WHERE (MCNo = @MCNo)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MCNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MCNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MachineType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MachineType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PDMachineType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PDMachineType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPMSetting", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPMSetting", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPRateSetting", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPRateSetting", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MTTRSetting", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MTTRSetting", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MTBFSetting", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MTBFSetting", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MoxaIP", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MoxaIP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SelfConIP", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SelfConIP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PositionX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PositionX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PositionY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PositionY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UseAutoMode", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UseAutoMode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [FTMachineSetting] SET [MCNo] = @MCNo, [MachineType] = @MachineType, [PDMa"& _ 
                "chineType] = @PDMachineType, [RPMSetting] = @RPMSetting, [OPRateSetting] = @OPRa"& _ 
                "teSetting, [MTTRSetting] = @MTTRSetting, [MTBFSetting] = @MTBFSetting, [MoxaIP] "& _ 
                "= @MoxaIP, [SelfConIP] = @SelfConIP, [PositionX] = @PositionX, [PositionY] = @Po"& _ 
                "sitionY, [UseAutoMode] = @UseAutoMode WHERE (([MCNo] = @Original_MCNo));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT"& _ 
                " MCNo, MachineType, PDMachineType, RPMSetting, OPRateSetting, MTTRSetting, MTBFS"& _ 
                "etting, MoxaIP, SelfConIP, PositionX, PositionY, UseAutoMode FROM FTMachineSetti"& _ 
                "ng WHERE (MCNo = @MCNo)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MCNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MCNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MachineType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MachineType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PDMachineType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PDMachineType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPMSetting", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPMSetting", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OPRateSetting", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OPRateSetting", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MTTRSetting", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MTTRSetting", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MTBFSetting", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MTBFSetting", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MoxaIP", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MoxaIP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SelfConIP", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SelfConIP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PositionX", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PositionX", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PositionY", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PositionY", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@UseAutoMode", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "UseAutoMode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MCNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MCNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SelfCon.My.MySettings.Default.DBxConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(3) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     MCNo, MachineType, PDMachineType, RPMSetting, OPRateSetting, MTTRSetti"& _ 
                "ng, MTBFSetting, MoxaIP, SelfConIP, PositionX, PositionY, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                    "& _ 
                "  UseAutoMode"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         FTMachineSetting"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT MCNo, MTBFSetting, MTTRSetting, MachineType, MoxaIP, OPRateSetting, PDMach"& _ 
                "ineType, PositionX, PositionY, RPMSetting, SelfConIP, UseAutoMode FROM FTMachine"& _ 
                "Setting WHERE (MCNo = @MCNo)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MCNo", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "MCNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT MCNo, MTBFSetting, MTTRSetting, MachineType, MoxaIP, OPRateSetting, PDMach"& _ 
                "ineType, PositionX, PositionY, RPMSetting, SelfConIP, UseAutoMode FROM FTMachine"& _ 
                "Setting WHERE (SelfConIP IS NULL) OR (SelfConIP = '')"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT MCNo, MTBFSetting, MTTRSetting, MachineType, MoxaIP, OPRateSetting, PDMach"& _ 
                "ineType, PositionX, PositionY, RPMSetting, SelfConIP, UseAutoMode FROM FTMachine"& _ 
                "Setting WHERE (SelfConIP = @SelfConIP)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SelfConIP", Global.System.Data.SqlDbType.VarChar, 15, Global.System.Data.ParameterDirection.Input, 0, 0, "SelfConIP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DBxDataSet.FTMachineSettingDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DBxDataSet.FTMachineSettingDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DBxDataSet.FTMachineSettingDataTable = New DBxDataSet.FTMachineSettingDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByMCNo(ByVal dataTable As DBxDataSet.FTMachineSettingDataTable, ByVal MCNo As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (MCNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MCNo")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(MCNo,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByMCNo(ByVal MCNo As String) As DBxDataSet.FTMachineSettingDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (MCNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MCNo")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(MCNo,String)
            End If
            Dim dataTable As DBxDataSet.FTMachineSettingDataTable = New DBxDataSet.FTMachineSettingDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByNullOrEmptySelfConIP(ByVal dataTable As DBxDataSet.FTMachineSettingDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByNullOrEmptySelfConIP() As DBxDataSet.FTMachineSettingDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Dim dataTable As DBxDataSet.FTMachineSettingDataTable = New DBxDataSet.FTMachineSettingDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillBySelfConIP(ByVal dataTable As DBxDataSet.FTMachineSettingDataTable, ByVal SelfConIP As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (SelfConIP Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(SelfConIP,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBySelfConIP(ByVal SelfConIP As String) As DBxDataSet.FTMachineSettingDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (SelfConIP Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(SelfConIP,String)
            End If
            Dim dataTable As DBxDataSet.FTMachineSettingDataTable = New DBxDataSet.FTMachineSettingDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DBxDataSet.FTMachineSettingDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DBxDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "FTMachineSetting")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_MCNo As String) As Integer
            If (Original_MCNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MCNo")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_MCNo,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal MCNo As String, ByVal MachineType As String, ByVal PDMachineType As String, ByVal RPMSetting As Global.System.Nullable(Of Single), ByVal OPRateSetting As Global.System.Nullable(Of Single), ByVal MTTRSetting As Global.System.Nullable(Of Single), ByVal MTBFSetting As Global.System.Nullable(Of Single), ByVal MoxaIP As String, ByVal SelfConIP As String, ByVal PositionX As Integer, ByVal PositionY As Integer, ByVal UseAutoMode As Global.System.Nullable(Of Boolean)) As Integer
            If (MCNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MCNo")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(MCNo,String)
            End If
            If (MachineType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MachineType")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(MachineType,String)
            End If
            If (PDMachineType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(PDMachineType,String)
            End If
            If (RPMSetting.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(RPMSetting.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (OPRateSetting.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(OPRateSetting.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (MTTRSetting.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(MTTRSetting.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (MTBFSetting.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(MTBFSetting.Value,Single)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (MoxaIP Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(MoxaIP,String)
            End If
            If (SelfConIP Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(SelfConIP,String)
            End If
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(PositionX,Integer)
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(PositionY,Integer)
            If (UseAutoMode.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(UseAutoMode.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal MCNo As String, ByVal MachineType As String, ByVal PDMachineType As String, ByVal RPMSetting As Global.System.Nullable(Of Single), ByVal OPRateSetting As Global.System.Nullable(Of Single), ByVal MTTRSetting As Global.System.Nullable(Of Single), ByVal MTBFSetting As Global.System.Nullable(Of Single), ByVal MoxaIP As String, ByVal SelfConIP As String, ByVal PositionX As Integer, ByVal PositionY As Integer, ByVal UseAutoMode As Global.System.Nullable(Of Boolean), ByVal Original_MCNo As String) As Integer
            If (MCNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MCNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(MCNo,String)
            End If
            If (MachineType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MachineType")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(MachineType,String)
            End If
            If (PDMachineType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(PDMachineType,String)
            End If
            If (RPMSetting.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(RPMSetting.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (OPRateSetting.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(OPRateSetting.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (MTTRSetting.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(MTTRSetting.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (MTBFSetting.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(MTBFSetting.Value,Single)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (MoxaIP Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(MoxaIP,String)
            End If
            If (SelfConIP Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(SelfConIP,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(PositionX,Integer)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(PositionY,Integer)
            If (UseAutoMode.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(UseAutoMode.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (Original_MCNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_MCNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_MCNo,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal MachineType As String, ByVal PDMachineType As String, ByVal RPMSetting As Global.System.Nullable(Of Single), ByVal OPRateSetting As Global.System.Nullable(Of Single), ByVal MTTRSetting As Global.System.Nullable(Of Single), ByVal MTBFSetting As Global.System.Nullable(Of Single), ByVal MoxaIP As String, ByVal SelfConIP As String, ByVal PositionX As Integer, ByVal PositionY As Integer, ByVal UseAutoMode As Global.System.Nullable(Of Boolean), ByVal Original_MCNo As String) As Integer
            Return Me.Update(Original_MCNo, MachineType, PDMachineType, RPMSetting, OPRateSetting, MTTRSetting, MTBFSetting, MoxaIP, SelfConIP, PositionX, PositionY, UseAutoMode, Original_MCNo)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class MyUserTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "MyUser"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Password", "Password")
            tableMapping.ColumnMappings.Add("FirstName", "FirstName")
            tableMapping.ColumnMappings.Add("LastName", "LastName")
            tableMapping.ColumnMappings.Add("Organize", "Organize")
            tableMapping.ColumnMappings.Add("ImageUrl", "ImageUrl")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[MyUser] WHERE (([ID] = @Original_ID) AND ((@IsNull_Password = "& _ 
                "1 AND [Password] IS NULL) OR ([Password] = @Original_Password)) AND ((@IsNull_Fi"& _ 
                "rstName = 1 AND [FirstName] IS NULL) OR ([FirstName] = @Original_FirstName)) AND"& _ 
                " ((@IsNull_LastName = 1 AND [LastName] IS NULL) OR ([LastName] = @Original_LastN"& _ 
                "ame)) AND ((@IsNull_Organize = 1 AND [Organize] IS NULL) OR ([Organize] = @Origi"& _ 
                "nal_Organize)) AND ((@IsNull_ImageUrl = 1 AND [ImageUrl] IS NULL) OR ([ImageUrl]"& _ 
                " = @Original_ImageUrl)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Password", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Password", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Password", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Password", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FirstName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FirstName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LastName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LastName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Organize", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Organize", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Organize", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Organize", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ImageUrl", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ImageUrl", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ImageUrl", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ImageUrl", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[MyUser] ([ID], [Password], [FirstName], [LastName], [Organize]"& _ 
                ", [ImageUrl]) VALUES (@ID, @Password, @FirstName, @LastName, @Organize, @ImageUr"& _ 
                "l);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID, Password, FirstName, LastName, Organize, ImageUrl FROM MyUser WH"& _ 
                "ERE (ID = @ID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Password", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Password", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FirstName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LastName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Organize", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Organize", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ImageUrl", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ImageUrl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[MyUser] SET [ID] = @ID, [Password] = @Password, [FirstName] = @Firs"& _ 
                "tName, [LastName] = @LastName, [Organize] = @Organize, [ImageUrl] = @ImageUrl WH"& _ 
                "ERE (([ID] = @Original_ID) AND ((@IsNull_Password = 1 AND [Password] IS NULL) OR"& _ 
                " ([Password] = @Original_Password)) AND ((@IsNull_FirstName = 1 AND [FirstName] "& _ 
                "IS NULL) OR ([FirstName] = @Original_FirstName)) AND ((@IsNull_LastName = 1 AND "& _ 
                "[LastName] IS NULL) OR ([LastName] = @Original_LastName)) AND ((@IsNull_Organize"& _ 
                " = 1 AND [Organize] IS NULL) OR ([Organize] = @Original_Organize)) AND ((@IsNull"& _ 
                "_ImageUrl = 1 AND [ImageUrl] IS NULL) OR ([ImageUrl] = @Original_ImageUrl)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"S"& _ 
                "ELECT ID, Password, FirstName, LastName, Organize, ImageUrl FROM MyUser WHERE (I"& _ 
                "D = @ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Password", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Password", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FirstName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LastName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Organize", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Organize", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ImageUrl", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ImageUrl", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Password", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Password", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Password", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Password", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_FirstName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FirstName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FirstName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LastName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LastName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Organize", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Organize", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Organize", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Organize", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_ImageUrl", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ImageUrl", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ImageUrl", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ImageUrl", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SelfCon.My.MySettings.Default.DBxConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, Password, FirstName, LastName, Organize, ImageUrl FROM dbo.MyUser"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT ID, Password, FirstName, LastName, Organize, ImageUrl FROM dbo.MyUser WHER"& _ 
                "E ID = @ID"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.VarChar, 6, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DBxDataSet.MyUserDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DBxDataSet.MyUserDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DBxDataSet.MyUserDataTable = New DBxDataSet.MyUserDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByID(ByVal dataTable As DBxDataSet.MyUserDataTable, ByVal ID As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ID")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ID,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByID(ByVal ID As String) As DBxDataSet.MyUserDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ID")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ID,String)
            End If
            Dim dataTable As DBxDataSet.MyUserDataTable = New DBxDataSet.MyUserDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DBxDataSet.MyUserDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DBxDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "MyUser")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As String, ByVal Original_Password As String, ByVal Original_FirstName As String, ByVal Original_LastName As String, ByVal Original_Organize As String, ByVal Original_ImageUrl As String) As Integer
            If (Original_ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ID")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,String)
            End If
            If (Original_Password Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Password,String)
            End If
            If (Original_FirstName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_FirstName,String)
            End If
            If (Original_LastName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_LastName,String)
            End If
            If (Original_Organize Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_Organize,String)
            End If
            If (Original_ImageUrl Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_ImageUrl,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID As String, ByVal Password As String, ByVal FirstName As String, ByVal LastName As String, ByVal Organize As String, ByVal ImageUrl As String) As Integer
            If (ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ID")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID,String)
            End If
            If (Password Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Password,String)
            End If
            If (FirstName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FirstName,String)
            End If
            If (LastName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(LastName,String)
            End If
            If (Organize Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Organize,String)
            End If
            If (ImageUrl Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(ImageUrl,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ID As String, ByVal Password As String, ByVal FirstName As String, ByVal LastName As String, ByVal Organize As String, ByVal ImageUrl As String, ByVal Original_ID As String, ByVal Original_Password As String, ByVal Original_FirstName As String, ByVal Original_LastName As String, ByVal Original_Organize As String, ByVal Original_ImageUrl As String) As Integer
            If (ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ID")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID,String)
            End If
            If (Password Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Password,String)
            End If
            If (FirstName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FirstName,String)
            End If
            If (LastName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(LastName,String)
            End If
            If (Organize Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Organize,String)
            End If
            If (ImageUrl Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ImageUrl,String)
            End If
            If (Original_ID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_ID")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_ID,String)
            End If
            If (Original_Password Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_Password,String)
            End If
            If (Original_FirstName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_FirstName,String)
            End If
            If (Original_LastName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_LastName,String)
            End If
            If (Original_Organize Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_Organize,String)
            End If
            If (Original_ImageUrl Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_ImageUrl,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Password As String, ByVal FirstName As String, ByVal LastName As String, ByVal Organize As String, ByVal ImageUrl As String, ByVal Original_ID As String, ByVal Original_Password As String, ByVal Original_FirstName As String, ByVal Original_LastName As String, ByVal Original_Organize As String, ByVal Original_ImageUrl As String) As Integer
            Return Me.Update(Original_ID, Password, FirstName, LastName, Organize, ImageUrl, Original_ID, Original_Password, Original_FirstName, Original_LastName, Original_Organize, Original_ImageUrl)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class UserGroupsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "UserGroups"
            tableMapping.ColumnMappings.Add("GroupName", "GroupName")
            tableMapping.ColumnMappings.Add("MemberID", "MemberID")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SelfCon.My.MySettings.Default.DBxConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     [Group].GroupName, GroupMember.MemberID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         [Group] INNER JO"& _ 
                "IN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      GroupMember ON [Group].ID = GroupMember.GroupID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE"& _ 
                "     (GroupMember.MemberID = @MemberID)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MemberID", Global.System.Data.SqlDbType.VarChar, 6, Global.System.Data.ParameterDirection.Input, 0, 0, "MemberID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetDataUserGroups(ByVal MemberID As String) As DBxDataSet.UserGroupsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (MemberID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MemberID")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(MemberID,String)
            End If
            Dim dataTable As DBxDataSet.UserGroupsDataTable = New DBxDataSet.UserGroupsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TransactionDataTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TransactionData"
            tableMapping.ColumnMappings.Add("LotNo", "LotNo")
            tableMapping.ColumnMappings.Add("Package", "Package")
            tableMapping.ColumnMappings.Add("Device", "Device")
            tableMapping.ColumnMappings.Add("FrameNo", "FrameNo")
            tableMapping.ColumnMappings.Add("FASetDirection", "FASetDirection")
            tableMapping.ColumnMappings.Add("CodeNo", "CodeNo")
            tableMapping.ColumnMappings.Add("WaferLotNo", "WaferLotNo")
            tableMapping.ColumnMappings.Add("TapingDirection", "TapingDirection")
            tableMapping.ColumnMappings.Add("MarkType", "MarkType")
            tableMapping.ColumnMappings.Add("MarkTextLine3", "MarkTextLine3")
            tableMapping.ColumnMappings.Add("MarkTextLine2", "MarkTextLine2")
            tableMapping.ColumnMappings.Add("MarkTextLine1", "MarkTextLine1")
            tableMapping.ColumnMappings.Add("NumberOfStampStep", "NumberOfStampStep")
            tableMapping.ColumnMappings.Add("OSFT", "OSFT")
            tableMapping.ColumnMappings.Add("OSProgram", "OSProgram")
            tableMapping.ColumnMappings.Add("MoldType", "MoldType")
            tableMapping.ColumnMappings.Add("NewFormName", "NewFormName")
            tableMapping.ColumnMappings.Add("FTForm", "FTForm")
            tableMapping.ColumnMappings.Add("MarkNo", "MarkNo")
            tableMapping.ColumnMappings.Add("PDFree", "PDFree")
            tableMapping.ColumnMappings.Add("ULMark", "ULMark")
            tableMapping.ColumnMappings.Add("ReelCount", "ReelCount")
            tableMapping.ColumnMappings.Add("CleamCounterMeasure", "CleamCounterMeasure")
            tableMapping.ColumnMappings.Add("SubRank", "SubRank")
            tableMapping.ColumnMappings.Add("Mask", "Mask")
            tableMapping.ColumnMappings.Add("ETC1", "ETC1")
            tableMapping.ColumnMappings.Add("ETC2", "ETC2")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [TransactionData] WHERE (([LotNo] = @Original_LotNo))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LotNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [TransactionData] ([LotNo], [Package], [Device], [FrameNo], [FASetDir"& _ 
                "ection], [CodeNo], [WaferLotNo], [TapingDirection], [MarkType], [MarkTextLine3],"& _ 
                " [MarkTextLine2], [MarkTextLine1], [NumberOfStampStep], [OSFT], [OSProgram], [Mo"& _ 
                "ldType], [NewFormName], [FTForm], [MarkNo], [PDFree], [ULMark], [ReelCount], [Cl"& _ 
                "eamCounterMeasure], [SubRank], [Mask], [ETC1], [ETC2]) VALUES (@LotNo, @Package,"& _ 
                " @Device, @FrameNo, @FASetDirection, @CodeNo, @WaferLotNo, @TapingDirection, @Ma"& _ 
                "rkType, @MarkTextLine3, @MarkTextLine2, @MarkTextLine1, @NumberOfStampStep, @OSF"& _ 
                "T, @OSProgram, @MoldType, @NewFormName, @FTForm, @MarkNo, @PDFree, @ULMark, @Ree"& _ 
                "lCount, @CleamCounterMeasure, @SubRank, @Mask, @ETC1, @ETC2);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT LotNo, Pac"& _ 
                "kage, Device, FrameNo, FASetDirection, CodeNo, WaferLotNo, TapingDirection, Mark"& _ 
                "Type, MarkTextLine3, MarkTextLine2, MarkTextLine1, NumberOfStampStep, OSFT, OSPr"& _ 
                "ogram, MoldType, NewFormName, FTForm, MarkNo, PDFree, ULMark, ReelCount, CleamCo"& _ 
                "unterMeasure, SubRank, Mask, ETC1, ETC2 FROM TransactionData WHERE (LotNo = @Lot"& _ 
                "No)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Package", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Package", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Device", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Device", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FrameNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FrameNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FASetDirection", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FASetDirection", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodeNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WaferLotNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WaferLotNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TapingDirection", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TapingDirection", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MarkType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarkType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MarkTextLine3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarkTextLine3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MarkTextLine2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarkTextLine2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MarkTextLine1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarkTextLine1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NumberOfStampStep", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NumberOfStampStep", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OSFT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OSFT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OSProgram", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OSProgram", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MoldType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MoldType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NewFormName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NewFormName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FTForm", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FTForm", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MarkNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarkNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PDFree", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PDFree", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ULMark", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ULMark", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReelCount", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReelCount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CleamCounterMeasure", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CleamCounterMeasure", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SubRank", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubRank", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Mask", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Mask", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ETC1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ETC1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ETC2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ETC2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [TransactionData] SET [LotNo] = @LotNo, [Package] = @Package, [Device] = @"& _ 
                "Device, [FrameNo] = @FrameNo, [FASetDirection] = @FASetDirection, [CodeNo] = @Co"& _ 
                "deNo, [WaferLotNo] = @WaferLotNo, [TapingDirection] = @TapingDirection, [MarkTyp"& _ 
                "e] = @MarkType, [MarkTextLine3] = @MarkTextLine3, [MarkTextLine2] = @MarkTextLin"& _ 
                "e2, [MarkTextLine1] = @MarkTextLine1, [NumberOfStampStep] = @NumberOfStampStep, "& _ 
                "[OSFT] = @OSFT, [OSProgram] = @OSProgram, [MoldType] = @MoldType, [NewFormName] "& _ 
                "= @NewFormName, [FTForm] = @FTForm, [MarkNo] = @MarkNo, [PDFree] = @PDFree, [ULM"& _ 
                "ark] = @ULMark, [ReelCount] = @ReelCount, [CleamCounterMeasure] = @CleamCounterM"& _ 
                "easure, [SubRank] = @SubRank, [Mask] = @Mask, [ETC1] = @ETC1, [ETC2] = @ETC2 WHE"& _ 
                "RE (([LotNo] = @Original_LotNo));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT LotNo, Package, Device, FrameNo, FASet"& _ 
                "Direction, CodeNo, WaferLotNo, TapingDirection, MarkType, MarkTextLine3, MarkTex"& _ 
                "tLine2, MarkTextLine1, NumberOfStampStep, OSFT, OSProgram, MoldType, NewFormName"& _ 
                ", FTForm, MarkNo, PDFree, ULMark, ReelCount, CleamCounterMeasure, SubRank, Mask,"& _ 
                " ETC1, ETC2 FROM TransactionData WHERE (LotNo = @LotNo)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Package", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Package", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Device", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Device", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FrameNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FrameNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FASetDirection", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FASetDirection", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CodeNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CodeNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WaferLotNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WaferLotNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TapingDirection", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TapingDirection", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MarkType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarkType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MarkTextLine3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarkTextLine3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MarkTextLine2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarkTextLine2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MarkTextLine1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarkTextLine1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NumberOfStampStep", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NumberOfStampStep", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OSFT", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OSFT", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OSProgram", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OSProgram", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MoldType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MoldType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NewFormName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NewFormName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FTForm", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FTForm", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MarkNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MarkNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PDFree", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PDFree", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ULMark", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ULMark", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReelCount", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReelCount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CleamCounterMeasure", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CleamCounterMeasure", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SubRank", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubRank", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Mask", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Mask", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ETC1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ETC1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ETC2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ETC2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LotNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SelfCon.My.MySettings.Default.DBxConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     TransactionData.*"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         TransactionData"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     TransactionData.*"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         TransactionData"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE LotNo = @LotNo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotNo", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "LotNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DBxDataSet.TransactionDataDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DBxDataSet.TransactionDataDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DBxDataSet.TransactionDataDataTable = New DBxDataSet.TransactionDataDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByLotNo(ByVal LotNo As String) As DBxDataSet.TransactionDataDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (LotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LotNo")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(LotNo,String)
            End If
            Dim dataTable As DBxDataSet.TransactionDataDataTable = New DBxDataSet.TransactionDataDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DBxDataSet.TransactionDataDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DBxDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "TransactionData")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_LotNo As String) As Integer
            If (Original_LotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LotNo")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_LotNo,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal LotNo As String,  _
                    ByVal Package As String,  _
                    ByVal Device As String,  _
                    ByVal FrameNo As String,  _
                    ByVal FASetDirection As String,  _
                    ByVal CodeNo As String,  _
                    ByVal WaferLotNo As String,  _
                    ByVal TapingDirection As String,  _
                    ByVal MarkType As String,  _
                    ByVal MarkTextLine3 As String,  _
                    ByVal MarkTextLine2 As String,  _
                    ByVal MarkTextLine1 As String,  _
                    ByVal NumberOfStampStep As String,  _
                    ByVal OSFT As String,  _
                    ByVal OSProgram As String,  _
                    ByVal MoldType As String,  _
                    ByVal NewFormName As String,  _
                    ByVal FTForm As String,  _
                    ByVal MarkNo As String,  _
                    ByVal PDFree As String,  _
                    ByVal ULMark As String,  _
                    ByVal ReelCount As String,  _
                    ByVal CleamCounterMeasure As String,  _
                    ByVal SubRank As String,  _
                    ByVal Mask As String,  _
                    ByVal ETC1 As String,  _
                    ByVal ETC2 As String) As Integer
            If (LotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LotNo")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(LotNo,String)
            End If
            If (Package Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Package,String)
            End If
            If (Device Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Device,String)
            End If
            If (FrameNo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(FrameNo,String)
            End If
            If (FASetDirection Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(FASetDirection,String)
            End If
            If (CodeNo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(CodeNo,String)
            End If
            If (WaferLotNo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(WaferLotNo,String)
            End If
            If (TapingDirection Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(TapingDirection,String)
            End If
            If (MarkType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(MarkType,String)
            End If
            If (MarkTextLine3 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(MarkTextLine3,String)
            End If
            If (MarkTextLine2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(MarkTextLine2,String)
            End If
            If (MarkTextLine1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(MarkTextLine1,String)
            End If
            If (NumberOfStampStep Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(NumberOfStampStep,String)
            End If
            If (OSFT Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(OSFT,String)
            End If
            If (OSProgram Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(OSProgram,String)
            End If
            If (MoldType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(MoldType,String)
            End If
            If (NewFormName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(NewFormName,String)
            End If
            If (FTForm Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(FTForm,String)
            End If
            If (MarkNo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(MarkNo,String)
            End If
            If (PDFree Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(PDFree,String)
            End If
            If (ULMark Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(ULMark,String)
            End If
            If (ReelCount Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(ReelCount,String)
            End If
            If (CleamCounterMeasure Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(CleamCounterMeasure,String)
            End If
            If (SubRank Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(SubRank,String)
            End If
            If (Mask Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(Mask,String)
            End If
            If (ETC1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(ETC1,String)
            End If
            If (ETC2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(ETC2,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal LotNo As String,  _
                    ByVal Package As String,  _
                    ByVal Device As String,  _
                    ByVal FrameNo As String,  _
                    ByVal FASetDirection As String,  _
                    ByVal CodeNo As String,  _
                    ByVal WaferLotNo As String,  _
                    ByVal TapingDirection As String,  _
                    ByVal MarkType As String,  _
                    ByVal MarkTextLine3 As String,  _
                    ByVal MarkTextLine2 As String,  _
                    ByVal MarkTextLine1 As String,  _
                    ByVal NumberOfStampStep As String,  _
                    ByVal OSFT As String,  _
                    ByVal OSProgram As String,  _
                    ByVal MoldType As String,  _
                    ByVal NewFormName As String,  _
                    ByVal FTForm As String,  _
                    ByVal MarkNo As String,  _
                    ByVal PDFree As String,  _
                    ByVal ULMark As String,  _
                    ByVal ReelCount As String,  _
                    ByVal CleamCounterMeasure As String,  _
                    ByVal SubRank As String,  _
                    ByVal Mask As String,  _
                    ByVal ETC1 As String,  _
                    ByVal ETC2 As String,  _
                    ByVal Original_LotNo As String) As Integer
            If (LotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LotNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(LotNo,String)
            End If
            If (Package Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Package,String)
            End If
            If (Device Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Device,String)
            End If
            If (FrameNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(FrameNo,String)
            End If
            If (FASetDirection Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(FASetDirection,String)
            End If
            If (CodeNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(CodeNo,String)
            End If
            If (WaferLotNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(WaferLotNo,String)
            End If
            If (TapingDirection Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(TapingDirection,String)
            End If
            If (MarkType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(MarkType,String)
            End If
            If (MarkTextLine3 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(MarkTextLine3,String)
            End If
            If (MarkTextLine2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(MarkTextLine2,String)
            End If
            If (MarkTextLine1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(MarkTextLine1,String)
            End If
            If (NumberOfStampStep Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(NumberOfStampStep,String)
            End If
            If (OSFT Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(OSFT,String)
            End If
            If (OSProgram Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(OSProgram,String)
            End If
            If (MoldType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(MoldType,String)
            End If
            If (NewFormName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(NewFormName,String)
            End If
            If (FTForm Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(FTForm,String)
            End If
            If (MarkNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(MarkNo,String)
            End If
            If (PDFree Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(PDFree,String)
            End If
            If (ULMark Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(ULMark,String)
            End If
            If (ReelCount Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(ReelCount,String)
            End If
            If (CleamCounterMeasure Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(CleamCounterMeasure,String)
            End If
            If (SubRank Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(SubRank,String)
            End If
            If (Mask Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Mask,String)
            End If
            If (ETC1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(ETC1,String)
            End If
            If (ETC2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(ETC2,String)
            End If
            If (Original_LotNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_LotNo")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_LotNo,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal Package As String,  _
                    ByVal Device As String,  _
                    ByVal FrameNo As String,  _
                    ByVal FASetDirection As String,  _
                    ByVal CodeNo As String,  _
                    ByVal WaferLotNo As String,  _
                    ByVal TapingDirection As String,  _
                    ByVal MarkType As String,  _
                    ByVal MarkTextLine3 As String,  _
                    ByVal MarkTextLine2 As String,  _
                    ByVal MarkTextLine1 As String,  _
                    ByVal NumberOfStampStep As String,  _
                    ByVal OSFT As String,  _
                    ByVal OSProgram As String,  _
                    ByVal MoldType As String,  _
                    ByVal NewFormName As String,  _
                    ByVal FTForm As String,  _
                    ByVal MarkNo As String,  _
                    ByVal PDFree As String,  _
                    ByVal ULMark As String,  _
                    ByVal ReelCount As String,  _
                    ByVal CleamCounterMeasure As String,  _
                    ByVal SubRank As String,  _
                    ByVal Mask As String,  _
                    ByVal ETC1 As String,  _
                    ByVal ETC2 As String,  _
                    ByVal Original_LotNo As String) As Integer
            Return Me.Update(Original_LotNo, Package, Device, FrameNo, FASetDirection, CodeNo, WaferLotNo, TapingDirection, MarkType, MarkTextLine3, MarkTextLine2, MarkTextLine1, NumberOfStampStep, OSFT, OSProgram, MoldType, NewFormName, FTForm, MarkNo, PDFree, ULMark, ReelCount, CleamCounterMeasure, SubRank, Mask, ETC1, ETC2, Original_LotNo)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FixedLCLTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FixedLCL"
            tableMapping.ColumnMappings.Add("TestFlowName", "TestFlowName")
            tableMapping.ColumnMappings.Add("LCL", "LCL")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [FixedLCL] WHERE (([TestFlowName] = @Original_TestFlowName) AND ((@Is"& _ 
                "Null_LCL = 1 AND [LCL] IS NULL) OR ([LCL] = @Original_LCL)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TestFlowName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TestFlowName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LCL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LCL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LCL", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LCL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [FixedLCL] ([TestFlowName], [LCL]) VALUES (@TestFlowName, @LCL);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SEL"& _ 
                "ECT TestFlowName, LCL FROM FixedLCL WHERE (TestFlowName = @TestFlowName)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TestFlowName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TestFlowName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LCL", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LCL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [FixedLCL] SET [TestFlowName] = @TestFlowName, [LCL] = @LCL WHERE (([TestF"& _ 
                "lowName] = @Original_TestFlowName) AND ((@IsNull_LCL = 1 AND [LCL] IS NULL) OR ("& _ 
                "[LCL] = @Original_LCL)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT TestFlowName, LCL FROM FixedLCL WHERE (TestFlo"& _ 
                "wName = @TestFlowName)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TestFlowName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TestFlowName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LCL", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LCL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TestFlowName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TestFlowName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LCL", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LCL", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LCL", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LCL", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SelfCon.My.MySettings.Default.DBxConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     TestFlowName, LCL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         FixedLCL"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     TestFlowName, LCL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         FixedLCL"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE TestFlowName = @TestFl"& _ 
                "owName"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TestFlowName", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "TestFlowName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DBxDataSet.FixedLCLDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DBxDataSet.FixedLCLDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DBxDataSet.FixedLCLDataTable = New DBxDataSet.FixedLCLDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByTestFlowName(ByVal TestFlowName As String) As DBxDataSet.FixedLCLDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (TestFlowName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TestFlowName")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(TestFlowName,String)
            End If
            Dim dataTable As DBxDataSet.FixedLCLDataTable = New DBxDataSet.FixedLCLDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DBxDataSet.FixedLCLDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DBxDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "FixedLCL")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TesterTypeTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TesterType"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("Name", "Name")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[TesterType] WHERE (([ID] = @Original_ID) AND ([Name] = @Origin"& _ 
                "al_Name))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[TesterType] ([ID], [Name]) VALUES (@ID, @Name);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID, Na"& _ 
                "me FROM TesterType WHERE (ID = @ID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[TesterType] SET [ID] = @ID, [Name] = @Name WHERE (([ID] = @Original"& _ 
                "_ID) AND ([Name] = @Original_Name));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID, Name FROM TesterType WHERE (ID "& _ 
                "= @ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Name", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SelfCon.My.MySettings.Default.DBxConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, Name FROM dbo.TesterType"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DBxDataSet.TesterTypeDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DBxDataSet.TesterTypeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DBxDataSet.TesterTypeDataTable = New DBxDataSet.TesterTypeDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DBxDataSet.TesterTypeDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DBxDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "TesterType")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer, ByVal Original_Name As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            If (Original_Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Name")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Name,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ID As Integer, ByVal Name As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ID,Integer)
            If (Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Name")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Name,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ID As Integer, ByVal Name As String, ByVal Original_ID As Integer, ByVal Original_Name As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ID,Integer)
            If (Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Name")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Name,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_ID,Integer)
            If (Original_Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Name")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_Name,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Name As String, ByVal Original_ID As Integer, ByVal Original_Name As String) As Integer
            Return Me.Update(Original_ID, Name, Original_ID, Original_Name)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class EquipmentLocationTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "EquipmentLocation"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("StatusID", "StatusID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [EQP].[Equipment] WHERE (([ID] = @Original_ID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [EQP].[Equipment] SET [StatusID] = @StatusID WHERE (([ID] = @Original_ID))"& _ 
                ";"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID, StatusID FROM EQP.Equipment AS EquipmentLocation WHERE (ID = @ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StatusID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StatusID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SelfCon.My.MySettings.Default.DBxConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     ID, StatusID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         EQP.Equipment AS EquipmentLocation"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DBxDataSet.EquipmentLocationDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DBxDataSet.EquipmentLocationDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DBxDataSet.EquipmentLocationDataTable = New DBxDataSet.EquipmentLocationDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DBxDataSet.EquipmentLocationDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DBxDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "EquipmentLocation")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal StatusID As Global.System.Nullable(Of Integer), ByVal Original_ID As Integer, ByVal ID As Integer) As Integer
            If (StatusID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(StatusID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Original_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal StatusID As Global.System.Nullable(Of Integer), ByVal Original_ID As Integer) As Integer
            Return Me.Update(StatusID, Original_ID, Original_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class DataTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Data"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("QRName", "QRName")
            tableMapping.ColumnMappings.Add("Num", "Num")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [JIG].[Data] WHERE (([ID] = @Original_ID) AND ((@IsNull_QRName = 1 AN"& _ 
                "D [QRName] IS NULL) OR ([QRName] = @Original_QRName)) AND ([Num] = @Original_Num"& _ 
                "))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QRName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QRName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QRName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QRName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Num", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Num", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [JIG].[Data] SET [QRName] = @QRName, [Num] = @Num WHERE (([ID] = @Original"& _ 
                "_ID) AND ((@IsNull_QRName = 1 AND [QRName] IS NULL) OR ([QRName] = @Original_QRN"& _ 
                "ame)) AND ([Num] = @Original_Num));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID, QRName, Num FROM JIG.Data WHERE "& _ 
                "(ID = @ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QRName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QRName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Num", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Num", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QRName", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QRName", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QRName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QRName", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Num", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Num", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SelfCon.My.MySettings.Default.DBxConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT ID, QRName, Num FROM JIG.Data"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DBxDataSet.DataDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DBxDataSet.DataDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DBxDataSet.DataDataTable = New DBxDataSet.DataDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DBxDataSet.DataDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DBxDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Data")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer, ByVal Original_QRName As String, ByVal Original_Num As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            If (Original_QRName Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_QRName,String)
            End If
            If (Original_Num Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Num")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Num,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal QRName As String, ByVal Num As String, ByVal Original_ID As Integer, ByVal Original_QRName As String, ByVal Original_Num As String, ByVal ID As Integer) As Integer
            If (QRName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(QRName,String)
            End If
            If (Num Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Num")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Num,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_ID,Integer)
            If (Original_QRName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_QRName,String)
            End If
            If (Original_Num Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Num")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_Num,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal QRName As String, ByVal Num As String, ByVal Original_ID As Integer, ByVal Original_QRName As String, ByVal Original_Num As String) As Integer
            Return Me.Update(QRName, Num, Original_ID, Original_QRName, Original_Num, Original_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FTSetupReportTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FTSetupReport"
            tableMapping.ColumnMappings.Add("MCNo", "MCNo")
            tableMapping.ColumnMappings.Add("LotNo", "LotNo")
            tableMapping.ColumnMappings.Add("PackageName", "PackageName")
            tableMapping.ColumnMappings.Add("DeviceName", "DeviceName")
            tableMapping.ColumnMappings.Add("ProgramName", "ProgramName")
            tableMapping.ColumnMappings.Add("TesterType", "TesterType")
            tableMapping.ColumnMappings.Add("TestFlow", "TestFlow")
            tableMapping.ColumnMappings.Add("TesterNoA", "TesterNoA")
            tableMapping.ColumnMappings.Add("TesterNoB", "TesterNoB")
            tableMapping.ColumnMappings.Add("ChannelAFTB", "ChannelAFTB")
            tableMapping.ColumnMappings.Add("ChannelBFTB", "ChannelBFTB")
            tableMapping.ColumnMappings.Add("TestBoxA", "TestBoxA")
            tableMapping.ColumnMappings.Add("TestBoxB", "TestBoxB")
            tableMapping.ColumnMappings.Add("AdaptorA", "AdaptorA")
            tableMapping.ColumnMappings.Add("AdaptorB", "AdaptorB")
            tableMapping.ColumnMappings.Add("DutcardA", "DutcardA")
            tableMapping.ColumnMappings.Add("DutcardB", "DutcardB")
            tableMapping.ColumnMappings.Add("BridgecableA", "BridgecableA")
            tableMapping.ColumnMappings.Add("BridgecableB", "BridgecableB")
            tableMapping.ColumnMappings.Add("TypeChangePackage", "TypeChangePackage")
            tableMapping.ColumnMappings.Add("SetupStartDate", "SetupStartDate")
            tableMapping.ColumnMappings.Add("SetupEndDate", "SetupEndDate")
            tableMapping.ColumnMappings.Add("BoxTesterConnection", "BoxTesterConnection")
            tableMapping.ColumnMappings.Add("OptionSetup", "OptionSetup")
            tableMapping.ColumnMappings.Add("OptionConnection", "OptionConnection")
            tableMapping.ColumnMappings.Add("OptionName1", "OptionName1")
            tableMapping.ColumnMappings.Add("OptionName2", "OptionName2")
            tableMapping.ColumnMappings.Add("OptionName3", "OptionName3")
            tableMapping.ColumnMappings.Add("OptionName4", "OptionName4")
            tableMapping.ColumnMappings.Add("OptionName5", "OptionName5")
            tableMapping.ColumnMappings.Add("OptionName6", "OptionName6")
            tableMapping.ColumnMappings.Add("OptionName7", "OptionName7")
            tableMapping.ColumnMappings.Add("OptionType1", "OptionType1")
            tableMapping.ColumnMappings.Add("OptionType2", "OptionType2")
            tableMapping.ColumnMappings.Add("OptionType3", "OptionType3")
            tableMapping.ColumnMappings.Add("OptionType4", "OptionType4")
            tableMapping.ColumnMappings.Add("OptionType5", "OptionType5")
            tableMapping.ColumnMappings.Add("OptionType6", "OptionType6")
            tableMapping.ColumnMappings.Add("OptionType7", "OptionType7")
            tableMapping.ColumnMappings.Add("OptionSetting1", "OptionSetting1")
            tableMapping.ColumnMappings.Add("OptionSetting2", "OptionSetting2")
            tableMapping.ColumnMappings.Add("OptionSetting3", "OptionSetting3")
            tableMapping.ColumnMappings.Add("OptionSetting4", "OptionSetting4")
            tableMapping.ColumnMappings.Add("OptionSetting5", "OptionSetting5")
            tableMapping.ColumnMappings.Add("OptionSetting6", "OptionSetting6")
            tableMapping.ColumnMappings.Add("OptionSetting7", "OptionSetting7")
            tableMapping.ColumnMappings.Add("QfpVacuumPad", "QfpVacuumPad")
            tableMapping.ColumnMappings.Add("QfpSocketSetup", "QfpSocketSetup")
            tableMapping.ColumnMappings.Add("QfpSocketDecision", "QfpSocketDecision")
            tableMapping.ColumnMappings.Add("QfpDecisionLeadPress", "QfpDecisionLeadPress")
            tableMapping.ColumnMappings.Add("QfpTray", "QfpTray")
            tableMapping.ColumnMappings.Add("SopStopper", "SopStopper")
            tableMapping.ColumnMappings.Add("SopSocketDecision", "SopSocketDecision")
            tableMapping.ColumnMappings.Add("SopDecisionLeadPress", "SopDecisionLeadPress")
            tableMapping.ColumnMappings.Add("ManualCheckTest", "ManualCheckTest")
            tableMapping.ColumnMappings.Add("ManualCheckTE", "ManualCheckTE")
            tableMapping.ColumnMappings.Add("ManualCheckRequestTE", "ManualCheckRequestTE")
            tableMapping.ColumnMappings.Add("ManualCheckRequestTEConfirm", "ManualCheckRequestTEConfirm")
            tableMapping.ColumnMappings.Add("PkgGood", "PkgGood")
            tableMapping.ColumnMappings.Add("PkgNG", "PkgNG")
            tableMapping.ColumnMappings.Add("PkgGoodJudgement", "PkgGoodJudgement")
            tableMapping.ColumnMappings.Add("PkgNGJudgement", "PkgNGJudgement")
            tableMapping.ColumnMappings.Add("PkgNishikiCamara", "PkgNishikiCamara")
            tableMapping.ColumnMappings.Add("PkgNishikiCamaraJudgement", "PkgNishikiCamaraJudgement")
            tableMapping.ColumnMappings.Add("PkqBantLead", "PkqBantLead")
            tableMapping.ColumnMappings.Add("PkqKakeHige", "PkqKakeHige")
            tableMapping.ColumnMappings.Add("BgaSmallBall", "BgaSmallBall")
            tableMapping.ColumnMappings.Add("BgaBentTape", "BgaBentTape")
            tableMapping.ColumnMappings.Add("Bge5S", "Bge5S")
            tableMapping.ColumnMappings.Add("SetupStatus", "SetupStatus")
            tableMapping.ColumnMappings.Add("SetupConfirmDate", "SetupConfirmDate")
            tableMapping.ColumnMappings.Add("QRCodesocketChannel4", "QRCodesocketChannel4")
            tableMapping.ColumnMappings.Add("TesterNoAQRcode", "TesterNoAQRcode")
            tableMapping.ColumnMappings.Add("TesterNoBQRcode", "TesterNoBQRcode")
            tableMapping.ColumnMappings.Add("ChannelAFTBQRcode", "ChannelAFTBQRcode")
            tableMapping.ColumnMappings.Add("ChannelBFTBQRcode", "ChannelBFTBQRcode")
            tableMapping.ColumnMappings.Add("TestBoxAQRcode", "TestBoxAQRcode")
            tableMapping.ColumnMappings.Add("TestBoxBQRcode", "TestBoxBQRcode")
            tableMapping.ColumnMappings.Add("AdaptorAQRcode", "AdaptorAQRcode")
            tableMapping.ColumnMappings.Add("AdaptorBQRcode", "AdaptorBQRcode")
            tableMapping.ColumnMappings.Add("DutcardAQRcode", "DutcardAQRcode")
            tableMapping.ColumnMappings.Add("DutcardBQRcode", "DutcardBQRcode")
            tableMapping.ColumnMappings.Add("BridgecableAQRcode", "BridgecableAQRcode")
            tableMapping.ColumnMappings.Add("BridgecableBQRcode", "BridgecableBQRcode")
            tableMapping.ColumnMappings.Add("QRCodesocket1", "QRCodesocket1")
            tableMapping.ColumnMappings.Add("QRCodesocket2", "QRCodesocket2")
            tableMapping.ColumnMappings.Add("QRCodesocket3", "QRCodesocket3")
            tableMapping.ColumnMappings.Add("QRCodesocket4", "QRCodesocket4")
            tableMapping.ColumnMappings.Add("QRCodesocketChannel1", "QRCodesocketChannel1")
            tableMapping.ColumnMappings.Add("QRCodesocketChannel2", "QRCodesocketChannel2")
            tableMapping.ColumnMappings.Add("QRCodesocketChannel3", "QRCodesocketChannel3")
            tableMapping.ColumnMappings.Add("ConfirmedCheckSheetOp", "ConfirmedCheckSheetOp")
            tableMapping.ColumnMappings.Add("ConfirmedCheckSheetSection", "ConfirmedCheckSheetSection")
            tableMapping.ColumnMappings.Add("ConfirmedShonoSection", "ConfirmedShonoSection")
            tableMapping.ColumnMappings.Add("ConfirmedCheckSheetGL", "ConfirmedCheckSheetGL")
            tableMapping.ColumnMappings.Add("ConfirmedShonoGL", "ConfirmedShonoGL")
            tableMapping.ColumnMappings.Add("ConfirmedShonoOp", "ConfirmedShonoOp")
            tableMapping.ColumnMappings.Add("StatusShonoOP", "StatusShonoOP")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [FTSetupReport] WHERE (([MCNo] = @Original_MCNo))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MCNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MCNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [FTSetupReport] ([MCNo], [LotNo], [PackageName], [DeviceName], [Progr"& _ 
                "amName], [TesterType], [TestFlow], [QRCodesocket1], [QRCodesocket2], [QRCodesock"& _ 
                "et3], [QRCodesocket4], [QRCodesocketChannel1], [QRCodesocketChannel2], [QRCodeso"& _ 
                "cketChannel3], [QRCodesocketChannel4], [TesterNoA], [TesterNoAQRcode], [TesterNo"& _ 
                "B], [TesterNoBQRcode], [ChannelAFTB], [ChannelAFTBQRcode], [ChannelBFTB], [Chann"& _ 
                "elBFTBQRcode], [TestBoxA], [TestBoxAQRcode], [TestBoxB], [TestBoxBQRcode], [Adap"& _ 
                "torA], [AdaptorAQRcode], [AdaptorB], [AdaptorBQRcode], [DutcardA], [DutcardAQRco"& _ 
                "de], [DutcardB], [DutcardBQRcode], [BridgecableA], [BridgecableAQRcode], [Bridge"& _ 
                "cableB], [BridgecableBQRcode], [TypeChangePackage], [SetupStartDate], [SetupEndD"& _ 
                "ate], [BoxTesterConnection], [OptionSetup], [OptionConnection], [OptionName1], ["& _ 
                "OptionName2], [OptionName3], [OptionName4], [OptionName5], [OptionName6], [Optio"& _ 
                "nName7], [OptionType1], [OptionType2], [OptionType3], [OptionType4], [OptionType"& _ 
                "5], [OptionType6], [OptionType7], [OptionSetting1], [OptionSetting2], [OptionSet"& _ 
                "ting3], [OptionSetting4], [OptionSetting5], [OptionSetting6], [OptionSetting7], "& _ 
                "[QfpVacuumPad], [QfpSocketSetup], [QfpSocketDecision], [QfpDecisionLeadPress], ["& _ 
                "QfpTray], [SopStopper], [SopSocketDecision], [SopDecisionLeadPress], [ManualChec"& _ 
                "kTest], [ManualCheckTE], [ManualCheckRequestTE], [ManualCheckRequestTEConfirm], "& _ 
                "[PkgGood], [PkgNG], [PkgGoodJudgement], [PkgNGJudgement], [PkgNishikiCamara], [P"& _ 
                "kgNishikiCamaraJudgement], [PkqBantLead], [PkqKakeHige], [BgaSmallBall], [BgaBen"& _ 
                "tTape], [Bge5S], [SetupStatus], [SetupConfirmDate], [ConfirmedCheckSheetOp], [Co"& _ 
                "nfirmedCheckSheetSection], [ConfirmedShonoSection], [ConfirmedCheckSheetGL], [Co"& _ 
                "nfirmedShonoGL], [ConfirmedShonoOp], [StatusShonoOP]) VALUES (@MCNo, @LotNo, @Pa"& _ 
                "ckageName, @DeviceName, @ProgramName, @TesterType, @TestFlow, @QRCodesocket1, @Q"& _ 
                "RCodesocket2, @QRCodesocket3, @QRCodesocket4, @QRCodesocketChannel1, @QRCodesock"& _ 
                "etChannel2, @QRCodesocketChannel3, @QRCodesocketChannel4, @TesterNoA, @TesterNoA"& _ 
                "QRcode, @TesterNoB, @TesterNoBQRcode, @ChannelAFTB, @ChannelAFTBQRcode, @Channel"& _ 
                "BFTB, @ChannelBFTBQRcode, @TestBoxA, @TestBoxAQRcode, @TestBoxB, @TestBoxBQRcode"& _ 
                ", @AdaptorA, @AdaptorAQRcode, @AdaptorB, @AdaptorBQRcode, @DutcardA, @DutcardAQR"& _ 
                "code, @DutcardB, @DutcardBQRcode, @BridgecableA, @BridgecableAQRcode, @Bridgecab"& _ 
                "leB, @BridgecableBQRcode, @TypeChangePackage, @SetupStartDate, @SetupEndDate, @B"& _ 
                "oxTesterConnection, @OptionSetup, @OptionConnection, @OptionName1, @OptionName2,"& _ 
                " @OptionName3, @OptionName4, @OptionName5, @OptionName6, @OptionName7, @OptionTy"& _ 
                "pe1, @OptionType2, @OptionType3, @OptionType4, @OptionType5, @OptionType6, @Opti"& _ 
                "onType7, @OptionSetting1, @OptionSetting2, @OptionSetting3, @OptionSetting4, @Op"& _ 
                "tionSetting5, @OptionSetting6, @OptionSetting7, @QfpVacuumPad, @QfpSocketSetup, "& _ 
                "@QfpSocketDecision, @QfpDecisionLeadPress, @QfpTray, @SopStopper, @SopSocketDeci"& _ 
                "sion, @SopDecisionLeadPress, @ManualCheckTest, @ManualCheckTE, @ManualCheckReque"& _ 
                "stTE, @ManualCheckRequestTEConfirm, @PkgGood, @PkgNG, @PkgGoodJudgement, @PkgNGJ"& _ 
                "udgement, @PkgNishikiCamara, @PkgNishikiCamaraJudgement, @PkqBantLead, @PkqKakeH"& _ 
                "ige, @BgaSmallBall, @BgaBentTape, @Bge5S, @SetupStatus, @SetupConfirmDate, @Conf"& _ 
                "irmedCheckSheetOp, @ConfirmedCheckSheetSection, @ConfirmedShonoSection, @Confirm"& _ 
                "edCheckSheetGL, @ConfirmedShonoGL, @ConfirmedShonoOp, @StatusShonoOP)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MCNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MCNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PackageName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PackageName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DeviceName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DeviceName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProgramName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProgramName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TesterType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TesterType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TestFlow", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TestFlow", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QRCodesocket1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QRCodesocket1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QRCodesocket2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QRCodesocket2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QRCodesocket3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QRCodesocket3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QRCodesocket4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QRCodesocket4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QRCodesocketChannel1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QRCodesocketChannel1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QRCodesocketChannel2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QRCodesocketChannel2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QRCodesocketChannel3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QRCodesocketChannel3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QRCodesocketChannel4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QRCodesocketChannel4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TesterNoA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TesterNoA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TesterNoAQRcode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TesterNoAQRcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TesterNoB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TesterNoB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TesterNoBQRcode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TesterNoBQRcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ChannelAFTB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChannelAFTB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ChannelAFTBQRcode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChannelAFTBQRcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ChannelBFTB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChannelBFTB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ChannelBFTBQRcode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChannelBFTBQRcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TestBoxA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TestBoxA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TestBoxAQRcode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TestBoxAQRcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TestBoxB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TestBoxB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TestBoxBQRcode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TestBoxBQRcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AdaptorA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AdaptorA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AdaptorAQRcode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AdaptorAQRcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AdaptorB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AdaptorB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AdaptorBQRcode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AdaptorBQRcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DutcardA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DutcardA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DutcardAQRcode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DutcardAQRcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DutcardB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DutcardB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DutcardBQRcode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DutcardBQRcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BridgecableA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BridgecableA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BridgecableAQRcode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BridgecableAQRcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BridgecableB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BridgecableB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BridgecableBQRcode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BridgecableBQRcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypeChangePackage", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeChangePackage", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SetupStartDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SetupStartDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SetupEndDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SetupEndDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BoxTesterConnection", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BoxTesterConnection", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionSetup", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionSetup", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionConnection", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionConnection", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionName1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionName1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionName2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionName2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionName3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionName3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionName4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionName4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionName5", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionName5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionName6", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionName6", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionName7", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionName7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionType1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionType1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionType2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionType2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionType3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionType3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionType4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionType4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionType5", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionType5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionType6", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionType6", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionType7", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionType7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionSetting1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionSetting1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionSetting2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionSetting2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionSetting3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionSetting3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionSetting4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionSetting4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionSetting5", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionSetting5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionSetting6", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionSetting6", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionSetting7", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionSetting7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QfpVacuumPad", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QfpVacuumPad", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QfpSocketSetup", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QfpSocketSetup", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QfpSocketDecision", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QfpSocketDecision", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QfpDecisionLeadPress", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QfpDecisionLeadPress", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QfpTray", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QfpTray", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SopStopper", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SopStopper", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SopSocketDecision", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SopSocketDecision", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SopDecisionLeadPress", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SopDecisionLeadPress", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ManualCheckTest", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ManualCheckTest", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ManualCheckTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ManualCheckTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ManualCheckRequestTE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ManualCheckRequestTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ManualCheckRequestTEConfirm", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ManualCheckRequestTEConfirm", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PkgGood", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PkgGood", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PkgNG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PkgNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PkgGoodJudgement", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PkgGoodJudgement", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PkgNGJudgement", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PkgNGJudgement", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PkgNishikiCamara", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PkgNishikiCamara", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PkgNishikiCamaraJudgement", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PkgNishikiCamaraJudgement", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PkqBantLead", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PkqBantLead", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PkqKakeHige", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PkqKakeHige", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BgaSmallBall", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BgaSmallBall", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BgaBentTape", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BgaBentTape", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Bge5S", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Bge5S", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SetupStatus", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SetupStatus", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SetupConfirmDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SetupConfirmDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConfirmedCheckSheetOp", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ConfirmedCheckSheetOp", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConfirmedCheckSheetSection", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ConfirmedCheckSheetSection", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConfirmedShonoSection", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ConfirmedShonoSection", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConfirmedCheckSheetGL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ConfirmedCheckSheetGL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConfirmedShonoGL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ConfirmedShonoGL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConfirmedShonoOp", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ConfirmedShonoOp", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StatusShonoOP", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StatusShonoOP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [FTSetupReport] SET [MCNo] = @MCNo, [LotNo] = @LotNo, [PackageName] = @Pac"& _ 
                "kageName, [DeviceName] = @DeviceName, [ProgramName] = @ProgramName, [TesterType]"& _ 
                " = @TesterType, [TestFlow] = @TestFlow, [QRCodesocket1] = @QRCodesocket1, [QRCod"& _ 
                "esocket2] = @QRCodesocket2, [QRCodesocket3] = @QRCodesocket3, [QRCodesocket4] = "& _ 
                "@QRCodesocket4, [QRCodesocketChannel1] = @QRCodesocketChannel1, [QRCodesocketCha"& _ 
                "nnel2] = @QRCodesocketChannel2, [QRCodesocketChannel3] = @QRCodesocketChannel3, "& _ 
                "[QRCodesocketChannel4] = @QRCodesocketChannel4, [TesterNoA] = @TesterNoA, [Teste"& _ 
                "rNoAQRcode] = @TesterNoAQRcode, [TesterNoB] = @TesterNoB, [TesterNoBQRcode] = @T"& _ 
                "esterNoBQRcode, [ChannelAFTB] = @ChannelAFTB, [ChannelAFTBQRcode] = @ChannelAFTB"& _ 
                "QRcode, [ChannelBFTB] = @ChannelBFTB, [ChannelBFTBQRcode] = @ChannelBFTBQRcode, "& _ 
                "[TestBoxA] = @TestBoxA, [TestBoxAQRcode] = @TestBoxAQRcode, [TestBoxB] = @TestBo"& _ 
                "xB, [TestBoxBQRcode] = @TestBoxBQRcode, [AdaptorA] = @AdaptorA, [AdaptorAQRcode]"& _ 
                " = @AdaptorAQRcode, [AdaptorB] = @AdaptorB, [AdaptorBQRcode] = @AdaptorBQRcode, "& _ 
                "[DutcardA] = @DutcardA, [DutcardAQRcode] = @DutcardAQRcode, [DutcardB] = @Dutcar"& _ 
                "dB, [DutcardBQRcode] = @DutcardBQRcode, [BridgecableA] = @BridgecableA, [Bridgec"& _ 
                "ableAQRcode] = @BridgecableAQRcode, [BridgecableB] = @BridgecableB, [Bridgecable"& _ 
                "BQRcode] = @BridgecableBQRcode, [TypeChangePackage] = @TypeChangePackage, [Setup"& _ 
                "StartDate] = @SetupStartDate, [SetupEndDate] = @SetupEndDate, [BoxTesterConnecti"& _ 
                "on] = @BoxTesterConnection, [OptionSetup] = @OptionSetup, [OptionConnection] = @"& _ 
                "OptionConnection, [OptionName1] = @OptionName1, [OptionName2] = @OptionName2, [O"& _ 
                "ptionName3] = @OptionName3, [OptionName4] = @OptionName4, [OptionName5] = @Optio"& _ 
                "nName5, [OptionName6] = @OptionName6, [OptionName7] = @OptionName7, [OptionType1"& _ 
                "] = @OptionType1, [OptionType2] = @OptionType2, [OptionType3] = @OptionType3, [O"& _ 
                "ptionType4] = @OptionType4, [OptionType5] = @OptionType5, [OptionType6] = @Optio"& _ 
                "nType6, [OptionType7] = @OptionType7, [OptionSetting1] = @OptionSetting1, [Optio"& _ 
                "nSetting2] = @OptionSetting2, [OptionSetting3] = @OptionSetting3, [OptionSetting"& _ 
                "4] = @OptionSetting4, [OptionSetting5] = @OptionSetting5, [OptionSetting6] = @Op"& _ 
                "tionSetting6, [OptionSetting7] = @OptionSetting7, [QfpVacuumPad] = @QfpVacuumPad"& _ 
                ", [QfpSocketSetup] = @QfpSocketSetup, [QfpSocketDecision] = @QfpSocketDecision, "& _ 
                "[QfpDecisionLeadPress] = @QfpDecisionLeadPress, [QfpTray] = @QfpTray, [SopStoppe"& _ 
                "r] = @SopStopper, [SopSocketDecision] = @SopSocketDecision, [SopDecisionLeadPres"& _ 
                "s] = @SopDecisionLeadPress, [ManualCheckTest] = @ManualCheckTest, [ManualCheckTE"& _ 
                "] = @ManualCheckTE, [ManualCheckRequestTE] = @ManualCheckRequestTE, [ManualCheck"& _ 
                "RequestTEConfirm] = @ManualCheckRequestTEConfirm, [PkgGood] = @PkgGood, [PkgNG] "& _ 
                "= @PkgNG, [PkgGoodJudgement] = @PkgGoodJudgement, [PkgNGJudgement] = @PkgNGJudge"& _ 
                "ment, [PkgNishikiCamara] = @PkgNishikiCamara, [PkgNishikiCamaraJudgement] = @Pkg"& _ 
                "NishikiCamaraJudgement, [PkqBantLead] = @PkqBantLead, [PkqKakeHige] = @PkqKakeHi"& _ 
                "ge, [BgaSmallBall] = @BgaSmallBall, [BgaBentTape] = @BgaBentTape, [Bge5S] = @Bge"& _ 
                "5S, [SetupStatus] = @SetupStatus, [SetupConfirmDate] = @SetupConfirmDate, [Confi"& _ 
                "rmedCheckSheetOp] = @ConfirmedCheckSheetOp, [ConfirmedCheckSheetSection] = @Conf"& _ 
                "irmedCheckSheetSection, [ConfirmedShonoSection] = @ConfirmedShonoSection, [Confi"& _ 
                "rmedCheckSheetGL] = @ConfirmedCheckSheetGL, [ConfirmedShonoGL] = @ConfirmedShono"& _ 
                "GL, [ConfirmedShonoOp] = @ConfirmedShonoOp, [StatusShonoOP] = @StatusShonoOP WHE"& _ 
                "RE (([MCNo] = @Original_MCNo))"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MCNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MCNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LotNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LotNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PackageName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PackageName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DeviceName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DeviceName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProgramName", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProgramName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TesterType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TesterType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TestFlow", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TestFlow", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QRCodesocket1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QRCodesocket1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QRCodesocket2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QRCodesocket2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QRCodesocket3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QRCodesocket3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QRCodesocket4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QRCodesocket4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QRCodesocketChannel1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QRCodesocketChannel1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QRCodesocketChannel2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QRCodesocketChannel2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QRCodesocketChannel3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QRCodesocketChannel3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QRCodesocketChannel4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QRCodesocketChannel4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TesterNoA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TesterNoA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TesterNoAQRcode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TesterNoAQRcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TesterNoB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TesterNoB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TesterNoBQRcode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TesterNoBQRcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ChannelAFTB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChannelAFTB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ChannelAFTBQRcode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChannelAFTBQRcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ChannelBFTB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChannelBFTB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ChannelBFTBQRcode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ChannelBFTBQRcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TestBoxA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TestBoxA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TestBoxAQRcode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TestBoxAQRcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TestBoxB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TestBoxB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TestBoxBQRcode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TestBoxBQRcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AdaptorA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AdaptorA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AdaptorAQRcode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AdaptorAQRcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AdaptorB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AdaptorB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AdaptorBQRcode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AdaptorBQRcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DutcardA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DutcardA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DutcardAQRcode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DutcardAQRcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DutcardB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DutcardB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DutcardBQRcode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DutcardBQRcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BridgecableA", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BridgecableA", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BridgecableAQRcode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BridgecableAQRcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BridgecableB", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BridgecableB", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BridgecableBQRcode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BridgecableBQRcode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TypeChangePackage", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TypeChangePackage", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SetupStartDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SetupStartDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SetupEndDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SetupEndDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BoxTesterConnection", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BoxTesterConnection", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionSetup", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionSetup", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionConnection", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionConnection", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionName1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionName1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionName2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionName2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionName3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionName3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionName4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionName4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionName5", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionName5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionName6", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionName6", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionName7", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionName7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionType1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionType1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionType2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionType2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionType3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionType3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionType4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionType4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionType5", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionType5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionType6", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionType6", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionType7", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionType7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionSetting1", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionSetting1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionSetting2", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionSetting2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionSetting3", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionSetting3", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionSetting4", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionSetting4", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionSetting5", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionSetting5", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionSetting6", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionSetting6", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionSetting7", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionSetting7", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QfpVacuumPad", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QfpVacuumPad", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QfpSocketSetup", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QfpSocketSetup", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QfpSocketDecision", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QfpSocketDecision", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QfpDecisionLeadPress", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QfpDecisionLeadPress", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QfpTray", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QfpTray", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SopStopper", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SopStopper", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SopSocketDecision", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SopSocketDecision", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SopDecisionLeadPress", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SopDecisionLeadPress", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ManualCheckTest", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ManualCheckTest", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ManualCheckTE", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ManualCheckTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ManualCheckRequestTE", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ManualCheckRequestTE", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ManualCheckRequestTEConfirm", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ManualCheckRequestTEConfirm", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PkgGood", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PkgGood", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PkgNG", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PkgNG", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PkgGoodJudgement", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PkgGoodJudgement", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PkgNGJudgement", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PkgNGJudgement", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PkgNishikiCamara", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PkgNishikiCamara", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PkgNishikiCamaraJudgement", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PkgNishikiCamaraJudgement", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PkqBantLead", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PkqBantLead", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PkqKakeHige", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PkqKakeHige", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BgaSmallBall", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BgaSmallBall", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BgaBentTape", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BgaBentTape", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Bge5S", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Bge5S", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SetupStatus", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SetupStatus", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SetupConfirmDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SetupConfirmDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConfirmedCheckSheetOp", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ConfirmedCheckSheetOp", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConfirmedCheckSheetSection", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ConfirmedCheckSheetSection", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConfirmedShonoSection", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ConfirmedShonoSection", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConfirmedCheckSheetGL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ConfirmedCheckSheetGL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConfirmedShonoGL", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ConfirmedShonoGL", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConfirmedShonoOp", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ConfirmedShonoOp", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StatusShonoOP", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StatusShonoOP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MCNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MCNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SelfCon.My.MySettings.Default.DBxConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     MCNo, LotNo, PackageName, DeviceName, ProgramName, TesterType, TestFlo"& _ 
                "w, QRCodesocket1, QRCodesocket2, QRCodesocket3, QRCodesocket4, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"               "& _ 
                "       QRCodesocketChannel1, QRCodesocketChannel2, QRCodesocketChannel3, QRCodes"& _ 
                "ocketChannel4, TesterNoA, TesterNoAQRcode, TesterNoB, TesterNoBQRcode, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"       "& _ 
                "               ChannelAFTB, ChannelAFTBQRcode, ChannelBFTB, ChannelBFTBQRcode, T"& _ 
                "estBoxA, TestBoxAQRcode, TestBoxB, TestBoxBQRcode, AdaptorA, AdaptorAQRcode, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&" "& _ 
                "                     AdaptorB, AdaptorBQRcode, DutcardA, DutcardAQRcode, Dutcard"& _ 
                "B, DutcardBQRcode, BridgecableA, BridgecableAQRcode, BridgecableB, BridgecableBQ"& _ 
                "Rcode, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      TypeChangePackage, SetupStartDate, SetupEndDate, "& _ 
                "BoxTesterConnection, OptionSetup, OptionConnection, OptionName1, OptionName2, Op"& _ 
                "tionName3, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      OptionName4, OptionName5, OptionName6, Option"& _ 
                "Name7, OptionType1, OptionType2, OptionType3, OptionType4, OptionType5, OptionTy"& _ 
                "pe6, OptionType7, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      OptionSetting1, OptionSetting2, Option"& _ 
                "Setting3, OptionSetting4, OptionSetting5, OptionSetting6, OptionSetting7, QfpVac"& _ 
                "uumPad, QfpSocketSetup, QfpSocketDecision, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      QfpDecisionLe"& _ 
                "adPress, QfpTray, SopStopper, SopSocketDecision, SopDecisionLeadPress, ManualChe"& _ 
                "ckTest, ManualCheckTE, ManualCheckRequestTE, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      ManualCheck"& _ 
                "RequestTEConfirm, PkgGood, PkgNG, PkgGoodJudgement, PkgNGJudgement, PkgNishikiCa"& _ 
                "mara, PkgNishikiCamaraJudgement, PkqBantLead, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      PkqKakeHig"& _ 
                "e, BgaSmallBall, BgaBentTape, Bge5S, SetupStatus, SetupConfirmDate, ConfirmedChe"& _ 
                "ckSheetOp, ConfirmedCheckSheetSection, ConfirmedShonoSection, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                "& _ 
                "      ConfirmedCheckSheetGL, ConfirmedShonoGL, ConfirmedShonoOp, StatusShonoOP"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "FROM         FTSetupReport"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     AdaptorA, AdaptorAQRcode, AdaptorB, AdaptorBQRcode, BgaBentTape, BgaSm"& _ 
                "allBall, Bge5S, BoxTesterConnection, BridgecableA, BridgecableAQRcode, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"       "& _ 
                "               BridgecableB, BridgecableBQRcode, ChannelAFTB, ChannelAFTBQRcode,"& _ 
                " ChannelBFTB, ChannelBFTBQRcode, ConfirmedCheckSheetGL, ConfirmedCheckSheetOp, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      ConfirmedCheckSheetSection, ConfirmedShonoGL, ConfirmedSh"& _ 
                "onoOp, ConfirmedShonoSection, DeviceName, DutcardA, DutcardAQRcode, DutcardB, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "                      DutcardBQRcode, LotNo, MCNo, ManualCheckRequestTE, ManualC"& _ 
                "heckRequestTEConfirm, ManualCheckTE, ManualCheckTest, OptionConnection, OptionNa"& _ 
                "me1, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      OptionName2, OptionName3, OptionName4, OptionName5,"& _ 
                " OptionName6, OptionName7, OptionSetting1, OptionSetting2, OptionSetting3, Optio"& _ 
                "nSetting4, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      OptionSetting5, OptionSetting6, OptionSetting"& _ 
                "7, OptionSetup, OptionType1, OptionType2, OptionType3, OptionType4, OptionType5,"& _ 
                " OptionType6, OptionType7, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      PackageName, PkgGood, PkgGood"& _ 
                "Judgement, PkgNG, PkgNGJudgement, PkgNishikiCamara, PkgNishikiCamaraJudgement, P"& _ 
                "kqBantLead, PkqKakeHige, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      ProgramName, QRCodesocket1, QRC"& _ 
                "odesocket2, QRCodesocket3, QRCodesocket4, QRCodesocketChannel1, QRCodesocketChan"& _ 
                "nel2, QRCodesocketChannel3, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      QRCodesocketChannel4, QfpDec"& _ 
                "isionLeadPress, QfpSocketDecision, QfpSocketSetup, QfpTray, QfpVacuumPad, SetupC"& _ 
                "onfirmDate, SetupEndDate, SetupStartDate, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      SetupStatus, S"& _ 
                "opDecisionLeadPress, SopSocketDecision, SopStopper, StatusShonoOP, TestBoxA, Tes"& _ 
                "tBoxAQRcode, TestBoxB, TestBoxBQRcode, TestFlow, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      TesterN"& _ 
                "oA, TesterNoAQRcode, TesterNoB, TesterNoBQRcode, TesterType, TypeChangePackage"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "FROM         FTSetupReport"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (MCNo = @MCNo)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MCNo", Global.System.Data.SqlDbType.VarChar, 15, Global.System.Data.ParameterDirection.Input, 0, 0, "MCNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DBxDataSet.FTSetupReportDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DBxDataSet.FTSetupReportDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DBxDataSet.FTSetupReportDataTable = New DBxDataSet.FTSetupReportDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByMCNo(ByVal dataTable As DBxDataSet.FTSetupReportDataTable, ByVal MCNo As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (MCNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MCNo")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(MCNo,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByMCNo(ByVal MCNo As String) As DBxDataSet.FTSetupReportDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (MCNo Is Nothing) Then
                Throw New Global.System.ArgumentNullException("MCNo")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(MCNo,String)
            End If
            Dim dataTable As DBxDataSet.FTSetupReportDataTable = New DBxDataSet.FTSetupReportDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DBxDataSet.FTSetupReportDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DBxDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "FTSetupReport")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FTBomTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FTBom"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("PackageID", "PackageID")
            tableMapping.ColumnMappings.Add("FTDeviceID", "FTDeviceID")
            tableMapping.ColumnMappings.Add("TesterTypeID", "TesterTypeID")
            tableMapping.ColumnMappings.Add("BomTesterTypeID", "BomTesterTypeID")
            tableMapping.ColumnMappings.Add("TestChannel", "TestChannel")
            tableMapping.ColumnMappings.Add("TestFlowID", "TestFlowID")
            tableMapping.ColumnMappings.Add("BomTestFlowID", "BomTestFlowID")
            tableMapping.ColumnMappings.Add("PCMachineTypeID", "PCMachineTypeID")
            tableMapping.ColumnMappings.Add("TempOfProduct", "TempOfProduct")
            tableMapping.ColumnMappings.Add("TempOfMachine", "TempOfMachine")
            tableMapping.ColumnMappings.Add("DSStartDate", "DSStartDate")
            tableMapping.ColumnMappings.Add("ESStartDate", "ESStartDate")
            tableMapping.ColumnMappings.Add("CSSTartDate", "CSSTartDate")
            tableMapping.ColumnMappings.Add("PLStartDate", "PLStartDate")
            tableMapping.ColumnMappings.Add("MPStartDate", "MPStartDate")
            tableMapping.ColumnMappings.Add("SocketTypeID", "SocketTypeID")
            tableMapping.ColumnMappings.Add("TestProgram", "TestProgram")
            tableMapping.ColumnMappings.Add("TestTime", "TestTime")
            tableMapping.ColumnMappings.Add("SpecialRank", "SpecialRank")
            tableMapping.ColumnMappings.Add("InspectionCondition", "InspectionCondition")
            tableMapping.ColumnMappings.Add("RPM", "RPM")
            tableMapping.ColumnMappings.Add("BoxCapa", "BoxCapa")
            tableMapping.ColumnMappings.Add("TotalBoxCapa", "TotalBoxCapa")
            tableMapping.ColumnMappings.Add("LeadTimeOfLot", "LeadTimeOfLot")
            tableMapping.ColumnMappings.Add("ProductionLine", "ProductionLine")
            tableMapping.ColumnMappings.Add("TubeTray", "TubeTray")
            tableMapping.ColumnMappings.Add("Emboss", "Emboss")
            tableMapping.ColumnMappings.Add("Reel", "Reel")
            tableMapping.ColumnMappings.Add("HandlerLeadTime", "HandlerLeadTime")
            tableMapping.ColumnMappings.Add("TesterLoadTime", "TesterLoadTime")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [BOM].[FTBom] WHERE (([ID] = @Original_ID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [BOM].[FTBom] ([ID], [PackageID], [FTDeviceID], [TesterTypeID], [BomT"& _ 
                "esterTypeID], [TestChannel], [TestFlowID], [BomTestFlowID], [PCMachineTypeID], ["& _ 
                "TempOfProduct], [TempOfMachine], [DSStartDate], [ESStartDate], [CSSTartDate], [P"& _ 
                "LStartDate], [MPStartDate], [SocketTypeID], [TestProgram], [TestTime], [SpecialR"& _ 
                "ank], [InspectionCondition], [RPM], [BoxCapa], [TotalBoxCapa], [LeadTimeOfLot], "& _ 
                "[ProductionLine], [TubeTray], [Emboss], [Reel], [HandlerLeadTime], [TesterLoadTi"& _ 
                "me]) VALUES (@ID, @PackageID, @FTDeviceID, @TesterTypeID, @BomTesterTypeID, @Tes"& _ 
                "tChannel, @TestFlowID, @BomTestFlowID, @PCMachineTypeID, @TempOfProduct, @TempOf"& _ 
                "Machine, @DSStartDate, @ESStartDate, @CSSTartDate, @PLStartDate, @MPStartDate, @"& _ 
                "SocketTypeID, @TestProgram, @TestTime, @SpecialRank, @InspectionCondition, @RPM,"& _ 
                " @BoxCapa, @TotalBoxCapa, @LeadTimeOfLot, @ProductionLine, @TubeTray, @Emboss, @"& _ 
                "Reel, @HandlerLeadTime, @TesterLoadTime);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID, PackageID, FTDeviceID, Tes"& _ 
                "terTypeID, BomTesterTypeID, TestChannel, TestFlowID, BomTestFlowID, PCMachineTyp"& _ 
                "eID, TempOfProduct, TempOfMachine, DSStartDate, ESStartDate, CSSTartDate, PLStar"& _ 
                "tDate, MPStartDate, SocketTypeID, TestProgram, TestTime, SpecialRank, Inspection"& _ 
                "Condition, RPM, BoxCapa, TotalBoxCapa, LeadTimeOfLot, ProductionLine, TubeTray, "& _ 
                "Emboss, Reel, HandlerLeadTime, TesterLoadTime FROM BOM.FTBom WHERE (ID = @ID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PackageID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PackageID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FTDeviceID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FTDeviceID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TesterTypeID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TesterTypeID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BomTesterTypeID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BomTesterTypeID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TestChannel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TestChannel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TestFlowID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TestFlowID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BomTestFlowID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BomTestFlowID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PCMachineTypeID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PCMachineTypeID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TempOfProduct", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TempOfProduct", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TempOfMachine", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TempOfMachine", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DSStartDate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DSStartDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESStartDate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESStartDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CSSTartDate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CSSTartDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLStartDate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLStartDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MPStartDate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MPStartDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SocketTypeID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocketTypeID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TestProgram", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TestProgram", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TestTime", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TestTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SpecialRank", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SpecialRank", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InspectionCondition", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InspectionCondition", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPM", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BoxCapa", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BoxCapa", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TotalBoxCapa", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalBoxCapa", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LeadTimeOfLot", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LeadTimeOfLot", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProductionLine", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProductionLine", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TubeTray", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TubeTray", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Emboss", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Emboss", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Reel", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Reel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HandlerLeadTime", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HandlerLeadTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TesterLoadTime", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TesterLoadTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [BOM].[FTBom] SET [ID] = @ID, [PackageID] = @PackageID, [FTDeviceID] = @FT"& _ 
                "DeviceID, [TesterTypeID] = @TesterTypeID, [BomTesterTypeID] = @BomTesterTypeID, "& _ 
                "[TestChannel] = @TestChannel, [TestFlowID] = @TestFlowID, [BomTestFlowID] = @Bom"& _ 
                "TestFlowID, [PCMachineTypeID] = @PCMachineTypeID, [TempOfProduct] = @TempOfProdu"& _ 
                "ct, [TempOfMachine] = @TempOfMachine, [DSStartDate] = @DSStartDate, [ESStartDate"& _ 
                "] = @ESStartDate, [CSSTartDate] = @CSSTartDate, [PLStartDate] = @PLStartDate, [M"& _ 
                "PStartDate] = @MPStartDate, [SocketTypeID] = @SocketTypeID, [TestProgram] = @Tes"& _ 
                "tProgram, [TestTime] = @TestTime, [SpecialRank] = @SpecialRank, [InspectionCondi"& _ 
                "tion] = @InspectionCondition, [RPM] = @RPM, [BoxCapa] = @BoxCapa, [TotalBoxCapa]"& _ 
                " = @TotalBoxCapa, [LeadTimeOfLot] = @LeadTimeOfLot, [ProductionLine] = @Producti"& _ 
                "onLine, [TubeTray] = @TubeTray, [Emboss] = @Emboss, [Reel] = @Reel, [HandlerLead"& _ 
                "Time] = @HandlerLeadTime, [TesterLoadTime] = @TesterLoadTime WHERE (([ID] = @Ori"& _ 
                "ginal_ID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID, PackageID, FTDeviceID, TesterTypeID, BomTesterTypeID, Te"& _ 
                "stChannel, TestFlowID, BomTestFlowID, PCMachineTypeID, TempOfProduct, TempOfMach"& _ 
                "ine, DSStartDate, ESStartDate, CSSTartDate, PLStartDate, MPStartDate, SocketType"& _ 
                "ID, TestProgram, TestTime, SpecialRank, InspectionCondition, RPM, BoxCapa, Total"& _ 
                "BoxCapa, LeadTimeOfLot, ProductionLine, TubeTray, Emboss, Reel, HandlerLeadTime,"& _ 
                " TesterLoadTime FROM BOM.FTBom WHERE (ID = @ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PackageID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PackageID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FTDeviceID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FTDeviceID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TesterTypeID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TesterTypeID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BomTesterTypeID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BomTesterTypeID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TestChannel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TestChannel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TestFlowID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TestFlowID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BomTestFlowID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BomTestFlowID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PCMachineTypeID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PCMachineTypeID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TempOfProduct", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TempOfProduct", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TempOfMachine", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TempOfMachine", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DSStartDate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DSStartDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ESStartDate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ESStartDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CSSTartDate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CSSTartDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PLStartDate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PLStartDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MPStartDate", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MPStartDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SocketTypeID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SocketTypeID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TestProgram", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TestProgram", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TestTime", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TestTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SpecialRank", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SpecialRank", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@InspectionCondition", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "InspectionCondition", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RPM", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RPM", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BoxCapa", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "BoxCapa", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TotalBoxCapa", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TotalBoxCapa", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LeadTimeOfLot", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LeadTimeOfLot", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ProductionLine", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ProductionLine", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TubeTray", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TubeTray", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Emboss", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Emboss", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Reel", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Reel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HandlerLeadTime", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "HandlerLeadTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TesterLoadTime", Global.System.Data.SqlDbType.Real, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TesterLoadTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SelfCon.My.MySettings.Default.DBxConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(2) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     ID, PackageID, FTDeviceID, TesterTypeID, BomTesterTypeID, TestChannel,"& _ 
                " TestFlowID, BomTestFlowID, PCMachineTypeID, TempOfProduct, TempOfMachine, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"   "& _ 
                "                   DSStartDate, ESStartDate, CSSTartDate, PLStartDate, MPStartDa"& _ 
                "te, SocketTypeID, TestProgram, TestTime, SpecialRank, InspectionCondition, RPM, "& _ 
                "BoxCapa, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      TotalBoxCapa, LeadTimeOfLot, ProductionLine, Tu"& _ 
                "beTray, Emboss, Reel, HandlerLeadTime, TesterLoadTime"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         BOM.FTBom"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     BOM.FTBom.ID, BOM.FTBom.PackageID, BOM.FTBom.FTDeviceID, BOM.BomTester"& _ 
                "Type.TesterTypeID, BOM.FTBom.BomTesterTypeID, BOM.FTBom.TestChannel, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"         "& _ 
                "             BOM.FTBom.TestFlowID, BOM.FTBom.BomTestFlowID, BOM.FTBom.PCMachineT"& _ 
                "ypeID, BOM.FTBom.TempOfProduct, BOM.FTBom.TempOfMachine, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     "& _ 
                " BOM.FTBom.DSStartDate, BOM.FTBom.ESStartDate, BOM.FTBom.CSSTartDate, BOM.FTBom."& _ 
                "PLStartDate, BOM.FTBom.MPStartDate, BOM.FTBom.SocketTypeID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  "& _ 
                "    BOM.FTBom.TestProgram, BOM.FTBom.TestTime, BOM.FTBom.SpecialRank, BOM.FTBom."& _ 
                "InspectionCondition, BOM.FTBom.RPM, BOM.FTBom.BoxCapa, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      B"& _ 
                "OM.FTBom.TotalBoxCapa, BOM.FTBom.LeadTimeOfLot, BOM.FTBom.ProductionLine, BOM.FT"& _ 
                "Bom.TubeTray, BOM.FTBom.Emboss, BOM.FTBom.Reel, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      BOM.FTBo"& _ 
                "m.HandlerLeadTime, BOM.FTBom.TesterLoadTime"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         BOM.FTBom INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)& _ 
                "                      BOM.FTDevice ON BOM.FTBom.FTDeviceID = BOM.FTDevice.ID INN"& _ 
                "ER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      TestFlow ON BOM.FTBom.TestFlowID = TestFlow.ID IN"& _ 
                "NER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      BOM.Package ON BOM.FTBom.PackageID = BOM.Package"& _ 
                ".ID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      EQP.FTPCType ON BOM.FTBom.PCMachineTypeID "& _ 
                "= EQP.FTPCType.ID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      BOM.BomTesterType ON BOM.FTB"& _ 
                "om.BomTesterTypeID = BOM.BomTesterType.ID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Test"& _ 
                "erType ON BOM.BomTesterType.TesterTypeID = TesterType.ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (BOM.FTDevic"& _ 
                "e.Name = @CustomerDeviceName) AND (EQP.FTPCType.PCMain = @PCMain) AND (TestFlow."& _ 
                "Name = @TestFlowName) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (TesterType.Name = @TesterType"& _ 
                "Name) AND (BOM.Package.AssyName = @PackageName)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomerDeviceName", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PCMain", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "PCMain", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TestFlowName", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TesterTypeName", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PackageName", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "AssyName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT     BOM.FTBom.ID, BOM.FTBom.PackageID, BOM.FTBom.FTDeviceID, BOM.FTBom.Tes"& _ 
                "terTypeID, BOM.FTBom.BomTesterTypeID, BOM.FTBom.TestChannel, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                 "& _ 
                "     BOM.FTBom.TestFlowID, BOM.FTBom.BomTestFlowID, BOM.FTBom.PCMachineTypeID, B"& _ 
                "OM.FTBom.TempOfProduct, BOM.FTBom.TempOfMachine, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      BOM.FTB"& _ 
                "om.DSStartDate, BOM.FTBom.ESStartDate, BOM.FTBom.CSSTartDate, BOM.FTBom.PLStartD"& _ 
                "ate, BOM.FTBom.MPStartDate, BOM.FTBom.SocketTypeID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      BOM."& _ 
                "FTBom.TestProgram, BOM.FTBom.TestTime, BOM.FTBom.SpecialRank, BOM.FTBom.Inspecti"& _ 
                "onCondition, BOM.FTBom.RPM, BOM.FTBom.BoxCapa, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      BOM.FTBom"& _ 
                ".TotalBoxCapa, BOM.FTBom.LeadTimeOfLot, BOM.FTBom.ProductionLine, BOM.FTBom.Tube"& _ 
                "Tray, BOM.FTBom.Emboss, BOM.FTBom.Reel, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      BOM.FTBom.Handle"& _ 
                "rLeadTime, BOM.FTBom.TesterLoadTime"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         BOM.FTBom INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        "& _ 
                "              BOM.FTDevice ON BOM.FTBom.FTDeviceID = BOM.FTDevice.ID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      TesterType ON BOM.FTBom.TesterTypeID = TesterType.ID INNE"& _ 
                "R JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      TestFlow ON BOM.FTBom.TestFlowID = TestFlow.ID INN"& _ 
                "ER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      BOM.Package ON BOM.FTBom.PackageID = BOM.Package."& _ 
                "ID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      EQP.FTPCType ON BOM.FTBom.PCMachineTypeID ="& _ 
                " EQP.FTPCType.ID "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (BOM.FTDevice.Name = @CustomerDeviceName) AND (EQP."& _ 
                "FTPCType.PCMain = @PCMain) "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&Global.Microsoft.VisualBasic.ChrW(9)&"AND (TestFlow.Name = @TestFlowName) AND (TesterTyp"& _ 
                "e.Name = @TesterTypeName) AND (BOM.Package.AssyName = @PackageName)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomerDeviceName", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PCMain", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "PCMain", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TestFlowName", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TesterTypeName", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PackageName", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "AssyName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DBxDataSet.FTBomDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DBxDataSet.FTBomDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DBxDataSet.FTBomDataTable = New DBxDataSet.FTBomDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBy20170616(ByVal CustomerDeviceName As String, ByVal PCMain As String, ByVal TestFlowName As String, ByVal TesterTypeName As String, ByVal PackageName As String) As DBxDataSet.FTBomDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (CustomerDeviceName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CustomerDeviceName")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CustomerDeviceName,String)
            End If
            If (PCMain Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PCMain")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(PCMain,String)
            End If
            If (TestFlowName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TestFlowName")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(TestFlowName,String)
            End If
            If (TesterTypeName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TesterTypeName")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(TesterTypeName,String)
            End If
            If (PackageName Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(PackageName,String)
            End If
            Dim dataTable As DBxDataSet.FTBomDataTable = New DBxDataSet.FTBomDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataBySpecial20170522(ByVal CustomerDeviceName As String, ByVal PCMain As String, ByVal TestFlowName As String, ByVal TesterTypeName As String, ByVal PackageName As String) As DBxDataSet.FTBomDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (CustomerDeviceName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CustomerDeviceName")
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(CustomerDeviceName,String)
            End If
            If (PCMain Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PCMain")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(PCMain,String)
            End If
            If (TestFlowName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TestFlowName")
            Else
                Me.Adapter.SelectCommand.Parameters(2).Value = CType(TestFlowName,String)
            End If
            If (TesterTypeName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TesterTypeName")
            Else
                Me.Adapter.SelectCommand.Parameters(3).Value = CType(TesterTypeName,String)
            End If
            If (PackageName Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(4).Value = CType(PackageName,String)
            End If
            Dim dataTable As DBxDataSet.FTBomDataTable = New DBxDataSet.FTBomDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DBxDataSet.FTBomDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DBxDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "FTBom")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FTBomOptionTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FTBomOption"
            tableMapping.ColumnMappings.Add("FTBomID", "FTBomID")
            tableMapping.ColumnMappings.Add("OptionTypeID", "OptionTypeID")
            tableMapping.ColumnMappings.Add("Quantity", "Quantity")
            tableMapping.ColumnMappings.Add("Setting", "Setting")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [BOM].[FTBomOption] WHERE (([FTBomID] = @Original_FTBomID) AND ([Opti"& _ 
                "onTypeID] = @Original_OptionTypeID) AND ([Quantity] = @Original_Quantity) AND (("& _ 
                "@IsNull_Setting = 1 AND [Setting] IS NULL) OR ([Setting] = @Original_Setting)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FTBomID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FTBomID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OptionTypeID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionTypeID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Quantity", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Quantity", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Setting", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Setting", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Setting", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Setting", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [BOM].[FTBomOption] ([FTBomID], [OptionTypeID], [Quantity], [Setting]"& _ 
                ") VALUES (@FTBomID, @OptionTypeID, @Quantity, @Setting);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FTBomID, Option"& _ 
                "TypeID, Quantity, Setting FROM BOM.FTBomOption WHERE (FTBomID = @FTBomID) AND (O"& _ 
                "ptionTypeID = @OptionTypeID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FTBomID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FTBomID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionTypeID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionTypeID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Quantity", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Quantity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Setting", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Setting", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [BOM].[FTBomOption] SET [FTBomID] = @FTBomID, [OptionTypeID] = @OptionType"& _ 
                "ID, [Quantity] = @Quantity, [Setting] = @Setting WHERE (([FTBomID] = @Original_F"& _ 
                "TBomID) AND ([OptionTypeID] = @Original_OptionTypeID) AND ([Quantity] = @Origina"& _ 
                "l_Quantity) AND ((@IsNull_Setting = 1 AND [Setting] IS NULL) OR ([Setting] = @Or"& _ 
                "iginal_Setting)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FTBomID, OptionTypeID, Quantity, Setting FROM BOM.FTB"& _ 
                "omOption WHERE (FTBomID = @FTBomID) AND (OptionTypeID = @OptionTypeID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FTBomID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FTBomID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OptionTypeID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionTypeID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Quantity", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Quantity", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Setting", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Setting", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FTBomID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FTBomID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_OptionTypeID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OptionTypeID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Quantity", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Quantity", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Setting", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Setting", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Setting", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Setting", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SelfCon.My.MySettings.Default.DBxConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     FTBomID, OptionTypeID, Quantity, Setting"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         BOM.FTBomOption"& _ 
                ""
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     FTBomID, OptionTypeID, Quantity, Setting"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         BOM.FTBomOption"& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (FTBomID = @FTBomID)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FTBomID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FTBomID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DBxDataSet.FTBomOptionDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DBxDataSet.FTBomOptionDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DBxDataSet.FTBomOptionDataTable = New DBxDataSet.FTBomOptionDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByFTBomID(ByVal FTBomID As Integer) As DBxDataSet.FTBomOptionDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FTBomID,Integer)
            Dim dataTable As DBxDataSet.FTBomOptionDataTable = New DBxDataSet.FTBomOptionDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DBxDataSet.FTBomOptionDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DBxDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "FTBomOption")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FTBomID As Integer, ByVal Original_OptionTypeID As Integer, ByVal Original_Quantity As Integer, ByVal Original_Setting As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FTBomID,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_OptionTypeID,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Quantity,Integer)
            If (Original_Setting Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_Setting,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FTBomID As Integer, ByVal OptionTypeID As Integer, ByVal Quantity As Integer, ByVal Setting As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FTBomID,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(OptionTypeID,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(Quantity,Integer)
            If (Setting Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Setting,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FTBomID As Integer, ByVal OptionTypeID As Integer, ByVal Quantity As Integer, ByVal Setting As String, ByVal Original_FTBomID As Integer, ByVal Original_OptionTypeID As Integer, ByVal Original_Quantity As Integer, ByVal Original_Setting As String) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FTBomID,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(OptionTypeID,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Quantity,Integer)
            If (Setting Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Setting,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_FTBomID,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_OptionTypeID,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_Quantity,Integer)
            If (Original_Setting Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_Setting,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Quantity As Integer, ByVal Setting As String, ByVal Original_FTBomID As Integer, ByVal Original_OptionTypeID As Integer, ByVal Original_Quantity As Integer, ByVal Original_Setting As String) As Integer
            Return Me.Update(Original_FTBomID, Original_OptionTypeID, Quantity, Setting, Original_FTBomID, Original_OptionTypeID, Original_Quantity, Original_Setting)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FTBomTestEquipmentTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FTBomTestEquipment"
            tableMapping.ColumnMappings.Add("FTBomID", "FTBomID")
            tableMapping.ColumnMappings.Add("TestEquipmentID", "TestEquipmentID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [BOM].[FTBomTestEquipment] WHERE (([FTBomID] = @Original_FTBomID) AND"& _ 
                " ([TestEquipmentID] = @Original_TestEquipmentID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FTBomID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FTBomID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TestEquipmentID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TestEquipmentID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [BOM].[FTBomTestEquipment] ([FTBomID], [TestEquipmentID]) VALUES (@FT"& _ 
                "BomID, @TestEquipmentID);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FTBomID, TestEquipmentID FROM BOM.FTBomTestEqu"& _ 
                "ipment WHERE (FTBomID = @FTBomID) AND (TestEquipmentID = @TestEquipmentID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FTBomID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FTBomID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TestEquipmentID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TestEquipmentID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [BOM].[FTBomTestEquipment] SET [FTBomID] = @FTBomID, [TestEquipmentID] = @"& _ 
                "TestEquipmentID WHERE (([FTBomID] = @Original_FTBomID) AND ([TestEquipmentID] = "& _ 
                "@Original_TestEquipmentID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT FTBomID, TestEquipmentID FROM BOM.FTBomTest"& _ 
                "Equipment WHERE (FTBomID = @FTBomID) AND (TestEquipmentID = @TestEquipmentID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FTBomID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FTBomID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TestEquipmentID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TestEquipmentID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_FTBomID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FTBomID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_TestEquipmentID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TestEquipmentID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SelfCon.My.MySettings.Default.DBxConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     FTBomID, TestEquipmentID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         BOM.FTBomTestEquipment"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     FTBomID, TestEquipmentID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         BOM.FTBomTestEquipment"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE  "& _ 
                "   (FTBomID = @FTBomID)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FTBomID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "FTBomID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DBxDataSet.FTBomTestEquipmentDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DBxDataSet.FTBomTestEquipmentDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DBxDataSet.FTBomTestEquipmentDataTable = New DBxDataSet.FTBomTestEquipmentDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByFTBomID(ByVal FTBomID As Integer) As DBxDataSet.FTBomTestEquipmentDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(FTBomID,Integer)
            Dim dataTable As DBxDataSet.FTBomTestEquipmentDataTable = New DBxDataSet.FTBomTestEquipmentDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DBxDataSet.FTBomTestEquipmentDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DBxDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "FTBomTestEquipment")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_FTBomID As Integer, ByVal Original_TestEquipmentID As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_FTBomID,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_TestEquipmentID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal FTBomID As Integer, ByVal TestEquipmentID As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(FTBomID,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(TestEquipmentID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FTBomID As Integer, ByVal TestEquipmentID As Integer, ByVal Original_FTBomID As Integer, ByVal Original_TestEquipmentID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(FTBomID,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(TestEquipmentID,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_FTBomID,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_TestEquipmentID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Original_FTBomID As Integer, ByVal Original_TestEquipmentID As Integer) As Integer
            Return Me.Update(Original_FTBomID, Original_TestEquipmentID, Original_FTBomID, Original_TestEquipmentID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class TempDataTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "TempData"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("QRCode", "QRCode")
            tableMapping.ColumnMappings.Add("QRCodeByUser", "QRCodeByUser")
            tableMapping.ColumnMappings.Add("SubTypeID", "SubTypeID")
            tableMapping.ColumnMappings.Add("RegistrationDate", "RegistrationDate")
            tableMapping.ColumnMappings.Add("Status", "Status")
            tableMapping.ColumnMappings.Add("StorageID", "StorageID")
            tableMapping.ColumnMappings.Add("PeriodCheckTime", "PeriodCheckTime")
            tableMapping.ColumnMappings.Add("LifeTime", "LifeTime")
            tableMapping.ColumnMappings.Add("SmallCode", "SmallCode")
            tableMapping.ColumnMappings.Add("MCNo", "MCNo")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [JIG].[TempData] WHERE (([ID] = @Original_ID) AND ((@IsNull_QRCode = "& _ 
                "1 AND [QRCode] IS NULL) OR ([QRCode] = @Original_QRCode)) AND ((@IsNull_QRCodeBy"& _ 
                "User = 1 AND [QRCodeByUser] IS NULL) OR ([QRCodeByUser] = @Original_QRCodeByUser"& _ 
                ")) AND ((@IsNull_SubTypeID = 1 AND [SubTypeID] IS NULL) OR ([SubTypeID] = @Origi"& _ 
                "nal_SubTypeID)) AND ((@IsNull_RegistrationDate = 1 AND [RegistrationDate] IS NUL"& _ 
                "L) OR ([RegistrationDate] = @Original_RegistrationDate)) AND ((@IsNull_Status = "& _ 
                "1 AND [Status] IS NULL) OR ([Status] = @Original_Status)) AND ((@IsNull_StorageI"& _ 
                "D = 1 AND [StorageID] IS NULL) OR ([StorageID] = @Original_StorageID)) AND ((@Is"& _ 
                "Null_PeriodCheckTime = 1 AND [PeriodCheckTime] IS NULL) OR ([PeriodCheckTime] = "& _ 
                "@Original_PeriodCheckTime)) AND ((@IsNull_LifeTime = 1 AND [LifeTime] IS NULL) O"& _ 
                "R ([LifeTime] = @Original_LifeTime)) AND ((@IsNull_SmallCode = 1 AND [SmallCode]"& _ 
                " IS NULL) OR ([SmallCode] = @Original_SmallCode)) AND ((@IsNull_MCNo = 1 AND [MC"& _ 
                "No] IS NULL) OR ([MCNo] = @Original_MCNo)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QRCode", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QRCode", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QRCode", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QRCode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_QRCodeByUser", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QRCodeByUser", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_QRCodeByUser", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QRCodeByUser", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SubTypeID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubTypeID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SubTypeID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubTypeID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_RegistrationDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RegistrationDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RegistrationDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RegistrationDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_Status", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Status", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_StorageID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StorageID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_StorageID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StorageID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_PeriodCheckTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PeriodCheckTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_PeriodCheckTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PeriodCheckTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_LifeTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LifeTime", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_LifeTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LifeTime", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_SmallCode", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SmallCode", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_SmallCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SmallCode", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_MCNo", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MCNo", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_MCNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MCNo", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [JIG].[TempData] ([QRCode], [QRCodeByUser], [SubTypeID], [Registratio"& _ 
                "nDate], [Status], [StorageID], [PeriodCheckTime], [LifeTime], [SmallCode], [MCNo"& _ 
                "]) VALUES (@QRCode, @QRCodeByUser, @SubTypeID, @RegistrationDate, @Status, @Stor"& _ 
                "ageID, @PeriodCheckTime, @LifeTime, @SmallCode, @MCNo);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID, QRCode, QRCo"& _ 
                "deByUser, SubTypeID, RegistrationDate, Status, StorageID, PeriodCheckTime, LifeT"& _ 
                "ime, SmallCode, MCNo FROM JIG.TempData WHERE (ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QRCode", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QRCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QRCodeByUser", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "QRCodeByUser", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SubTypeID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SubTypeID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RegistrationDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RegistrationDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Status", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Status", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StorageID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StorageID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PeriodCheckTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PeriodCheckTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LifeTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LifeTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SmallCode", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SmallCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MCNo", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MCNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE    JIG.TempData"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET              LifeTime = @LifeTime, MCNo = @MCNo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHER"& _ 
                "E     (ID = @Original_ID); "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ID, QRCode, QRCodeByUser, SubTypeID, Registr"& _ 
                "ationDate, Status, StorageID, PeriodCheckTime, LifeTime, SmallCode, MCNo FROM JI"& _ 
                "G.TempData WHERE (ID = @ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LifeTime", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "LifeTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MCNo", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "MCNo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SelfCon.My.MySettings.Default.DBxConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     ID, QRCode, QRCodeByUser, SubTypeID, RegistrationDate, Status, Storage"& _ 
                "ID, PeriodCheckTime, LifeTime, SmallCode, MCNo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         JIG.TempData"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     ID, QRCode, QRCodeByUser, SubTypeID, RegistrationDate, Status, Storage"& _ 
                "ID, PeriodCheckTime, LifeTime, SmallCode, MCNo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         JIG.TempData"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE"& _ 
                " QRCode = @QRCode"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@QRCode", Global.System.Data.SqlDbType.NVarChar, 9, Global.System.Data.ParameterDirection.Input, 0, 0, "QRCode", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As DBxDataSet.TempDataDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As DBxDataSet.TempDataDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As DBxDataSet.TempDataDataTable = New DBxDataSet.TempDataDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByQRCode(ByVal dataTable As DBxDataSet.TempDataDataTable, ByVal QRCode As String) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (QRCode Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(QRCode,String)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByQRCode(ByVal QRCode As String) As DBxDataSet.TempDataDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (QRCode Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(QRCode,String)
            End If
            Dim dataTable As DBxDataSet.TempDataDataTable = New DBxDataSet.TempDataDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As DBxDataSet.TempDataDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As DBxDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "TempData")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ID As Integer, ByVal Original_QRCode As String, ByVal Original_QRCodeByUser As String, ByVal Original_SubTypeID As Global.System.Nullable(Of Integer), ByVal Original_RegistrationDate As Global.System.Nullable(Of Date), ByVal Original_Status As String, ByVal Original_StorageID As Global.System.Nullable(Of Integer), ByVal Original_PeriodCheckTime As Global.System.Nullable(Of Integer), ByVal Original_LifeTime As Global.System.Nullable(Of Integer), ByVal Original_SmallCode As String, ByVal Original_MCNo As String) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ID,Integer)
            If (Original_QRCode Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_QRCode,String)
            End If
            If (Original_QRCodeByUser Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_QRCodeByUser,String)
            End If
            If (Original_SubTypeID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_SubTypeID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Original_RegistrationDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_RegistrationDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (Original_Status Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_Status,String)
            End If
            If (Original_StorageID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_StorageID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_PeriodCheckTime.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_PeriodCheckTime.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_LifeTime.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_LifeTime.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_SmallCode Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_SmallCode,String)
            End If
            If (Original_MCNo Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_MCNo,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal QRCode As String, ByVal QRCodeByUser As String, ByVal SubTypeID As Global.System.Nullable(Of Integer), ByVal RegistrationDate As Global.System.Nullable(Of Date), ByVal Status As String, ByVal StorageID As Global.System.Nullable(Of Integer), ByVal PeriodCheckTime As Global.System.Nullable(Of Integer), ByVal LifeTime As Global.System.Nullable(Of Integer), ByVal SmallCode As String, ByVal MCNo As String) As Integer
            If (QRCode Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(QRCode,String)
            End If
            If (QRCodeByUser Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(QRCodeByUser,String)
            End If
            If (SubTypeID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(SubTypeID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (RegistrationDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(RegistrationDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Status Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Status,String)
            End If
            If (StorageID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(StorageID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (PeriodCheckTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(PeriodCheckTime.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (LifeTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(LifeTime.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (SmallCode Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(SmallCode,String)
            End If
            If (MCNo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(MCNo,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal LifeTime As Global.System.Nullable(Of Integer), ByVal MCNo As String, ByVal Original_ID As Integer, ByVal ID As Integer) As Integer
            If (LifeTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(LifeTime.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (MCNo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(MCNo,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class FTPCTypeTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "FTPCType"
            tableMapping.ColumnMappings.Add("ID", "ID")
            tableMapping.ColumnMappings.Add("PCType", "PCType")
            tableMapping.ColumnMappings.Add("PCMain", "PCMain")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.SelfCon.My.MySettings.Default.DBxConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     EQP.FTPCType.ID, EQP.FTPCType.PCType, EQP.FTPCType.PCMain"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM       "& _ 
                "  EQP.FTMachine INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      EQP.Equipment ON EQP.FTMachine"& _ 
                ".MachineID = EQP.Equipment.ID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      EQP.FTPCType ON "& _ 
                "EQP.FTMachine.PCType = EQP.FTPCType.PCType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (EQP.Equipment.Name = @Ful"& _ 
                "lMCNo)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FullMCNo", Global.System.Data.SqlDbType.VarChar, 15, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetPCType(ByVal FullMCNo As String) As DBxDataSet.FTPCTypeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (FullMCNo Is Nothing) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(FullMCNo,String)
            End If
            Dim dataTable As DBxDataSet.FTPCTypeDataTable = New DBxDataSet.FTPCTypeDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class QueriesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private _commandCollection() As Global.System.Data.IDbCommand
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.IDbCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.IDbCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(0),Global.System.Data.SqlClient.SqlCommand).Connection = New Global.System.Data.SqlClient.SqlConnection(Global.SelfCon.My.MySettings.Default.DBxConnectionString)
            CType(Me._commandCollection(0),Global.System.Data.SqlClient.SqlCommand).CommandText = "SELECT        A.RPM"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM            BOM.FTBom AS A INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                 "& _ 
                "        BOM.FTDevice AS B ON A.FTDeviceID = B.ID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                   "& _ 
                "      TesterType AS C ON A.TesterTypeID = C.ID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     "& _ 
                "    TestFlow AS D ON A.TestFlowID = D.ID INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         BO"& _ 
                "M.Package AS E ON A.PackageID = E.ID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE        (B.Name = @FTDeviceName) AND "& _ 
                "(C.Name = @TesterTypeName) AND (D.Name = @TestFlowName) AND (E.AssyName = @Packa"& _ 
                "geName)"
            CType(Me._commandCollection(0),Global.System.Data.SqlClient.SqlCommand).CommandType = Global.System.Data.CommandType.Text
            CType(Me._commandCollection(0),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FTDeviceName", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(0),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TesterTypeName", Global.System.Data.SqlDbType.VarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(0),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TestFlowName", Global.System.Data.SqlDbType.VarChar, 20, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            CType(Me._commandCollection(0),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PackageName", Global.System.Data.SqlDbType.VarChar, 10, Global.System.Data.ParameterDirection.Input, 0, 0, "AssyName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            CType(Me._commandCollection(1),Global.System.Data.SqlClient.SqlCommand).Connection = New Global.System.Data.SqlClient.SqlConnection(Global.SelfCon.My.MySettings.Default.DBxConnectionString)
            CType(Me._commandCollection(1),Global.System.Data.SqlClient.SqlCommand).CommandText = "SELECT     EQP.FTMachine.PCType"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         EQP.Equipment INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"         "& _ 
                "             EQP.FTMachine ON EQP.Equipment.ID = EQP.FTMachine.MachineID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE "& _ 
                "    (EQP.Equipment.Name = 'FT-' + @MCNo)"
            CType(Me._commandCollection(1),Global.System.Data.SqlClient.SqlCommand).CommandType = Global.System.Data.CommandType.Text
            CType(Me._commandCollection(1),Global.System.Data.SqlClient.SqlCommand).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MCNo", Global.System.Data.SqlDbType.VarChar, 15, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetStandardRPM(ByVal FTDeviceName As String, ByVal TesterTypeName As String, ByVal TestFlowName As String, ByVal PackageName As String) As Global.System.Nullable(Of Single)
            Dim command As Global.System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(0),Global.System.Data.SqlClient.SqlCommand)
            If (FTDeviceName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FTDeviceName")
            Else
                command.Parameters(0).Value = CType(FTDeviceName,String)
            End If
            If (TesterTypeName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TesterTypeName")
            Else
                command.Parameters(1).Value = CType(TesterTypeName,String)
            End If
            If (TestFlowName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TestFlowName")
            Else
                command.Parameters(2).Value = CType(TestFlowName,String)
            End If
            If (PackageName Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(PackageName,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return New Global.System.Nullable(Of Single)
            Else
                Return New Global.System.Nullable(Of Single)(CType(returnValue,Single))
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function GetPCTypeByMCNo(ByVal MCNo As String) As Object
            Dim command As Global.System.Data.SqlClient.SqlCommand = CType(Me.CommandCollection(1),Global.System.Data.SqlClient.SqlCommand)
            If (MCNo Is Nothing) Then
                command.Parameters(0).Value = Global.System.DBNull.Value
            Else
                command.Parameters(0).Value = CType(MCNo,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Object
            Try 
                returnValue = command.ExecuteScalar
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            If ((returnValue Is Nothing)  _
                        OrElse (returnValue.GetType Is GetType(Global.System.DBNull))) Then
                Return Nothing
            Else
                Return CType(returnValue,Object)
            End If
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _ukebaraiDataTableAdapter As UkebaraiDataTableAdapter
        
        Private _fTAlarmInfoTableAdapter As FTAlarmInfoTableAdapter
        
        Private _fTAlarmTableTableAdapter As FTAlarmTableTableAdapter
        
        Private _fTDataTableAdapter As FTDataTableAdapter
        
        Private _fTMachineSettingTableAdapter As FTMachineSettingTableAdapter
        
        Private _myUserTableAdapter As MyUserTableAdapter
        
        Private _transactionDataTableAdapter As TransactionDataTableAdapter
        
        Private _fixedLCLTableAdapter As FixedLCLTableAdapter
        
        Private _testerTypeTableAdapter As TesterTypeTableAdapter
        
        Private _equipmentLocationTableAdapter As EquipmentLocationTableAdapter
        
        Private _dataTableAdapter As DataTableAdapter
        
        Private _fTSetupReportTableAdapter As FTSetupReportTableAdapter
        
        Private _fTBomTableAdapter As FTBomTableAdapter
        
        Private _fTBomOptionTableAdapter As FTBomOptionTableAdapter
        
        Private _fTBomTestEquipmentTableAdapter As FTBomTestEquipmentTableAdapter
        
        Private _tempDataTableAdapter As TempDataTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property UkebaraiDataTableAdapter() As UkebaraiDataTableAdapter
            Get
                Return Me._ukebaraiDataTableAdapter
            End Get
            Set
                Me._ukebaraiDataTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property FTAlarmInfoTableAdapter() As FTAlarmInfoTableAdapter
            Get
                Return Me._fTAlarmInfoTableAdapter
            End Get
            Set
                Me._fTAlarmInfoTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property FTAlarmTableTableAdapter() As FTAlarmTableTableAdapter
            Get
                Return Me._fTAlarmTableTableAdapter
            End Get
            Set
                Me._fTAlarmTableTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property FTDataTableAdapter() As FTDataTableAdapter
            Get
                Return Me._fTDataTableAdapter
            End Get
            Set
                Me._fTDataTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property FTMachineSettingTableAdapter() As FTMachineSettingTableAdapter
            Get
                Return Me._fTMachineSettingTableAdapter
            End Get
            Set
                Me._fTMachineSettingTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property MyUserTableAdapter() As MyUserTableAdapter
            Get
                Return Me._myUserTableAdapter
            End Get
            Set
                Me._myUserTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property TransactionDataTableAdapter() As TransactionDataTableAdapter
            Get
                Return Me._transactionDataTableAdapter
            End Get
            Set
                Me._transactionDataTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property FixedLCLTableAdapter() As FixedLCLTableAdapter
            Get
                Return Me._fixedLCLTableAdapter
            End Get
            Set
                Me._fixedLCLTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property TesterTypeTableAdapter() As TesterTypeTableAdapter
            Get
                Return Me._testerTypeTableAdapter
            End Get
            Set
                Me._testerTypeTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property EquipmentLocationTableAdapter() As EquipmentLocationTableAdapter
            Get
                Return Me._equipmentLocationTableAdapter
            End Get
            Set
                Me._equipmentLocationTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property DataTableAdapter() As DataTableAdapter
            Get
                Return Me._dataTableAdapter
            End Get
            Set
                Me._dataTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property FTSetupReportTableAdapter() As FTSetupReportTableAdapter
            Get
                Return Me._fTSetupReportTableAdapter
            End Get
            Set
                Me._fTSetupReportTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property FTBomTableAdapter() As FTBomTableAdapter
            Get
                Return Me._fTBomTableAdapter
            End Get
            Set
                Me._fTBomTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property FTBomOptionTableAdapter() As FTBomOptionTableAdapter
            Get
                Return Me._fTBomOptionTableAdapter
            End Get
            Set
                Me._fTBomOptionTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property FTBomTestEquipmentTableAdapter() As FTBomTestEquipmentTableAdapter
            Get
                Return Me._fTBomTestEquipmentTableAdapter
            End Get
            Set
                Me._fTBomTestEquipmentTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property TempDataTableAdapter() As TempDataTableAdapter
            Get
                Return Me._tempDataTableAdapter
            End Get
            Set
                Me._tempDataTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._ukebaraiDataTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._ukebaraiDataTableAdapter.Connection) Is Nothing)) Then
                    Return Me._ukebaraiDataTableAdapter.Connection
                End If
                If ((Not (Me._fTAlarmInfoTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._fTAlarmInfoTableAdapter.Connection) Is Nothing)) Then
                    Return Me._fTAlarmInfoTableAdapter.Connection
                End If
                If ((Not (Me._fTAlarmTableTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._fTAlarmTableTableAdapter.Connection) Is Nothing)) Then
                    Return Me._fTAlarmTableTableAdapter.Connection
                End If
                If ((Not (Me._fTDataTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._fTDataTableAdapter.Connection) Is Nothing)) Then
                    Return Me._fTDataTableAdapter.Connection
                End If
                If ((Not (Me._fTMachineSettingTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._fTMachineSettingTableAdapter.Connection) Is Nothing)) Then
                    Return Me._fTMachineSettingTableAdapter.Connection
                End If
                If ((Not (Me._myUserTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._myUserTableAdapter.Connection) Is Nothing)) Then
                    Return Me._myUserTableAdapter.Connection
                End If
                If ((Not (Me._transactionDataTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._transactionDataTableAdapter.Connection) Is Nothing)) Then
                    Return Me._transactionDataTableAdapter.Connection
                End If
                If ((Not (Me._fixedLCLTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._fixedLCLTableAdapter.Connection) Is Nothing)) Then
                    Return Me._fixedLCLTableAdapter.Connection
                End If
                If ((Not (Me._testerTypeTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._testerTypeTableAdapter.Connection) Is Nothing)) Then
                    Return Me._testerTypeTableAdapter.Connection
                End If
                If ((Not (Me._equipmentLocationTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._equipmentLocationTableAdapter.Connection) Is Nothing)) Then
                    Return Me._equipmentLocationTableAdapter.Connection
                End If
                If ((Not (Me._dataTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._dataTableAdapter.Connection) Is Nothing)) Then
                    Return Me._dataTableAdapter.Connection
                End If
                If ((Not (Me._fTSetupReportTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._fTSetupReportTableAdapter.Connection) Is Nothing)) Then
                    Return Me._fTSetupReportTableAdapter.Connection
                End If
                If ((Not (Me._fTBomTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._fTBomTableAdapter.Connection) Is Nothing)) Then
                    Return Me._fTBomTableAdapter.Connection
                End If
                If ((Not (Me._fTBomOptionTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._fTBomOptionTableAdapter.Connection) Is Nothing)) Then
                    Return Me._fTBomOptionTableAdapter.Connection
                End If
                If ((Not (Me._fTBomTestEquipmentTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._fTBomTestEquipmentTableAdapter.Connection) Is Nothing)) Then
                    Return Me._fTBomTestEquipmentTableAdapter.Connection
                End If
                If ((Not (Me._tempDataTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._tempDataTableAdapter.Connection) Is Nothing)) Then
                    Return Me._tempDataTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._ukebaraiDataTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._fTAlarmInfoTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._fTAlarmTableTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._fTDataTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._fTMachineSettingTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._myUserTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._transactionDataTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._fixedLCLTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._testerTypeTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._equipmentLocationTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._dataTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._fTSetupReportTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._fTBomTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._fTBomOptionTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._fTBomTestEquipmentTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._tempDataTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As DBxDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._testerTypeTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.TesterType.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._testerTypeTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._transactionDataTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.TransactionData.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._transactionDataTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._fTBomTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.FTBom.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._fTBomTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._fTAlarmTableTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.FTAlarmTable.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._fTAlarmTableTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._dataTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Data.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._dataTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._fTSetupReportTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.FTSetupReport.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._fTSetupReportTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._tempDataTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.TempData.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._tempDataTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._ukebaraiDataTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.UkebaraiData.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._ukebaraiDataTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._fTBomOptionTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.FTBomOption.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._fTBomOptionTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._fTBomTestEquipmentTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.FTBomTestEquipment.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._fTBomTestEquipmentTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._fTMachineSettingTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.FTMachineSetting.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._fTMachineSettingTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._fTDataTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.FTData.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._fTDataTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._fTAlarmInfoTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.FTAlarmInfo.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._fTAlarmInfoTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._myUserTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.MyUser.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._myUserTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._equipmentLocationTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.EquipmentLocation.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._equipmentLocationTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._fixedLCLTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.FixedLCL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._fixedLCLTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As DBxDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._testerTypeTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.TesterType.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._testerTypeTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._transactionDataTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.TransactionData.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._transactionDataTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._fTBomTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.FTBom.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._fTBomTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._fTAlarmTableTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.FTAlarmTable.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._fTAlarmTableTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._dataTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Data.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._dataTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._fTSetupReportTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.FTSetupReport.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._fTSetupReportTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._tempDataTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.TempData.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._tempDataTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._ukebaraiDataTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.UkebaraiData.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._ukebaraiDataTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._fTBomOptionTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.FTBomOption.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._fTBomOptionTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._fTBomTestEquipmentTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.FTBomTestEquipment.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._fTBomTestEquipmentTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._fTMachineSettingTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.FTMachineSetting.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._fTMachineSettingTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._fTDataTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.FTData.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._fTDataTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._fTAlarmInfoTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.FTAlarmInfo.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._fTAlarmInfoTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._myUserTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.MyUser.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._myUserTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._equipmentLocationTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.EquipmentLocation.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._equipmentLocationTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._fixedLCLTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.FixedLCL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._fixedLCLTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As DBxDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._fixedLCLTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.FixedLCL.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._fixedLCLTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._equipmentLocationTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.EquipmentLocation.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._equipmentLocationTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._myUserTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.MyUser.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._myUserTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._fTAlarmInfoTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.FTAlarmInfo.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._fTAlarmInfoTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._fTDataTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.FTData.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._fTDataTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._fTMachineSettingTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.FTMachineSetting.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._fTMachineSettingTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._fTBomTestEquipmentTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.FTBomTestEquipment.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._fTBomTestEquipmentTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._fTBomOptionTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.FTBomOption.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._fTBomOptionTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._ukebaraiDataTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.UkebaraiData.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._ukebaraiDataTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._tempDataTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.TempData.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._tempDataTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._fTSetupReportTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.FTSetupReport.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._fTSetupReportTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._dataTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Data.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._dataTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._fTAlarmTableTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.FTAlarmTable.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._fTAlarmTableTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._fTBomTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.FTBom.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._fTBomTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._transactionDataTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.TransactionData.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._transactionDataTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._testerTypeTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.TesterType.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._testerTypeTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As DBxDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._ukebaraiDataTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._ukebaraiDataTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._fTAlarmInfoTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._fTAlarmInfoTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._fTAlarmTableTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._fTAlarmTableTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._fTDataTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._fTDataTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._fTMachineSettingTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._fTMachineSettingTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._myUserTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._myUserTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._transactionDataTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._transactionDataTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._fixedLCLTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._fixedLCLTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._testerTypeTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._testerTypeTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._equipmentLocationTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._equipmentLocationTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._dataTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._dataTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._fTSetupReportTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._fTSetupReportTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._fTBomTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._fTBomTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._fTBomOptionTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._fTBomOptionTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._fTBomTestEquipmentTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._fTBomTestEquipmentTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._tempDataTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._tempDataTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._ukebaraiDataTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._ukebaraiDataTableAdapter, Me._ukebaraiDataTableAdapter.Connection)
                    Me._ukebaraiDataTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._ukebaraiDataTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._ukebaraiDataTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._ukebaraiDataTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._ukebaraiDataTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._fTAlarmInfoTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._fTAlarmInfoTableAdapter, Me._fTAlarmInfoTableAdapter.Connection)
                    Me._fTAlarmInfoTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._fTAlarmInfoTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._fTAlarmInfoTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._fTAlarmInfoTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._fTAlarmInfoTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._fTAlarmTableTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._fTAlarmTableTableAdapter, Me._fTAlarmTableTableAdapter.Connection)
                    Me._fTAlarmTableTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._fTAlarmTableTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._fTAlarmTableTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._fTAlarmTableTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._fTAlarmTableTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._fTDataTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._fTDataTableAdapter, Me._fTDataTableAdapter.Connection)
                    Me._fTDataTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._fTDataTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._fTDataTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._fTDataTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._fTDataTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._fTMachineSettingTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._fTMachineSettingTableAdapter, Me._fTMachineSettingTableAdapter.Connection)
                    Me._fTMachineSettingTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._fTMachineSettingTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._fTMachineSettingTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._fTMachineSettingTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._fTMachineSettingTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._myUserTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._myUserTableAdapter, Me._myUserTableAdapter.Connection)
                    Me._myUserTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._myUserTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._myUserTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._myUserTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._myUserTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._transactionDataTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._transactionDataTableAdapter, Me._transactionDataTableAdapter.Connection)
                    Me._transactionDataTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._transactionDataTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._transactionDataTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._transactionDataTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._transactionDataTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._fixedLCLTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._fixedLCLTableAdapter, Me._fixedLCLTableAdapter.Connection)
                    Me._fixedLCLTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._fixedLCLTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._fixedLCLTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._fixedLCLTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._fixedLCLTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._testerTypeTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._testerTypeTableAdapter, Me._testerTypeTableAdapter.Connection)
                    Me._testerTypeTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._testerTypeTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._testerTypeTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._testerTypeTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._testerTypeTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._equipmentLocationTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._equipmentLocationTableAdapter, Me._equipmentLocationTableAdapter.Connection)
                    Me._equipmentLocationTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._equipmentLocationTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._equipmentLocationTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._equipmentLocationTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._equipmentLocationTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._dataTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._dataTableAdapter, Me._dataTableAdapter.Connection)
                    Me._dataTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._dataTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._dataTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._dataTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._dataTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._fTSetupReportTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._fTSetupReportTableAdapter, Me._fTSetupReportTableAdapter.Connection)
                    Me._fTSetupReportTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._fTSetupReportTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._fTSetupReportTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._fTSetupReportTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._fTSetupReportTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._fTBomTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._fTBomTableAdapter, Me._fTBomTableAdapter.Connection)
                    Me._fTBomTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._fTBomTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._fTBomTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._fTBomTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._fTBomTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._fTBomOptionTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._fTBomOptionTableAdapter, Me._fTBomOptionTableAdapter.Connection)
                    Me._fTBomOptionTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._fTBomOptionTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._fTBomOptionTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._fTBomOptionTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._fTBomOptionTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._fTBomTestEquipmentTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._fTBomTestEquipmentTableAdapter, Me._fTBomTestEquipmentTableAdapter.Connection)
                    Me._fTBomTestEquipmentTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._fTBomTestEquipmentTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._fTBomTestEquipmentTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._fTBomTestEquipmentTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._fTBomTestEquipmentTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._tempDataTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._tempDataTableAdapter, Me._tempDataTableAdapter.Connection)
                    Me._tempDataTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._tempDataTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._tempDataTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._tempDataTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._tempDataTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._ukebaraiDataTableAdapter) Is Nothing) Then
                    Me._ukebaraiDataTableAdapter.Connection = CType(revertConnections(Me._ukebaraiDataTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._ukebaraiDataTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._fTAlarmInfoTableAdapter) Is Nothing) Then
                    Me._fTAlarmInfoTableAdapter.Connection = CType(revertConnections(Me._fTAlarmInfoTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._fTAlarmInfoTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._fTAlarmTableTableAdapter) Is Nothing) Then
                    Me._fTAlarmTableTableAdapter.Connection = CType(revertConnections(Me._fTAlarmTableTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._fTAlarmTableTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._fTDataTableAdapter) Is Nothing) Then
                    Me._fTDataTableAdapter.Connection = CType(revertConnections(Me._fTDataTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._fTDataTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._fTMachineSettingTableAdapter) Is Nothing) Then
                    Me._fTMachineSettingTableAdapter.Connection = CType(revertConnections(Me._fTMachineSettingTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._fTMachineSettingTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._myUserTableAdapter) Is Nothing) Then
                    Me._myUserTableAdapter.Connection = CType(revertConnections(Me._myUserTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._myUserTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._transactionDataTableAdapter) Is Nothing) Then
                    Me._transactionDataTableAdapter.Connection = CType(revertConnections(Me._transactionDataTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._transactionDataTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._fixedLCLTableAdapter) Is Nothing) Then
                    Me._fixedLCLTableAdapter.Connection = CType(revertConnections(Me._fixedLCLTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._fixedLCLTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._testerTypeTableAdapter) Is Nothing) Then
                    Me._testerTypeTableAdapter.Connection = CType(revertConnections(Me._testerTypeTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._testerTypeTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._equipmentLocationTableAdapter) Is Nothing) Then
                    Me._equipmentLocationTableAdapter.Connection = CType(revertConnections(Me._equipmentLocationTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._equipmentLocationTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._dataTableAdapter) Is Nothing) Then
                    Me._dataTableAdapter.Connection = CType(revertConnections(Me._dataTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._dataTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._fTSetupReportTableAdapter) Is Nothing) Then
                    Me._fTSetupReportTableAdapter.Connection = CType(revertConnections(Me._fTSetupReportTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._fTSetupReportTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._fTBomTableAdapter) Is Nothing) Then
                    Me._fTBomTableAdapter.Connection = CType(revertConnections(Me._fTBomTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._fTBomTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._fTBomOptionTableAdapter) Is Nothing) Then
                    Me._fTBomOptionTableAdapter.Connection = CType(revertConnections(Me._fTBomOptionTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._fTBomOptionTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._fTBomTestEquipmentTableAdapter) Is Nothing) Then
                    Me._fTBomTestEquipmentTableAdapter.Connection = CType(revertConnections(Me._fTBomTestEquipmentTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._fTBomTestEquipmentTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._tempDataTableAdapter) Is Nothing) Then
                    Me._tempDataTableAdapter.Connection = CType(revertConnections(Me._tempDataTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._tempDataTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
